<?php

// The modules file will essentially contain hook implementations
// for actions that need to be performed that are institution 
// specific

// stub function for generating matriculation numbers
function me_gen_matno($studUID, $formerProgID=0) {
  
  //get the institution's choice of mat num
  $sql = "SELECT mat_num_format_id AS mat_num_format, mat_num_serial_gen_type_id AS mat_num_serial_type FROM mat_num_institution_choice ";
  $rs = db_query($sql);
  
  if(db_affected_rows($rs) <= 0) return false;
  
  $instChoice = db_fetch_object($rs);
  
  switch($instChoice->mat_num_format){
    case '1': //veritas style
      return gen_veritas_style_matnum($instChoice->mat_num_format, $instChoice->mat_num_serial_type, $studUID, $formerProgID);
    break;
    
    case '2': //udusok style
      return gen_udusok_style_matnum($instChoice->mat_num_format, $instChoice->mat_num_serial_type, $studUID, $formerProgID);
    	       
    break;
    
    default:
      return false;
  	  
  }
  
}


function gen_udusok_style_matnum($formatID, $serialTypeID, $studUID, $formerProgID=0){
  /**
  This style of matno does not have separators
  example: 0611406096,  0621406096.
  The first example is for 100 level and the second one for 200 (DE).
  The first 2 digits rep. Year of entry i.e 06.
  The third digit rep. mode of entry i.e 1 for 100 level & 2 for 200 level.
  The fourth & fifth digits rep. faculty code i.e 14.
  The sixth & seventh digits rep.departmental code for that faculty i.e 06.
  The last 3 digits rep. serial number i.e 096.  
  
  This style will be divided into
  
  06-1-14-06-096
  $entryYear - $entryMode - $facCode - $deptCode - $SerialNum
  */
  
  /**
  The code below assumes that faculty_abbr and department_abbr will be of numeric values as above!!!
  
  */
  
  //get the candidate's program, department and faculty info
  $student_profile = new UserProfile($studUID);
  
  $sql = "SELECT ctc.nid AS faculty_nid, ctd.nid AS department_nid, ctp.nid AS programme_nid, field_department_code_value AS department_code, field_college_abbreviation_value AS faculty_code 
  	FROM {content_type_program} ctp 
  	INNER JOIN {content_type_department} ctd ON ctp.field_department_id_nid=ctd.nid
  	INNER JOIN {content_type_college} ctc ON ctd.field_college_id_nid=ctc.nid   
  	WHERE ctp.nid=%d";
  	
  $rs = db_query($sql,$student_profile->profile_first_choice); 
  if (db_affected_rows($rs) <= 0) return false;
  $rsStudent = db_fetch_object($rs);
  
  //check for change of programme
  if($formerProgID != 0){
    //now if the candidate is moving within the same faculty, no new mat is required
    //get the faculty of the old programme
     $sql = "SELECT ctc.nid AS faculty_nid, ctd.nid AS department_nid, ctp.nid AS programme_nid, field_department_code_value AS department_code, field_college_abbreviation_value AS faculty_code 
  	FROM {content_type_program} ctp 
  	INNER JOIN {content_type_department} ctd ON ctp.field_department_id_nid=ctd.nid
  	INNER JOIN {content_type_college} ctc ON ctd.field_college_id_nid=ctc.nid   
  	WHERE ctp.nid=%d"; 
  	
     $rs = db_query($sql,$formerProgID); 
     if (db_affected_rows($rs) <= 0) return false;
     $rsFormerProg = db_fetch_object($rs);
     
     if($rsStudent->faculty_nid == $rsFormerProg->faculty_nid){
       //the faculties are the same...so no need to proceed. Just return the current mat num  
       $return = array($student_profile->profile_matno, $student_profile->university_email);
       return $return;
    
     }
  }
  
  
  
  
  //although we know that they are using faculty serial, who knows they may have choosen global serial. Lets just test
  //check the serial type
  if($serialTypeID == 1){
    //seems they decided to change to global serial...ok
    $sql = "SELECT next_num FROM mat_num_general_serial WHERE session_name='%s' FOR UPDATE ";
    $rs = db_query($sql, variable_get('eduerp_current_session', ''));
    if (db_affected_rows($rs) <= 0) {
      db_query('ROLLBACK');
      return false;
    }
    
    $rsSerial = db_fetch_object($rs);
    $SerialNum = $rsSerial->next_num;
    
    //increment the counter
    $sql = "UPDATE mat_num_general_serial SET next_num=next_num + 1 WHERE session_name='%s'";
    db_query($sql, variable_get('eduerp_current_session', ''));
    db_query('COMMIT');
    
  }
  else {//for Faculty Counter / Serial
    //now lets get his faculty's serial counter
    $sql = "SELECT next_num FROM mat_num_faculty_serial WHERE faculty_nid=%d AND session_name='%s' FOR UPDATE ";
    $rs = db_query($sql, $rsStudent->faculty_nid, variable_get('eduerp_current_session', ''));
    if (db_affected_rows($rs) <= 0) {
      db_query('ROLLBACK');
      return false;
    }
  
    $rsSerial = db_fetch_object($rs);
    $SerialNum = $rsSerial->next_num;
  
    //increment the counter
    $sql = "UPDATE mat_num_faculty_serial SET next_num=next_num + 1 WHERE faculty_nid=%d AND session_name='%s'";
    db_query($sql, $rsStudent->faculty_nid, variable_get('eduerp_current_session', ''));
    db_query('COMMIT');
  
  }
  
  $entryYear = substr(variable_get('eduerp_current_session', ''), 2, 2); 
  $entryMode = strtoupper(strtolower($student_profile->profile_entry_mode)) == 'DE' ? 2 : 1;
  $facCode = $rsStudent->faculty_code;
  $deptCode = $rsStudent->department_code;
  
  //because this is an open development, lets check if there exists format details...e.g prefix, separator etc.
  
  $sql = "SELECT mat_num_institution_prefix AS prefix, mat_num_separator AS seprator  FROM mat_num_format_details WHERE mat_num_format_id=%d";
  $rs = db_query($sql, $formatID);
  
  if (db_affected_rows($rs) > 0) {
    //seems they now want prefix and separators..ok
    $rsDetails = db_fetch_object($rs);
    
    $matNumber = ($rsDetails->prefix . $rsDetails->seprator . $entryYear . $rsDetails->seprator . $entryMode . $rsDetails->seprator . $facCode . $rsDetails->seprator . $deptCode . $rsDetails->seprator . $SerialNum);
  	  
  }
  else{
    //now bring them together
    $matNumber = ($entryYear . $entryMode . $facCode . $deptCode . $SerialNum);
  }
  
  
  //generate the email
  $email = me_gen_email($studUID, $matNumber, $formerProgID);
  
  $return = array($matNumber, $email);
  return $return;
}

//veritas style mat num
function gen_veritas_style_matnum($formatID, $serialTypeID, $studUID, $formerProgID=0){
 /**
  This style of matno have separators
  example: VUG-PHY-09-003
  The first 3 chracters represent intitution prefix.
  The next 5-7 chracters represent faculty abbr.
  The next 9-10 digits rep year of entry
  The next 12-14 digits represent university-wide serial.
  
  
  This style will be divided into
  
  VUG-PHY-09-003
  $instPrefix - $facCode - $entryYear - $SerialNum
  
  The separator used is '-'
  */
  
  //get the candidate's program, department and faculty info
  $student_profile = new UserProfile($studUID);
  
  $sql = "SELECT ctc.nid AS faculty_nid, ctd.nid AS department_nid, ctp.nid AS programme_nid, field_department_code_value AS department_code, field_college_abbreviation_value AS faculty_code 
  	FROM {content_type_program} ctp 
  	INNER JOIN {content_type_department} ctd ON ctp.field_department_id_nid=ctd.nid
  	INNER JOIN {content_type_college} ctc ON ctd.field_college_id_nid=ctc.nid   
  	WHERE ctp.nid=%d";
  	
  $rs = db_query($sql,$student_profile->profile_first_choice);// $studUID, 
  if (db_affected_rows($rs) <= 0) return false;
  $rsStudent = db_fetch_object($rs);
  
  
  //check for change of programme
  if($formerProgID != 0){
    //now if the candidate is moving within the same faculty, no new mat is required
    //get the faculty of the old programme
     $sql = "SELECT ctc.nid AS faculty_nid, ctd.nid AS department_nid, ctp.nid AS programme_nid, field_department_code_value AS department_code, field_college_abbreviation_value AS faculty_code 
  	FROM {content_type_program} ctp 
  	INNER JOIN {content_type_department} ctd ON ctp.field_department_id_nid=ctd.nid
  	INNER JOIN {content_type_college} ctc ON ctd.field_college_id_nid=ctc.nid   
  	WHERE ctp.nid=%d"; 
  	
     $rs = db_query($sql,$formerProgID); 
     if (db_affected_rows($rs) <= 0) return false;
     $rsFormerProg = db_fetch_object($rs);
     
     if($rsStudent->faculty_nid == $rsFormerProg->faculty_nid){
       //the faculties are the same...so no need to proceed. Just return the current mat num  
       $return = array($student_profile->profile_matno, $student_profile->university_email);
       return $return;
    
     }
  }
  
  
  //although we know that they are using institution wide serial, who knows they may have choosen faculty serial. Lets just test
  //check the serial type
  if($serialTypeID == 1){//general serial
    //ok great. Lets generate the serial
    $sql = "SELECT next_num FROM mat_num_general_serial WHERE session_name='%s' FOR UPDATE ";
    $rs = db_query($sql, variable_get('eduerp_current_session', ''));
    if (db_affected_rows($rs) <= 0) {
      db_query('ROLLBACK');
      return false;
    }
    
    $rsSerial = db_fetch_object($rs);
    $SerialNum = $rsSerial->next_num;
    
    //increment the counter
    $sql = "UPDATE mat_num_general_serial SET next_num=next_num + 1 WHERE session_name='%s'";
    db_query($sql, variable_get('eduerp_current_session', ''));
    db_query('COMMIT');
    
  }
  else {//for Faculty Counter / Serial
    //seems they decided to change to faculty serial...ok
    $sql = "SELECT next_num FROM mat_num_faculty_serial WHERE faculty_nid=%d AND session_name='%s' FOR UPDATE ";
    $rs = db_query($sql, $rsStudent->faculty_nid, variable_get('eduerp_current_session', ''));
    if (db_affected_rows($rs) <= 0) {
      db_query('ROLLBACK');
      return false;
    }
  
    $rsSerial = db_fetch_object($rs);
    $SerialNum = $rsSerial->next_num;
  
    //increment the counter
    $sql = "UPDATE mat_num_faculty_serial SET next_num=next_num + 1 WHERE faculty_nid=%d AND session_name='%s'";
    db_query($sql, $rsStudent->faculty_nid, variable_get('eduerp_current_session', ''));
    db_query('COMMIT');
  
  }
  
  $entryYear = substr(variable_get('eduerp_current_session', ''), 2, 2); 
  $facCode = $rsStudent->faculty_code;
  
  
  $sql = "SELECT mat_num_institution_prefix AS prefix, mat_num_separator AS seprator  FROM mat_num_format_details WHERE mat_num_format_id=%d";
  $rs = db_query($sql, $formatID);
  
  if (db_affected_rows($rs) > 0) {
    //append prefix and separators
    $rsDetails = db_fetch_object($rs);
    
    $matNumber = ($rsDetails->prefix . $rsDetails->seprator . $facCode . $rsDetails->seprator . $entryYear . $rsDetails->seprator . $SerialNum);
  	  
  }
  else{
    //no prefix or separator info was found so just bring them together
    $matNumber = ($facCode . $entryYear . $SerialNum);
  }
  
  
  //generate the email
  $email = me_gen_email($studUID, $matNumber, $formerProgID);
  
  $return = array($matNumber, $email);
  return $return;
}


//update mat_num_faculty_serial and email_faculty_subdomain_description tables via hook
function me_gen_updFacultyInfo($facNID, $sessionName, $facSubDomain){
  
  //create entry for mat num gen	
  //check if the nid exists
  $sql = "SELECT faculty_nid FROM mat_num_faculty_serial WHERE faculty_nid=%d";
  $rs = db_query($sql, $facNID);
  if (db_affected_rows($rs) <= 0) {
    //we need to create the new faculty
    $sql = "INSERT INTO mat_num_faculty_serial (faculty_nid, session_name) VALUES (%d, '%s') ";
    $rs = db_query($sql, $facNID, $sessionName);
  	  
  }
  //end of entry for mat num gen
  
  
  //create entry for email gen
  //check if the nid exists
  $sql = "SELECT faculty_nid FROM email_faculty_subdomain_description WHERE faculty_nid=%d";
  $rs = db_query($sql, $facNID);
  if (db_affected_rows($rs) <= 0) {
    //we need to create the new faculty
    $sql = "INSERT INTO email_faculty_subdomain_description (faculty_nid, email_subdomain) VALUES (%d, '%s') ";
    $rs = db_query($sql, $facNID, $facSubDomain);
  	  
  }
  else {
    //update the email_subdomain
    $sql = "UPDATE {email_faculty_subdomain_description} SET email_subdomain='%s' WHERE faculty_nid=%d ";
    $rs = db_query($sql, $facSubDomain, $facNID);
  }
  
  //end of entry for email gen
}

function me_gen_email($studUID, $matNum, $formerProgID=0){
  //get the institution choice
  
  $sql = "SELECT email_domain_format_id AS email_domain_format, email_user_format_id AS email_user_format FROM {email_institution_choice} ";
  $rs = db_query($sql);
  if (db_affected_rows($rs) <= 0) return false;
  
  $instChoice = db_fetch_object($rs);
  
  //get the candidate's program, department and faculty info
  $student_profile = new UserProfile($studUID);
  
  if($formerProgID != 0){
    //the candidate already has university email. Just return it
    return $student_profile->university_email;
  }
  
  //lets get the domain part of the email
  switch($instChoice->email_domain_format){
    case '1'://single or group domains
      //get it
      $sql = "SELECT email_domain FROM {email_general_domain_description} ";
      $rs = db_query($sql); 
      if (db_affected_rows($rs) <= 0) return false;
      
      $row = db_fetch_object($rs);
      
      $domainPart = $row->email_domain;
      
    break;
    case '2': //for faculty based subdomains
      //get faculty info
      $sql = "SELECT ctc.nid AS faculty_nid, ctd.nid AS department_nid, ctp.nid AS programme_nid, field_department_code_value AS department_code, field_college_abbreviation_value AS faculty_code 
  	FROM {content_type_program} ctp 
  	INNER JOIN {content_type_department} ctd ON ctp.field_department_id_nid=ctd.nid
  	INNER JOIN {content_type_college} ctc ON ctd.field_college_id_nid=ctc.nid   
  	WHERE ctp.nid=%d";
  	
      $rs = db_query($sql,$student_profile->profile_first_choice); 
      if (db_affected_rows($rs) <= 0) return false;
      $rsStudent = db_fetch_object($rs);
      
      //now get his faculty's subdomain
      
      $sql = "SELECT email_subdomain FROM email_faculty_subdomain_description WHERE faculty_nid=%d";
      $rs = db_query($sql,$rsStudent->faculty_nid); 
      if (db_affected_rows($rs) <= 0) return false;
      
      $row = db_fetch_object($rs);
      
      $domainPart = $row->email_subdomain;
    	    
    break;
    
    default: return false;
  	  
  }
  
  //lets get the user part of the email
  
  switch($instChoice->email_user_format){
    case '1'://udusok userpart style - [last_name][last 2 digits of session_name][student_serial] 
      $userPart = ($student_profile->profile_last_name . substr(variable_get('eduerp_current_session', ''), 2, 2) . substr($matNum, -3, 3));
    	     
    break;
    
    case '2'://veritas userpart style - matriculation number
      $userPart =  $matNum;
    	    
    break;
    
    default: return false;  
  }
  
  //bring the email address together
  
  $userEmail = ($userPart . '@' . $domainPart);
  
  if($formerProgID == 0){
    //update the student's email
    $student_profile->university_email = $userEmail;
    $student_profile->save();
  }
  
  //if personal e-mail is empty, update it with Drupal's email
  if(! $student_profile->personal_email || empty($student_profile->personal_email) || $student_profile->personal_email == ""){
    $student = user_load($studUID);
    
    $student_profile->personal_email = $student->mail;
    $student_profile->save();
    
  }
  
  //return the generated email
  return $userEmail;
}

function me_gen_createsession($sessioname){
	
  //once the session changes, we should update our tables
  
  //get all facultites
  $sql = "SELECT nid AS faculty_nid, field_college_email_subdomain_value AS faculty_subdomain
  	FROM {content_type_college} ";
  	
  $rsFaculty = db_query($sql); 
  if (db_affected_rows($rs) <= 0) return false;
  
  $sqlmat = "INSERT INTO mat_num_faculty_serial (faculty_nid, session_name ) VALUES ";
  $sqlemail = "INSERT INTO email_faculty_subdomain_description (faculty_nid, email_subdomain ) VALUES ";
  
  $foundEmail = false; $foundMat = false;
  while($row = db_fetch_object($rsFaculty)){
  	  
    //make sure it does not exist first
    $sql = "SELECT faculty_nid FROM mat_num_faculty_serial WHERE faculty_nid=%d AND session_name='%s' ";
    $rs = db_query($sql, $row->faculty_nid, $sessioname );
    
    if (db_affected_rows($rs) <= 0) {
      $sqlmat .= "('". $row->faculty_nid ."', '". $sessioname ."'), ";
      $foundMat = true;
    }
    
    //make sure it does not exist first
    $sql = "SELECT faculty_nid FROM email_faculty_subdomain_description WHERE faculty_nid=%d ";
    $rs = db_query($sql, $row->faculty_nid );
    
    if (db_affected_rows($rs) <= 0) {
      $sqlemail .= "('". $row->faculty_nid ."', '". $row->faculty_subdomain ."'), ";
      $foundEmail = true;
    }
  	  
  }
  
  if($foundMat){
    $sqlmat = substr($sqlmat, 0, -2);
    db_query($sqlmat);
  }
  
  if($foundEmail){
    $sqlemail = substr($sqlemail, 0, -2);
    db_query($sqlemail);
  }
  
  //insert for global serial
   //make sure it does not exist first
  $sql = "SELECT mat_num_general_serial_id FROM mat_num_general_serial WHERE session_name='%s' ";
  $rs = db_query($sql, $sessioname );
  if (db_affected_rows($rs) <= 0) {
    $sql = "INSERT INTO mat_num_general_serial (session_name) VALUES ('%s') ";
    db_query($sql, $sessioname);
  }
    
  
}
?>
