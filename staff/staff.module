<?php
include(drupal_get_path('module', 'eduerp') . '/eduerp_global.inc');

function staff_menu() {
  $items['staff/semester'] = array(
    'title' => 'Semester Administration',
    'page callback' => 'semester_admin',
    'access arguments' => array('staff register course'),
    'type' => MENU_NORMAL_ITEM
  );

  $items['staff/list']=array(
    'title'=>'Staff List',
    'page callback' => 'search_staff_list',
    'access arguments' => array('staff list'),
    'type' => MENU_CALLBACK,
  );

  $items['staff/department']=array(
    'title'=>'Staff List',
    'page callback' => 'staff_department_list',
    'access arguments' => array('staff department list'),
    'type' => MENU_CALLBACK,
  );

  $items['staff/viewlecturer']=array(
    'title'=>'Staff List',
    'page callback' => 'staff_course_list',
    'access arguments' => array('staff view lecturer'),
    'type' => MENU_CALLBACK,
  );

  $items['staff/view']=array(
    'title'=>'Staff Summary',
    'page callback' => 'drupal_get_form',
    'page arguments'=>array('staff_view_form'),
    'access arguments' => array('staff list'),
    'type' => MENU_CALLBACK,
  );

  $items['staff/assignrole'] = array(
    'title' => 'Staff Roles',
    'page callback' => 'staff_assign_role',
    'access arguments' => array('staff assign role'),
    'type' => MENU_CALLBACK,
  );

  $items['staff/viewstudent']=array(
    'title' => 'View Student',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('view_student_form'),
    'access arguments' => array('student data'),
    'type' => MENU_CALLBACK,
  );
  $items['staff/staffsearch']=array(
    'title' => 'Staff Search',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('search_staff_form'),
    'access arguments' => array('staff data'),
    'type' => MENU_CALLBACK,
  );
  $items['staff/ajax']=array(
    'title' => 'AJAX Routines',
    'page callback' => '_staff_ajax',
    'access arguments' => array('staff register course'),
    'type' => MENU_CALLBACK,
  );
  $items['staff/createeditfaculty'] = array(
    'title' => 'Create/Modify Faculty',
    'page callback' => 'staff_create_edit_faculty',
    'access arguments' => array('staff register course'),
    'type' => MENU_CALLBACK
  );
  $items['staff/createeditdept'] = array(
    'title' => 'Create/Modify Department',
    'page callback' => 'staff_create_edit_dept',
    'access arguments' => array('staff register course'),
    'type' => MENU_CALLBACK
  );
  $items['staff/createeditcourse']=array(
    'title'=>'Create/Modify a Course',
    'page callback' => 'staff_create_edit_course',
    'access arguments' => array('staff register course'),
    'type' => MENU_CALLBACK,
  );
  $items['staff/createmodifyprog']=array(
    'title'=>'Create/Modify a Programme',
    'page callback' => 'staff_create_edit_programme',
    'access arguments' => array('staff register course'),
    'type' => MENU_CALLBACK,
  );
  $items['staff/specifycourse']=array(
    'title'=>'Specify Courses for a Programme',
    'page callback' => 'staff_specify_course_for_programme',
    'access arguments' => array('staff register course'),
    'type' => MENU_CALLBACK,
  );
  $items['staff/verifycourse']=array(
    'title'=>'Verify all Courses needed for a Programme are being run for a Semester',
    'page callback' => 'staff_verify_assigned_course',
    'access arguments' => array('staff register course'),
    'type' => MENU_CALLBACK,
  );
  $items['staff/studentprogress']=array(
    'title'=>'Student Progress towards Qualification',
    'page callback' => 'staff_student_progress_qualification',
    'access arguments' => array('staff register course'),
    'type' => MENU_CALLBACK,
  );

  $items['staff/unregstudents']=array(
    'title'=>'List of Students who have Not Registered for a Semester',
    'page callback' => 'staff_unregistered_students',
    'access arguments' => array('staff register course'),
    'type' => MENU_CALLBACK,
  );

  $items['staff/dropcoursereg']=array(
    'title'=>'Mark a Course Registration as Dropped',
    'page callback' => 'staff_drop_registered_course',
    'access arguments' => array('staff register course'),
    'type' => MENU_CALLBACK,
  );

  $items['staff/manualcoursereg']=array(
    'title'=>'Manually Register a Student in a Course',
    'page callback' => 'staff_manual_course_reg',
    'access arguments' => array('staff register course'),
    'type' => MENU_CALLBACK,
  );

  $items['staff/changeprogmme']=array(
    'title'=>"Change a Student's Programme",
    'page callback' => 'staff_change_student_programme',
    'access arguments' => array('staff register course'),
    'type' => MENU_CALLBACK,
  );

  $items['staff/checkverifyprogmme']=array(
    'title'=>"Check have all existing Courses required for all Programmes been Verified",
    'page callback' => 'staff_check_verify_programme_courses',
    'access arguments' => array('staff register course'),
    'type' => MENU_CALLBACK,
  );
  
  $items['staff/missingcourses']=array(
    'title'=>'Check for Missing Courses for a Semester',
    'page callback' => 'staff_check_for_missing_courses',
    'access arguments' => array('staff register course'),
    'type' => MENU_CALLBACK,
  );
  
  return $items;
}


function _staff_ajax() {
  global $user;
  $task = arg(2);

  switch ($task):
    case 'course':
      $courses[""] = "";

      $program = $_POST['programme_id'];
      $level = $_POST['level'];

      // Retrieve available courses that have not been assigned
      //we want to put the courses of the department for the level selected at the top and then others will follow
      //get the programme info
      $programInfo = db_fetch_object(get_programmes($program));
      //get the courses not assigned for the level for the department
      $sql = "SELECT DISTINCT (c.nid) AS course_id, c.field_code_value AS course_code FROM {content_type_course} c
          INNER JOIN {content_type_department} d ON c.field_department_nid_nid=d.nid
          INNER JOIN {content_type_program} p ON p.field_department_id_nid=d.nid
        WHERE c.field_level_value = '". $level ."' AND d.nid = ". $programInfo->department_nid ."
        ORDER BY field_programme_name_value, c.field_level_value, c.field_semester_value, c.field_code_value ";
        /*
        c.nid NOT IN
        (SELECT pc.course_id FROM {program_course} pc WHERE pc.programme_id=". $program ." AND pc.level='". $level ."' AND pc.historical=0)
        AND
        */
      $rs = db_query($sql); $courses1 = array();
      if(db_affected_rows($rs) > 0) {
        while ($row = db_fetch_object($rs)) {
          $courses1[$row->course_id] = $row->course_code;
        }
      }
      //get the courses not assigned for other levels for the department
      $sql = "SELECT DISTINCT (c.nid) AS course_id, c.field_code_value AS course_code FROM {content_type_course} c
          INNER JOIN {content_type_department} d ON c.field_department_nid_nid=d.nid
          INNER JOIN {content_type_program} p ON p.field_department_id_nid=d.nid
        WHERE c.field_level_value != '". $level ."' AND d.nid = ". $programInfo->department_nid ."
        ORDER BY field_programme_name_value, c.field_level_value, c.field_semester_value, c.field_code_value ";
        /*
        c.nid NOT IN
        (SELECT pc.course_id FROM {program_course} pc WHERE pc.programme_id=". $program ." AND pc.level='". $level ."' AND pc.historical=0)
        AND
        */
       $rs = db_query($sql); $courses2 = array();
      if(db_affected_rows($rs) > 0) {
        while ($row = db_fetch_object($rs)) {
          $courses2[$row->course_id] = $row->course_code;
        }
      }

        //get the courses not assigned for levels for other departments
      $sql = "SELECT DISTINCT (c.nid) AS course_id, c.field_code_value AS course_code FROM {content_type_course} c
          INNER JOIN {content_type_department} d ON c.field_department_nid_nid=d.nid
          INNER JOIN {content_type_program} p ON p.field_department_id_nid=d.nid
        WHERE d.nid != ". $programInfo->department_nid ."
        ORDER BY d.field_department_name_value, field_programme_name_value, c.field_level_value, c.field_semester_value, c.field_code_value ";
        /*
         c.nid NOT IN
        (SELECT pc.course_id FROM {program_course} pc WHERE pc.programme_id=". $program ." AND pc.level='". $level ."' AND pc.historical=0)
        AND
        */
      $rs = db_query($sql); $courses3 = array();
      if(db_affected_rows($rs) > 0) {
        while ($row = db_fetch_object($rs)) {
          $courses3[$row->course_id] = $row->course_code;
        }
      }
       //order it as required
      $courses = $courses1 + $courses2 + $courses3;
        /*
      $sql = "SELECT c.nid AS course_id, c.field_code_value AS course_code FROM {content_type_course} c
        WHERE c.nid NOT IN (SELECT pc.course_id FROM {program_course} pc WHERE pc.programme_id=%d AND pc.level='%s' AND pc.historical=0)
        ORDER BY c.field_code_value ASC";
      $rs = db_query($sql, $program, $level);
      while ($row = db_fetch_object($rs)) {
        $courses[$row->course_id] = $row->course_code;
      }
      */
      $form['course_id'] = array(
        '#type' => 'select',
        '#title' => 'Course',
        '#options' => $courses,
        '#attributes' => array('style' => 'width:100px'),
        '#required' => TRUE);

      $output = _staff_ahah_render($form, 'course_id');
      print drupal_to_js(array('data' => $output, 'status' => true));
      break;
    case 'delete':
      $allocation_id = arg(3);

      // Delete this allocation
      $sql = "UPDATE {program_course} SET historical=1 WHERE program_course_id=%d";
      $rs = db_query($sql, $allocation_id);

      if (db_affected_rows() > 0) echo "OK";
      else echo "FAIL";
      break;
    case 'deleteassignprog':
      $allocation_id = arg(3);
      //$_SESSION['eduerp_showCourseAssignment'] = 1;
      // Delete this allocation
      $sql = "UPDATE {program_course} SET historical=1 WHERE program_course_id=%d";
      $rs = db_query($sql, $allocation_id);

      if (db_affected_rows() > 0) echo "OK";
      else echo "FAIL";
      break;
    case 'modifyassignprog':
      //$allocation_id = arg(3);
      $_SESSION['eduerp_showCourseAssignment'] = 1;

      break;
    case 'makeavailable':
      $allocation_id = arg(3);
      // Delete this allocation
      $sql = "UPDATE {program_course} SET historical=0 WHERE program_course_id=%d";
      $rs = db_query($sql, $allocation_id);

    break;
     case 'fix_course':
      $allocation_id = arg(4);
      // get the record to be used as defaults
      $sql = "SELECT course_id, programme_id, level, semester, course_type, lecturer_id FROM {program_course} WHERE program_course_id=%d";
      $rs = db_query($sql, $allocation_id);
      $row = db_fetch_object($rs);
      $_SESSION['eduerp_fix_course']->field_course_id_nid = $row->course_id;
      $_SESSION['eduerp_fix_course']->field_semester_name_value = $row->semester;
      $_SESSION['eduerp_fix_course']->field_lecturer_uid = $row->lecturer_id;
      $_SESSION['eduerp_fix_course']->session = $_SESSION['eduerp_verify']['session'];
      $_SESSION['eduerp_fix_course']->semester = $_SESSION['eduerp_verify']['semester'];
      $_SESSION['eduerp_return_url'] = "staff/verifycourse/" . arg(3);
    break;

    case 'programmelevel':
          $programme_nid = $_POST['programme_nid'];
          //get the levels for the programme
      $sql = "SELECT DISTINCT(level) level FROM {program_level_semester} WHERE programme_id = %d ORDER BY level ";
      $rs = db_query($sql, $programme_nid);
      while($row = db_fetch_object($rs))
        $levels[$row->level] = $row->level;

      $form['level_name'] = array(
        '#type' => 'select',
        '#options' => $levels,
        '#title' => 'New Start Level',
        '#attributes' => array(
      'style' => 'width:100px'),
        '#required' => TRUE
      );

      $output = _staff_ahah_render($form, 'level_name');
      print drupal_to_js(array('data' => $output, 'status' => true));
      break;
    case 'getdeflecturer':
    	 $course_nid = $_POST['course_nid']; $id = "";
    	 //get the default lecturer for the course
        $sql = "SELECT lecturer_id id FROM {program_course} WHERE course_id = %d LIMIT 1 ";
        $rs = db_query($sql, $course_nid);
        while($row = db_fetch_object($rs))
          $id = $row->id;

  	$form['chief_staff_nid'] = array(
      '#type' => 'select',
      '#options' => array(''=>'') + get_Staff_in_Department(),
      '#title' => 'Chief Lecturer',
      '#required'  => TRUE,
      '#default_value' => $id
        );
        $output = _staff_ahah_render($form, 'chief_staff_nid');
        print drupal_to_js(array('data' => $output, 'status' => true));
    	    break;
    case 'getblocks': //case 'getallocblocks':
    	 $hostel_nid = $_POST['hostel_nid']; $id = "";
    	 /*
    	if($task == 'getallocblocks'){
    	  $sql = "SELECT nid, field_block_name_value FROM {content_type_blocks} WHERE field_hostel_id_nid = %d ";

    	  switch($_SESSION['eduerp_reserve_room']['gender']):
		  case 'male':
		    $sql .= " AND (field_block_type_value = 1 OR field_block_type_value = 0) "; //get blocks that are male only or mixed
			break;
		  case 'female':
		    $sql .= " AND (field_block_type_value = 2 OR field_block_type_value = 0) "; //get blocks that are female only or mixed
		    break;
		  endswitch;


    	}else
    	*/
          $sql = "SELECT nid, field_block_name_value FROM {content_type_blocks} WHERE field_hostel_id_nid = %d ";

        $rs = db_query($sql, $hostel_nid);
        while($row = db_fetch_object($rs))
          $blocks[$row->nid] = $row->field_block_name_value;

  	$form['block_nid'] = array(
      '#type' => 'select',
      '#options' => $blocks,
      '#title' => 'Block Name',
      '#attributes' => array(
      'style' => 'width:100px'),
      '#prefix' => "<div id='shwblocks'>",
      '#suffix' => "</div>",
      '#required' => TRUE

        );
        $output = _staff_ahah_render($form, 'block_nid');
        print drupal_to_js(array('data' => $output, 'status' => true));
    	break;
    case 'getroomsinblock':
    	 $block_nid = $_POST['block_nid']; $id = "";

          $sql = "SELECT nid, field_room_name_value FROM {content_type_rooms} WHERE field_block_id_nid = %d ";

        $rs = db_query($sql, $block_nid);
        while($row = db_fetch_object($rs))
        $rooms[$row->nid] = $row->field_room_name_value;

  	$form['room_nid'] = array(
    '#title' => 'Room Name',
    '#type' => 'select',
    '#options' => $rooms,
    '#attributes' => array(
      'style' => 'width:100px'),
      '#prefix' => "<div id='shwrooms'>",
      '#suffix' => "</div>",
      //'#disabled' => TRUE,
    '#required' => TRUE
    );
        $output = _staff_ahah_render($form, 'room_nid');
         print drupal_to_js(array('data' => $output, 'status' => true));
    	break;
  endswitch;
  exit();
}


/*
  This function is largely based on the poll module, its been simplified for reuse.
  $fields is the specific form elements you want to attach via ahah,
  $name is the form fields array key... e.g. the name for $form['title'] is "title"
*/
function _staff_ahah_render($fields, $name) {

  drupal_alter('form', $fields, array(), 'staff_course_form');
  //$name = $fromHostel ? "block_nid" : "staff-course-assign-form1";
  $form_state = array('submitted' => FALSE,'#values'=>$_POST);
  $form_build_id = $_POST['form_build_id'];
  // Add the new element to the stored form. Without adding the element to the
  // form, Drupal is not aware of this new elements existence and will not
  // process it. We retreive the cached form, add the element, and resave.
  $form = form_get_cache($form_build_id, $form_state);
  if($form[$name]['#required'] == true){
    $fields['#required'] =  true;
  }
  $form[$name] = $fields;
  form_set_cache($form_build_id, $form, $form_state);
  $form += array(
    '#post' => $_POST,
    '#programmed' => FALSE,
  );
   $form_state = array('submitted' => FALSE);

  // Rebuild the form.
  $form = form_builder($_POST['form_id'], $form, $form_state);

  // Render the new output.
  $new_form = $form[$name];
  return drupal_render($new_form);
}


/*Function to get the staff permission.*/
function staff_perm() {
  return array('staff register','staff assign role','staff register course','staff view lecturer','staff department list','staff list', 'student data', 'staff data', 'student payments', 'student list students', 'view grading');
}


function staff_assign_role() {
  global $user;
  if (!staff_has_eduerp_role($user->uid, 0, 0, array('Role Assigner'))) {
      drupal_set_message('You are not authorized to access this page.');
      drupal_goto('user');
  }

  $_SESSION['eduerpassignrole']->uid = arg(2);

  $user_profile = new UserProfile($_SESSION['eduerpassignrole']->uid);
  $staffname = '';
  if (!empty($user_profile->profile_first_name) && !empty($user_profile->profile_last_name)) {
    $middle = '';
    if (!empty($user_profile->profile_middle_name)) $middle = ' ' . $user_profile->profile_middle_name;
    $staffname = "{$user_profile->profile_last_name}, {$user_profile->profile_first_name}{$middle}";
  }
  $_SESSION['eduerpassignrole']->name = $staffname;
  if (!empty($user_profile->profile_department_id)) {
    $_SESSION['eduerpassignrole']->department_id = $user_profile->profile_department_id;
    $result = db_query("SELECT field_college_id_nid FROM {content_type_department} WHERE nid=%d");
    $row = db_fetch_object($result, $user_profile->profile_department_id);
    $_SESSION['eduerpassignrole']->college_id = $row->field_college_id_nid;
  }
  else {
    $_SESSION['eduerpassignrole']->department_id = 0;
    $_SESSION['eduerpassignrole']->college_id = 0;
  }

  ob_start();

  echo "<b>Assign Roles or move Home Department for {$staffname}...</b><br />";

  echo '<br /><br /><hr /><br />';
  echo drupal_get_form('department_role_form');
  echo '<br /><br /><hr /><br />';
  echo drupal_get_form('faculty_role_form');
  echo '<br /><br /><hr /><br />';
  echo drupal_get_form('university_role_form');
  echo '<br /><br /><hr /><br />';
  echo drupal_get_form('current_roles_list_form');
  echo '<br /><br /><hr /><br />';
  echo drupal_get_form('move_department_form');
  echo '<br /><br /><hr />';

  describeroles();

  return ob_get_clean();
}


function department_role_form($form_state) {
  $form['top'] = array('#value' => "Give another Department role to {$_SESSION['eduerpassignrole']->name}:");

  $form['role'] = array(
    '#type' => 'select',
    '#options' => eduerp_department_roles(),
    '#title' => 'Role',
    '#default_value' => 'Department Examination Viewer',
    '#required' => TRUE);

  $form['department'] = array(
    '#type' => 'select',
    '#options' => department(),
    '#title' => 'Department',
    '#default_value' => $_SESSION['eduerpassignrole']->department_id,
    '#required' => TRUE);
    if (empty($_SESSION['eduerpassignrole']->department_id)) unset($form['department']['#default_value']);

  $form['uid'] = array('#type' => 'value', '#value' => $_SESSION['eduerpassignrole']->uid);

  $form['submit'] = array('#type' => 'submit', '#value' => "Assign new role to {$_SESSION['eduerpassignrole']->name}");
  return $form;
}


function faculty_role_form($form_state) {
  $form['top'] = array('#value' => "Give another Faculty role to {$_SESSION['eduerpassignrole']->name}:");

  $form['role'] = array(
    '#type' => 'select',
    '#options' => eduerp_faculty_roles(),
    '#title' => 'Role',
    '#default_value' => 'Faculty Examination Viewer',
    '#required' => TRUE);

  $form['faculty'] = array(
    '#type' => 'select',
    '#options' => faculty(),
    '#title' => 'Faculty',
    '#default_value' => $_SESSION['eduerpassignrole']->college_id,
    '#required' => TRUE);
    if (empty($_SESSION['eduerpassignrole']->college_id)) unset($form['faculty']['#default_value']);

  $form['uid'] = array('#type' => 'value', '#value' => $_SESSION['eduerpassignrole']->uid);

  $form['submit'] = array('#type' => 'submit', '#value' => "Assign new role to {$_SESSION['eduerpassignrole']->name}");
  return $form;
}


function university_role_form($form_state) {
  $form['top'] = array('#value' => "Give another University role to {$_SESSION['eduerpassignrole']->name}:");

  $form['role'] = array(
    '#type' => 'select',
    '#options' => eduerp_university_roles(),
    '#title' => 'Role',
    '#default_value' => 'University Examination Viewer',
    '#required' => TRUE);

  $form['uid'] = array('#type' => 'value', '#value' => $_SESSION['eduerpassignrole']->uid);

  $form['submit'] = array('#type' => 'submit', '#value' => "Assign new role to {$_SESSION['eduerpassignrole']->name}");
  return $form;
}


function eduerp_department_roles() {
  $options = array(
    'Department Examination Viewer' => 'Department Examination Viewer',
    'Department Examination Officer' => 'Department Examination Officer',
    'Head of Department' => 'Head of Department'
  );
  return $options;
}


function eduerp_faculty_roles() {
  $options = array(
    'Faculty Examination Viewer' => 'Faculty Examination Viewer',
    'Faculty Examination Officer' => 'Faculty Examination Officer',
    'Dean of Faculty' => 'Dean of Faculty'
  );
  return $options;
}


function eduerp_university_roles() {
  $options = array(
    'Non-Academic Staff' => 'Non-Academic Staff',
    'Academic Staff' => 'Academic Staff',
    'University Examination Viewer' => 'University Examination Viewer',
    'University Examination Officer' => 'University Examination Officer',
    'Bursar' => 'Bursar',
    'Bursary' => 'Bursary',
    'Registry' => 'Registry',
    'Registrar' => 'Registrar',
    'Vice-Chancellor' => 'Vice-Chancellor',
    'Student Affairs Officer' => 'Student Affairs Officer',
    'Role Assigner' => 'Role Assigner'
  );
  return $options;
}


function staff_has_eduerp_role($uid, $department_id, $faculty_id, $roles) {
  $result = db_query("SELECT er.role FROM {eduerp_roles} er WHERE er.uid=%d AND er.department_id=%d AND er.college_id=%d", $uid, $department_id, $faculty_id);

  while ($row = db_fetch_object($result)) {
    if (in_array($row->role, $roles)) return TRUE;
  }
  return FALSE;
}


function faculty($facultyNID=0) {
  static $options;
  if (!$options) {
    $options = array();
    if($facultyNID==0)
      $r = db_query("SELECT nid, field_college_name_value AS value FROM {content_type_college} ORDER BY field_college_name_value");
    else
      $r = db_query("SELECT nid, field_college_name_value AS value FROM {content_type_college} WHERE nid=%d ORDER BY field_college_name_value", $facultyNID);
    
    while ($f = db_fetch_object($r))
      $options[$f->nid] = $f->value;
  }
  return  $options;
}


function current_roles_list_form($form_state) {
  $form['top'] = array('#value' => "All current roles for {$_SESSION['eduerpassignrole']->name}:<br />");

  $result = db_query("SELECT er.eduerp_role_id,
      CONCAT(er.role, IFNULL(CONCAT(' (', d.field_department_name_value, ')'), IFNULL(CONCAT(' (', c.field_college_name_value, ')'), ''))) AS name
    FROM {eduerp_roles} er
    LEFT JOIN {content_type_department} d ON er.department_id=d.nid
    LEFT JOIN {content_type_college}    c ON er.college_id=c.nid
    WHERE er.uid=%d ORDER BY er.role", $_SESSION['eduerpassignrole']->uid);

  $form['roles'] = array('#tree' => TRUE);
  $found = FALSE;
  while ($row = db_fetch_object($result)) {
    $found = TRUE;
    $form['roles'][$row->eduerp_role_id] = array(
      '#type' => 'checkbox',
      '#title' => $row->name,
      '#default_value' => TRUE
    );
  }

  $form['uid'] = array('#type' => 'value', '#value' => $_SESSION['eduerpassignrole']->uid);

  if ($found) {
    $form['submit'] = array('#type' => 'submit', '#value' => "Remove any roles unchecked above from {$_SESSION['eduerpassignrole']->name}");
  }
  else {
    $form['noroles'] = array('#value' => '<br />No Roles Assigned<br />');
  }
  return $form;
}


function move_department_form($form_state) {
  $user_profile = new UserProfile($_SESSION['eduerpassignrole']->uid);
  if (empty($user_profile->profile_department_id)) {
    $dept_text = 'Does not currently have a department';
  }
  else {
    $department_array = department($user_profile->profile_department_id);
    $dept_text = "Department is currently: {$department_array[$user_profile->profile_department_id]}";
  }

  $form['top'] = array('#value' => "Move {$_SESSION['eduerpassignrole']->name} to a new department:<br />({$dept_text})");

  $form['department'] = array(
    '#type' => 'select',
    '#options' => department(),
    '#title' => 'Department',
    '#default_value' => $_SESSION['eduerpassignrole']->department_id,
    '#required' => TRUE);
    if (empty($_SESSION['eduerpassignrole']->department_id)) unset($form['department']['#default_value']);

  $form['uid'] = array('#type' => 'value', '#value' => $_SESSION['eduerpassignrole']->uid);

  $form['submit'] = array('#type' => 'submit', '#value' => "Move {$_SESSION['eduerpassignrole']->name} to the above department");
  return $form;
}


function department_role_form_submit($form, &$form_state) {
  addrole($form_state['values']['uid'], $form_state['values']['department'], 0, $form_state['values']['role']);
}


function faculty_role_form_submit($form, &$form_state) {
  addrole($form_state['values']['uid'], 0, $form_state['values']['faculty'], $form_state['values']['role']);
}


function university_role_form_submit($form, &$form_state) {
  addrole($form_state['values']['uid'], 0, 0, $form_state['values']['role']);
}


function addrole($uid, $department_id, $college_id, $role) {
  $result = db_query("SELECT 1 FROM {eduerp_roles} er WHERE er.uid=%d AND er.department_id=%d AND er.college_id=%d AND er.role='%s'",
    $uid, $department_id, $college_id, $role);
  if (!db_fetch_object($result)) {
    db_query("INSERT INTO {eduerp_roles} SET uid=%d, department_id=%d, college_id=%d, role='%s'",
      $uid, $department_id, $college_id, $role);
    drupal_set_message('Role Assigned');
  }

  if ($role === 'Registry' || $role === 'Registrar' || $role === 'Vice-Chancellor') {
    assign_drupal_role($uid, 'Registry');
  }
  if ($role === 'Bursary' || $role === 'Bursar' || $role === 'Vice-Chancellor') {
    assign_drupal_role($uid, 'Bursary');
  }
  if ($role === 'Student Affairs Officer') {
    assign_drupal_role($uid, 'SA');
  }
  if ($role === 'Academic Staff' || $role === 'Non-Academic Staff') {
    // 'Staff' role allocation is now a manual admin process
    // assign_drupal_role($uid, 'Staff');
  }
}


function assign_drupal_role($uid, $role) {
  $result = db_query("SELECT rid FROM {role} WHERE name='%s'", $role);
  $row = db_fetch_object($result);

  $staff_user = user_load($uid);
  $roles = $staff_user->roles;
  $roles[$row->rid] = $role; // If it is new, it will be added, ($role is not relevent, must be something)

  user_save($staff_user, array('roles' => $roles));
}


function current_roles_list_form_submit($form, &$form_state) {
  $i = 0;
  if (!empty($form_state['values']['roles'])) {
    foreach ($form_state['values']['roles'] as $eduerp_role_id => $checked) {
      if (!$checked) {
        droprole($form_state['values']['uid'], $eduerp_role_id);
        $i++;
      }
    }
  }

  if ($i == 1) drupal_set_message('Role Removed');
  else drupal_set_message("$i Roles Removed");
}


function droprole($uid, $eduerp_role_id) {
  $result = db_query("SELECT role FROM {eduerp_roles} WHERE eduerp_role_id=%d", $eduerp_role_id);
  if ($row = db_fetch_object($result)) {
    db_query("DELETE FROM {eduerp_roles} WHERE eduerp_role_id=%d", $eduerp_role_id);
  }

  if (!staff_has_eduerp_role($uid, 0, 0, array('Registry', 'Registrar', 'Vice-Chancellor'))) {
    drop_drupal_role($uid, 'Registry');
  }
  if (!staff_has_eduerp_role($uid, 0, 0, array('Bursary', 'Bursar', 'Vice-Chancellor'))) {
    drop_drupal_role($uid, 'Bursary');
  }
  if (!staff_has_eduerp_role($uid, 0, 0, array('Student Affairs Officer'))) {
    drop_drupal_role($uid, 'SA');
  }
  if (!staff_has_eduerp_role($uid, 0, 0, array('Academic Staff', 'Non-Academic Staff'))) {
    // 'Staff' role allocation is now a manual admin process
    // drop_drupal_role($uid, 'Staff');
  }
}


function drop_drupal_role($uid, $role) {
  $result = db_query("SELECT rid FROM {role} WHERE name='%s'", $role);
  $row = db_fetch_object($result);

  $staff_user = user_load($uid);
  $roles = $staff_user->roles;
  unset($roles[$row->rid]);

  user_save($staff_user, array('roles' => $roles));
}


function move_department_form_submit($form, &$form_state) {
  $user_profile = new UserProfile($form_state['values']['uid']);
  $user_profile->profile_department_id = $form_state['values']['department'];
  $user_profile->save();

  drupal_set_message("Department Moved");
}


function search_staff_list() {
  ob_start();

//  echo  drupal_get_form('staff_search_form');

  staff_search_list();

  return ob_get_clean();
}


function staff_course_list() {
  ob_start();
  $query = "SELECT courses.*, CONCAT(pro.field_profile_last_name_value, ', ', pro.field_profile_first_name_value, ' ', IFNULL(pro.field_profile_middle_name_value, '')) AS staff_name
    FROM
      (SELECT
        c.field_coursetitle_value AS course_title,
        ci.field_lecturer_uid AS uid
      FROM {content_type_course} c, {content_type_course_instance} ci
      WHERE
        c.field_department_nid_nid=%d AND c.nid=ci.field_course_id_nid
      ) AS courses
    LEFT JOIN {node} npro ON courses.uid=npro.uid AND npro.type='profile'
    LEFT JOIN {content_type_profile} pro ON npro.vid=pro.vid";
  $result = db_query($query, arg(2));
?>
    <table border='1' align='center'  cellpadding="5" cellspacing="5">
    <tr bgcolor='#ACCFCC'><td><b>Lecturer</b></td><td><b>Course</b></td></tr>
<?php
  while ($f=db_fetch_object($result)) {
?>
      <tr>
      <td><a href="view/<?php echo $f->uid?>"><? echo $f->staff_name; ?></a></td>
      <td><? echo $f->course_title; ?></td>
      </tr>
<?php
  }
?>
    </table>
<?php
  return ob_get_clean();
}


function staff_department_list() {
  ob_start();
  $r = db_query("SELECT
      d.nid AS department_id,
      d.field_department_name_value AS department_name,
      er.uid AS hod_uid,
      CONCAT(pro.field_profile_last_name_value, ', ', pro.field_profile_first_name_value, ' ', IFNULL(pro.field_profile_middle_name_value, '')) AS hod_name
    FROM {content_type_department} d
    LEFT JOIN {eduerp_roles} er ON d.nid=er.department_id AND er.role='Head of Department'
    LEFT JOIN {node} npro ON er.uid=npro.uid AND npro.type='profile'
    LEFT JOIN {content_type_profile} pro ON npro.vid=pro.vid
    ORDER BY department_name");
?>
    <table border='1' align='center'  cellpadding="5" cellspacing="5">
    <tr bgcolor='#ACCFCC'><td><b>Department</b></td><td><b>HOD</b></td><td><b>Action</b></td></tr>
<?php
  while ($f = db_fetch_object($r)) {
?>
      <tr>
      <td><? echo $f->department_name; ?></td>
      <td><a href="view/<?php echo $f->hod_uid?>"><? echo $f->hod_name; ?></a></td>
      <td><a href="viewlecturer/<? echo $f->department_id; ?>">View Courses/Lecturers</a></td>
      </tr>
<?php
  }
?>
    </table>
<?php
  return ob_get_clean();
}


function staff_search_list() {
  /*
  $search_keys = array('gender', 'department_id', 'staff_type_id', 'grade_level_id', 'state');
  $search_values = array(
    'gender' => '',
    'department_id',
    'staff_type_id',
    'grade_level_id',
    'state');
  $data = array_filter($_POST);
  $condition = array();
  foreach ($search_keys as $value) {
    if (isset($data['$value'])) {
      $condition[] = "s .". $value ."='". $data[$value] ."'";
    }
  }
  if (implode(' and ', $condition) != '') {
    $condition = " where ". implode(' and ', $condition);
  }
  else {*/
    $condition  = '';
  /*}*/
  $query = "SELECT ur.uid,
      CONCAT(pro.field_profile_last_name_value, ', ', pro.field_profile_first_name_value, ' ', IFNULL(pro.field_profile_middle_name_value, '')) AS name,
      GROUP_CONCAT(CONCAT(er.role, IFNULL(CONCAT('(', d.field_department_name_value, ')'), ''), IFNULL(CONCAT('(', c.field_college_name_value, ')'), '')) ORDER BY er.role SEPARATOR ', ') AS role_name
    FROM {users_roles} ur
    INNER JOIN {role} r ON ur.rid=r.rid AND name='Staff'
    LEFT JOIN {node} npro ON ur.uid=npro.uid AND npro.type='profile'
    LEFT JOIN {content_type_profile} pro ON npro.vid=pro.vid
    LEFT JOIN {eduerp_roles} er ON ur.uid=er.uid
    LEFT JOIN {content_type_department} d ON er.department_id=d.nid
    LEFT JOIN {content_type_college} c ON er.college_id=c.nid
    $condition
    GROUP BY ur.uid ORDER BY name";
  $result = db_query($query);
?>
    <table border='1' align='center'>
    <tr bgcolor='#ACCFCC'><td colspan='4'><b>Staff List</b></td></tr>
    <tr><td><b>Name</b></td><td><b>Roles</b></td><td><b>View</b></td><td><b>Action</b></td></tr>
<?php
  while ($f = db_fetch_object($result)) {
?>
      <tr>
      <td><?php echo $f->name ?></td>
      <td><? echo $f->role_name; ?></td>
      <td><a href="view/<? echo $f->uid; ?>">View</a></td>
      <td><a href="<?php echo url('staff/assignrole/'. $f->uid)?>">Assign Roles</a></td>
      </tr>
<?php
  }
?>
    </table>
<?php
  describeroles();
}


function describeroles() {
  echo "<br />
<b>Description of roles</b><br />
Note any combination of roles can be assigned to the one staff member.<br />
<br />
<b>Department roles...</b><br />
<br />
Note these roles can be given to a staff member for more than one department and it is not necessarily for their \"own\" department.<br />
<br />
<b><i>'Department Examination Viewer'</i></b> allows a staff member to see grades for all courses in the specified department (and all grades for students in that department who have taken courses in other departments).<br />
They will also be able to see GPA and cGPA for all students in the specified department.<br />
<br />

<b><i>'Department Examination Officer'</i></b> has the same rights as <b><i>'Department Examination Viewer'</i></b>.<br />
Additionally will have the same rights as a course lecturer to edit and submit any grades for all courses in the specified department.<br />
They will be notified when a lecturer submits grades for a course in the specified department.<br />
They can also approve grades for all courses in the specified department.<br />
They can also unlock grades to allow a lecturer (or themselves) re-edit and re-submit changes.<br />
They can create or modify courses for the specified department.<br />
They can create or modify programmes for the specified department.<br />
<br />

<b><i>'Head of Department'</i></b> has the same rights as <b><i>'Department Examination Viewer'</i></b>.<br />
Additionally they will be notified when a lecturer submits grades for a course in the specified department.<br />
They can also approve grades for all courses in the specified department.<br />
They can also unlock grades to allow a lecturer re-edit and re-submit changes.<br />
They can create or modify courses for the specified department.<br />
They can create or modify programmes for the specified department.<br />
<br />

<b>Faculty roles...</b><br />
<br />
Note these roles can be given to a staff member for more than one faculty and it is not necessarily for their \"own\" faculty.<br />
<br />

<b><i>'Faculty Examination Viewer'</i></b> allows a staff member to see grades for all courses in the specified faculty (and all grades for students in that faculty who have taken courses in other faculties).<br />
They will also be able to see GPA and cGPA for all students in the specified faculty.<br />
<br />

<b><i>'Faculty Examination Officer'</i></b> has the same rights as <b><i>'Faculty Examination Viewer'</i></b>.<br />
Additionally will have the same rights as a course lecturer to edit and submit any grades for all courses in the specified faculty.<br />
They will be notified when a lecturer submits grades for a course in the specified faculty.<br />
They can also approve grades for all courses in the specified faculty.<br />
They can also unlock grades to allow a lecturer (or themselves) re-edit and re-submit changes.<br />
They will be notified when grades are approved for a course in the specified faculty.<br />
They can also second level approve grades for all courses in the specified faculty.<br />
<br />

<b><i>'Dean of Faculty'</i></b> has the same rights as <b><i>'Faculty Examination Viewer'</i></b>.<br />
Additionally they will be notified when grades are approved for a course in the specified faculty.<br />
They can also second level approve grades for all courses in the specified faculty.<br />
<br />

<b>University roles...</b><br />
<br />
<b><i>'University Examination Viewer'</i></b> allows a staff member to see grades for all courses.<br />
They will also be able to see GPA and cGPA for all students.<br />
<br />

<b><i>'University Examination Officer'</i></b> has the same rights as <b><i>'University Examination Viewer'</i></b>.<br />
Additionally will have the same rights as a course lecturer to edit and submit any grades for all courses.<br />
They will be notified when a lecturer submits grades for a course.<br />
They can also approve grades for all courses.<br />
They can also unlock grades to allow a lecturer (or themselves) re-edit and re-submit changes.<br />
They will be notified when grades are approved for a course.<br />
They can also second level approve grades for all courses.<br />
They can also approve grades for all departments in place of the <b><i>'Registrar'</i></b> (if the <b><i>'Registrar'</i></b> does approve grades in this university).<br />
They can also finally approve grades for all departments in place of the Vice-Chancellor.<br />
They can edit a students's exam results even after then have been finally approved by the <b><i>'Vice-Chancellor'</i></b>. The student's GPA and cGPA will be appropriately adjusted without any further approval or notification. A record will be kept that a change has been made (as happens also for all approvals).<br />
<br />

<b><i>'Registrar'</i></b> has the same rights as <b><i>'University Examination Viewer'</i></b>.<br />
Additionally they can approve grades for all departments (if the Registrar is part of the approval chain in this university).<br />
They can perform any actions on the Semester/Programmes Admin Screen.<br />
They also can do all the same things as <b><i>'Registry'</i></b>.<br />
<br />

<b><i>'Registry'</i></b><br />
They can perform manual additions of course registrations for a particular student including the 3rd Semester.<br />
They can mark a particular course registration for a specific student as dropped (so the student is not required to take the exam).<br />
They can change a student's programme.<br />
They can view all fully approved grading.<br />
They can see all student profiles.<br />
They can perform clearances of student applications to the university.<br />
They can see all staff profile data (except pay).<br />
<br />

<b><i>'Bursary'</i></b><br />
They can see all staff profile data (except pay).<br />
They can see all student payments.<br />
<br />

<b><i>'Bursar'</i></b> has the same rights as <b><i>'Bursary'</i></b>.<br />
They can see all staff profile data (including pay).<br />
<br />

<b><i>'Vice-Chancellor'</i></b> has the same rights as <b><i>'University Examination Viewer'</i></b>.<br />
Additionally they can finally approve grades for all departments.<br />
They also can do all the same things as <b><i>'Registry'</i></b>.<br />
They also can do all the same things as <b><i>'Bursary'</i></b>.<br />
<br />

<b><i>'Student Affairs Officer'</i></b> can see student profile data.<br />
<br />

<b><i>'Non-Academic Staff'</i></b> all staff should be given either <b><i>'Academic Staff'</i></b> or <b><i>'Non-Academic Staff'</i></b> but <b><i>'Non-Academic Staff'</i></b> does not actually provide anything. (Any registered Staff Drupal user does however have some basic access to the system).<br />
<br />

<b><i>'Academic Staff'</i></b> can view all fully approved grading.<br />
They can be a lecturer in a course.<br />
<br />

<b><i>'Role Assigner'</i></b> can assign any of the above roles to any Staff Drupal user.";
}


function staff_view_form(&$obj) {
  $query = "SELECT
      CONCAT(pro.field_profile_last_name_value, ', ', pro.field_profile_first_name_value, ' ', IFNULL(pro.field_profile_middle_name_value, '')) AS staff_name,
      GROUP_CONCAT(er.role SEPARATOR ', ') AS role_name,
      d.field_department_name_value,
      stpro.field_profile_staff_no_value AS staff_no,
      stpro.field_profile_room_value AS room_number,
      DATE_FORMAT(stpro.field_profile_appointment_date_value, '%%D %%b %%Y') AS appointment_date
    FROM {eduerp_roles} er
    INNER JOIN {node} npro ON er.uid=npro.uid AND npro.type='profile'
    INNER JOIN {content_type_profile} pro ON npro.vid=pro.vid
    INNER JOIN {node} nstpro ON er.uid=nstpro.uid AND nstpro.type='staff_profile'
    INNER JOIN {content_type_staff_profile} stpro ON nstpro.vid=stpro.vid
    LEFT  JOIN {content_type_department} d ON pro.field_profile_department_id_nid=d.nid
    WHERE er.uid=%d GROUP BY er.uid";
  $result = db_query($query, arg(2));
  $data = db_fetch_object($result);

  $form['staff_name'] = array(
    '#type' => 'item',
    '#title' => 'Staff Name',
    '#value' => $data->staff_name);
  $form['staff_number'] = array(
  '#title' => 'Staff Number',
    '#type' => 'item',
    '#size' => 20,
    '#value' => $data->staff_no);
  $form['staff_department'] = array(
    '#type' => 'item',
    '#title' => 'Department',
    '#value' => $data->field_department_name_value);
  $form['staff_room'] = array(
    '#title' => 'Room',
    '#type' => 'item',
    '#size' => 20,
    '#value' => $data->room_number);
  $form['appointment_date'] = array(
    '#type' => 'item',
    '#title' => 'Appointment date',
    '#value' => $data->appointment_date);
  $form['staff_role'] = array(
    '#value' => '<b>Roles:</b><br />' . $data->role_name);
  return $form;
}


function staff_level() {
  $titles['']="";
  $r=db_query("select * from `level` order by level_name");
    while ($f=db_fetch_object($r))
      $titles[$f->level_name] = $f->level_name;
  return  $titles;
}


function staff_course() {
  $titles[''] = '';
  $r = db_query("SELECT nid, field_code_value AS value FROM {content_type_course} ORDER BY field_level_value, field_semester_value, field_code_value ");
  //$r = db_query("SELECT nid, CONCAT(field_coursetitle_value, ' (', field_code_value , ')') AS value FROM {content_type_course} ORDER BY field_level_value, field_semester_value, field_code_value ");
  while ($f = db_fetch_object($r))
    $titles[$f->nid] = $f->value;
  return  $titles;
}


function department($department_nid=0) {

    $titles = array();
    if($department_nid !=0)
      $r = db_query("SELECT nid, field_department_name_value AS value FROM {content_type_department} WHERE nid=%d ORDER BY field_department_name_value", $department_nid);
    else
      $r = db_query("SELECT nid, field_department_name_value AS value FROM {content_type_department} ORDER BY field_department_name_value");
    while ($f = db_fetch_object($r))
      $titles[$f->nid] = $f->value;

  return  $titles;
}


function get_programmes($programme_nid = 0, $forSelectList = false) {
    $where = ""; $args = "";

    if ($programme_nid != 0) {
      $where = " WHERE p.nid=$programme_nid ";
      //$args = "";
      //$args = $programme_nid;
    }
    $r = db_query("SELECT p.nid programme_nid, field_college_name_value faculty_name, d.nid department_nid, field_department_name_value AS department_name,
          field_programme_name_value programme_name, c.nid faculty_nid,
          field_duration_value duration, field_program_type_value programme_type, field_max_duration_value max_duration,
          field_min_credit_load_program_value min_credit_load, field_programme_abbr_value programme_abbr
          FROM {content_type_program} p
          INNER JOIN {content_type_department} d ON d.nid = p.field_department_id_nid
          INNER JOIN {content_type_college} c ON c.nid = d.field_college_id_nid
          ". $where ."
          ORDER BY faculty_name, department_name, programme_name ");

 if ($forSelectList) {
   if (db_affected_rows($r) > 0) {
     while ($row = db_fetch_object($r))
       $programmes[$row->programme_nid] = $row->programme_name;
   }
   else
    $programmes[] = strip_tags(Error_Types(106));

  return $programmes;
 }
 else
   return $r;
}


function programme($programme_nid=0) {


    if($programme_nid !=0)
      $r = db_query("SELECT nid, CONCAT(field_programme_name_value, ' (', field_programme_abbr_value, ')') AS value FROM { content_type_program} WHERE nid=%d ORDER BY field_programme_name_value", $programme_nid);
    else
      $r = db_query("SELECT nid, CONCAT(field_programme_name_value, ' (', field_programme_abbr_value, ')') AS value FROM { content_type_program} ORDER BY field_programme_name_value");


    if (db_affected_rows($r) > 0) {
      while ($f = db_fetch_object($r))
        $programmes[$f->nid] = $f->value;
    }
    else
      $programmes[] = strip_tags(Error_Types(106));

  return  $programmes;
}


function course($department_nid, $semester = 0) {

  $course = array();
  if ($semester != 0) {
    $r = db_query("SELECT nid, field_code_value AS value FROM {content_type_course} WHERE field_department_nid_nid=%d AND field_semester_value=%d ORDER BY field_level_value, field_code_value", $department_nid, $semester);
    while ($f = db_fetch_object($r)) {
      $course[$f->nid] = $f->value;
    }

    // Add any other department courses at the bottom of the list
    $r = db_query("SELECT nid, field_code_value AS value FROM {content_type_course} WHERE field_department_nid_nid=%d AND field_semester_value!=%d ORDER BY field_level_value, field_code_value", $department_nid, $semester);
    while ($f = db_fetch_object($r)) {
      $course[$f->nid] = $f->value;
    }

    if (empty($course)) $course[] = strip_tags(Error_Types(106));

    return  $course;
  }
  else
    $r = db_query("SELECT nid, field_code_value AS value FROM {content_type_course} WHERE field_department_nid_nid=%d ORDER BY field_level_value, field_code_value", $department_nid);
  if (db_affected_rows($r) > 0) {
    while ($f = db_fetch_object($r))
      $course[$f->nid] = $f->value;
  }
  else
    $course[] = strip_tags(Error_Types(106));

  return  $course;
}


function view_student_form(&$obj) {
  if (!$obj['storage']['step'])
    $obj['storage']['step']=1;
  $st=$obj['storage']['step'];
  if ($st == 1 or $st == 3)
    return view_student_form1($obj);
  else if ($st == 2)
    return view_student_form2(FALSE);
}
function search_staff_form(&$obj) {
  if (!$obj['storage']['step'])
    $obj['storage']['step']=1;
  $st=$obj['storage']['step'];
  if ($st == 1 or $st == 3)
    return search_staff_form1($obj);
  else if ($st == 2)
    return search_staff_form2($obj);
}


function load_image() {
  global $result;
  $qry9 = "select a . pic_id, b . filepath from `admitted_student` as a join files as b on a . pic_id=b . fid where a . student_id='". $_SESSION['staff']['stud_info'] ."'";
  $res9=db_query($qry9);
  if ($res9 && ($result9=db_fetch_object($res9))) {
    //print_R($result9);
    $pic_path=$result9->filepath;
    /*$host=$_SERVER['HTTP_HOST'];
    $repalce=$_SERVER['DOCUMENT_ROOT'];
    $file_path='http://';
    $file_path .=str_replace($repalce, $host, $pic_path);
    $file_path=strip_tags($file_path);*/
    $file_path = file_create_url($pic_path);
    //$path='<img src="'.$file_path.'" />';
  }
  else {
    //$path='No Images Available';
    // TODO: Fix this situation
  }
  return $file_path;
}


function load_signature() {
  //global $result;
  $qry10 = "select a . signature_pic_id, b . filepath from `admitted_student` as a join files as b on a . signature_pic_id=b . fid where a . student_id='". $_SESSION['staff']['stud_info'] ."'";
  $res10=db_query($qry10);
  if ($res10 && ($result10=db_fetch_object($res10))) {
    //print_R($result10);
   //echo $_SESSION['staff']['stud_info'];
    $pic_path=$result10->filepath;
/*    $host=$_SERVER['HTTP_HOST'];
    $repalce=$_SERVER['DOCUMENT_ROOT'];
    $file_path='http://';
    $file_path .=str_replace($repalce, $host, $pic_path);
    $file_path = strip_tags($file_path);*/
    $file_path = file_create_url($pic_path);
    //$path='<img src="'.$file_path.'" />';
  }
  else {
    //$path='No Images Available';
  }
  return $file_path;
}


function view_student_form1(&$obj) {
  if (isset($_SESSION['staff']['mat'])) {
    unset($_SESSION['staff']['mat']);
  }
  if (isset($_SESSION['staff']['jamb'])) {
    unset($_SESSION['staff']['jamb']);
  }
  $form['#title'] = t('Search Student');
  $form['matno'] = array(
    '#title' => 'Matriculation No .',
    '#type' => 'textfield',
    '#default_value' => $_POST['matno'],
    '#size' => 20);
  $form['lbl_or'] = array(
    '#type' => 'fieldset',
    '#title' => 'Or');
  $form['lbl_or']['jambno'] = array(
    '#title' => 'JAMB No .',
    '#default_value' => $_POST['jambno'],
    '#type' => 'textfield',
    '#size' => 20);
  $form['submit'] = array(
    '#value' => 'Next',
    '#type' => 'submit',
    '#id' => 'edit-next');
  return $form;
}
function view_student_form_submit($form, &$state) {
  if ($state['clicked_button']['#id'] == 'edit-previous') {
    $state['storage']['step']--;
    return;
  }
  elseif ($state['clicked_button']['#id'] == 'edit-next') {
    $state['storage']['values'][$state['storage']['step']]=$state['values'];
    // Prevent the counter from going beyond 2
    $state['storage']['step'] = (++$state['storage']['step'] > 2) ? 1 : $state['storage']['step'];
    $state['#rebuild']=TRUE;
  }
  else
    return;
}
function view_student_form_validate($form, &$state) {
  if ($state['storage']['step'] == 1) {
    $values=$form['lbl_or']['#post'];
    $jambno=$values['jambno'];
    if ($form['#post']['matno'] != '' && $jambno!='') {
      drupal_set_message('Please enter either Matriculation no or JAMB no.');
    }
    else {
      if ($jambno != '' && $form['#post']['matno']=='') {
        $qry = "select * from {admitted_student} where jambno='%s'";
        $res = db_query($qry, $jambno);
        if ($res && ($result = db_fetch_object($res))) {
          $_SESSION['staff']['mat']=$result->matriculation_no;
          $_SESSION['staff']['jamb']=$jambno;
        }
        else {
          form_set_error('jambno', "Jamb number not valid.");
        }
      }
      else {
        $qry = "select * from {admitted_student} where matriculation_no='%s'";
        $res = db_query($qry, $form['#post']['matno']);
        if ($res && ($result = db_fetch_object($res))) {
          $_SESSION['staff']['mat']=$result->matriculation_no;
        }
        else {
          form_set_error('matno', "Matriculation number not valid.");
        }
      }
    }
  }
}


function view_student_form2($clearanceform) {
  global $user;

  if ($clearanceform) $clearancesql = 'AND (verify_status != 1 OR clearance_status != 1)';
  else $clearancesql = '';

  if (isset($_SESSION['staff']['jamb'])) {
    $qry = "select * from {admitted_student} where jambno='%s' $clearancesql";
    $res = db_query($qry, $_SESSION['staff']['jamb']);
  }
  else {
    $qry = "select * from {admitted_student} where matriculation_no='%s' $clearancesql";
    $res = db_query($qry, $_SESSION['staff']['mat']);
  }

  if ($res && ($result = db_fetch_object($res))) {
    $_SESSION['staff']['stud_info'] = $result->student_id;

    $qry2 = "SELECT a.ext_exam_rec_id, a.exam_body, a.exam_date, a.exam_center_name, a.exam_number, b.exam_body_name FROM {admitted_ext_exam_record} AS a LEFT OUTER JOIN {ext_exam_body} AS b ON a.exam_body=b.exam_body_id WHERE a.exam_student_id=%d";
    $res2 = db_query($qry2, $result->student_id);

    $data_key = array();
    while ($result2 = db_fetch_object($res2)) {
      $data[$result2->ext_exam_rec_id] = array(
        'exam_body' => $result2->exam_body,
        'exam_date' => $result2->exam_date,
        'exam_center_name' => $result2->exam_center_name,
        'exam_number' => $result2->exam_number,
      );
      $query3 = "SELECT * FROM {admitted_ext_exam_detail} WHERE ext_exam_record_id=%d";
      $r=db_query($query3, $result2->ext_exam_rec_id);
      while ($f=db_fetch_object($r)) {
        $data[$result2->ext_exam_rec_id]['subjects'][] = array('subject' => $f->subject_id, 'grade' => $f->grade_id);
        if (!in_array($result2->ext_exam_rec_id, $data_key)) {
          $data_key[] = $result2->ext_exam_rec_id;
        }
      }
    }

    $qry4 = "SELECT
        p.nid AS programme_id,
        p.field_programme_name_value AS programme_name,
        d.nid AS department_id,
        d.field_department_name_value AS department_name,
        c.field_college_abbreviation_value AS college_abbreviation,
        c.field_college_name_value AS college_name
      FROM {content_type_program} p, {content_type_department} d, {content_type_college} c
      WHERE p.nid=%d AND p.field_department_id_nid=d.nid AND d.field_college_id_nid=c.nid";
    $res4 = db_query($qry4, $result->first_choice);
    $result4 = db_fetch_object($res4);
    $qry6 = "select * from {admitted_next_of_kin} where student_id='". $result->student_id ."'";
    $res6 = db_query($qry6);
    $result6 = db_fetch_object($res6);
    $qry7 = "select * from {admitted_sponsor} where student_id='". $result->student_id ."'";
    $res7 = db_query($qry7);
    $result7 = db_fetch_object($res7);

    // From Student Affairs display (moved here with UI)...
    $qry8 = "SELECT ah.name as `name`, at.name as `type` FROM {accomodation_hostels} ah, {accomodation_types} at, {admitted_student_accomodation} asa WHERE asa.student_id=%d AND ah.id=asa.hostel_id AND at.id=ah.accomodation_type_id";
    $res8 = db_query($qry8, $result->student_id);
    $result8 = db_fetch_object($res8);
  }
  $form['extra'] = array(
    '#type' => 'fieldset',
    '#title' => 'Admission Information',
    '#collapsed' => TRUE,
    '#collapsible' => TRUE);
  $form['extra']['college0'] = array(
    '#type' => 'item',
    '#title' => 'College',
    '#prefix' => '<table><tr><td>',
    '#suffix' => '</td>');
  $form['extra']['college1'] = array(
    '#type' => 'item',
    '#value' => $result4->college_abbreviation,
    '#size' => 20,
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['extra']['dept0'] = array(
    '#type' => 'item',
    '#title' => 'Department',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['extra']['dept1'] = array(
    '#type' => 'item',
    '#value' => $result4->department_name,
    '#size' => 20,
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['extra']['programme0'] = array(
    '#type' => 'item',
    '#title' => 'Programme',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['extra']['programme1'] = array(
    '#type' => 'item',
    '#value' => $result4->programme_name,
    '#size' => 20,
    '#prefix' => '<td>',
    '#suffix' => '</td></tr>');
  $form['extra']['study_mode0'] = array(
    '#type' => 'item',
    '#title' => 'Mode of Study',
    '#prefix' => '<tr><td>',
    '#suffix' => '</td>');
  $form['extra']['study_mode1'] = array(
    '#type' => 'item',
    '#value' => $result->mode_of_study,
    '#size' => 20,
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['extra']['space14'] = array(
    '#type' => 'item',
    '#prefix' => '<td>&nbsp;',
    '#suffix' => '</td>');
  $form['extra']['entry_mode0'] = array(
    '#type' => 'item',
    '#title' => 'Mode of Entry',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['extra']['entry_mode1'] = array(
    '#type' => 'item',
    '#size' => 20,
    '#value' => $result->mode_of_entry,
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['extra']['sess0'] = array(
    '#type' => 'item',
    '#title' => 'SESSION',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['extra']['sess1'] = array(
    '#type' => 'item',
    '#value' => variable_get('eduerp_current_session', ''),
    '#prefix' => '<td>',
    '#suffix' => '</td></tr></table>',
    '#size' => 15);
  $form['personal'] = array(
    '#type' => 'fieldset',
    '#title' => 'Personal Information',
    '#collapsed' => TRUE,
    '#collapsible' => TRUE);
  $form['personal']['img_lbl0'] = array(
    '#type' => 'item',
    '#title' => 'Student Image',
    '#prefix' => '<table><tr><td>',
    '#suffix' => '</td>');
  $form['personal']['img_lbl1'] = array(
    '#value' => '<img src="'. load_image() .'" width="200" />',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['space11'] = array(
    '#type' => 'item',
    '#prefix' => '<td>&nbsp;',
    '#suffix' => '</td>');
  $form['personal']['img_sig0'] = array(
    '#type' => 'item',
    '#title' => 'Student Signature',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['img_sig1'] = array(
    '#value' => '<img src="'. load_signature() .'" width="300" />',
    '#prefix' => '<td>',
    '#suffix' => '</td></tr>');
  $form['personal']['matno0'] = array(
    '#type' => 'item',
    '#title' => 'Matriculation No.',
    '#prefix' => '<tr><td>',
    '#suffix' => '</td>');
  $form['personal']['matno1'] = array(
    '#type' => 'item',
    '#size' => 20,
    '#value' => $result->matriculation_no,
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['space0'] = array(
    '#type' => 'item',
    '#prefix' => '<td>&nbsp;',
    '#suffix' => '</td>');
  $form['personal']['jambno0'] = array(
    '#type' => 'item',
    '#title' => 'JAMB No.',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['jambno1'] = array(
    '#type' => 'item',
    '#size' => 20,
    '#value' => $result->jambno,
    '#prefix' => '<td>',
    '#suffix' => '</td></tr>');
  $form['personal']['fname0'] = array(
    '#type' => 'item',
    '#title' => 'First Name',
    '#prefix' => '<tr><td>',
    '#suffix' => '</td>');
  $form['personal']['fname1'] = array(
    '#type' => 'item',
    '#size' => 20,
    '#value' => $result->first_name,
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['mname0'] = array(
    '#type' => 'item',
    '#title' => 'Middle Name',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['mname1'] = array(
    '#type' => 'item',
    '#size' => 20,
    '#value' => $result->middle_name,
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['space2'] = array(
    '#type' => 'item',
    '#prefix' => '<td>&nbsp;',
    '#suffix' => '</td>');
  $form['personal']['lname0'] = array(
    '#type' => 'item',
    '#title' => 'Last Name',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['lname1'] = array(
    '#type' => 'item',
    '#size' => 20,
    '#value' => $result->last_name,
    '#prefix' => '<td>',
    '#suffix' => '</td></tr>');
  $form['personal']['dob0'] = array(
    '#type' => 'item',
    '#title' => 'Date of Birth',
    '#prefix' => '<tr><td>',
    '#suffix' => '</td>');
  $form['personal']['dob1'] = array(
    '#type' => 'item',
    '#value' => $result->dob,
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['space7'] = array(
    '#type' => 'item',
    '#prefix' => '<td>&nbsp;',
    '#suffix' => '</td>');
  $form['personal']['hobbies0'] = array(
    '#type' => 'item',
    '#title' => 'Hobbies',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['hobbies1'] = array(
    '#type' => 'item',
    '#value' => $result->hobbies,
    '#prefix' => '<td colspan="4">',
    '#suffix' => '</td></tr>');
  $form['personal']['gender0'] = array(
    '#type' => 'item',
    '#title' => 'Gender',
    '#prefix' => '<tr><td>',
    '#suffix' => '</td>');
  $form['personal']['gender1'] = array(
    '#type' => 'item',
    '#size' => 20,
    '#value' => $result->gender,
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['space3'] = array(
    '#type' => 'item',
    '#prefix' => '<td>&nbsp;',
    '#suffix' => '</td>');
  $form['personal']['origin0'] = array(
    '#type' => 'item',
    '#title' => 'State Of Origin',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['origin1'] = array(
    '#type' => 'select',
    '#options' => eduerp_states(),
    '#default_value' => $result->state_origin,
    '#prefix' => '<td>',
    '#suffix' => '</td></tr>',
    '#attributes' => array('disabled' => 'disabled'));
  $form['personal']['lga0'] = array(
    '#type' => 'item',
    '#title' => 'LGA Of Origin',
    '#prefix' => '<tr><td>',
    '#suffix' => '</td>');
  $form['personal']['lga1'] = array(
    '#type' => 'select',
    '#options' => eduerp_lga(),
    '#default_value' => $result->lkup_lga_origin,
    '#prefix' => '<td>',
    '#suffix' => '</td>',
    '#attributes' => array('disabled' => 'disabled'));
  $form['personal']['space4'] = array(
    '#type' => 'item',
    '#prefix' => '<td>&nbsp;',
    '#suffix' => '</td>');
  $form['personal']['mstatus0'] = array(
    '#type' => 'item',
    '#title' => 'Marital Status',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['mstatus1'] = array(
    '#type' => 'item',
    '#value' => $result->marital_status,
    '#size' => 20,
    '#prefix' => '<td>',
    '#suffix' => '</td></tr>');
  $form['personal']['address0'] = array(
    '#type' => 'item',
    '#title' => 'Permanent Address',
    '#prefix' => '<tr><td>',
    '#suffix' => '</td>');
  $form['personal']['address1'] = array(
    '#type' => 'item',
    '#size' => 20,
    '#value' => $result->permanent_address1,
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['space5'] = array(
    '#type' => 'item',
    '#prefix' => '<td>&nbsp;',
    '#suffix' => '</td>');
  $form['personal']['city0'] = array(
    '#type' => 'item',
    '#title' => 'City',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['city1'] = array(
    '#type' => 'item',
    '#value' => $result->permanent_address_city,
    '#size' => 20,
    '#prefix' => '<td>',
    '#suffix' => '</td></tr>');
  $form['personal']['state0'] = array(
    '#type' => 'item',
    '#title' => 'State',
    '#prefix' => '<tr><td>',
    '#suffix' => '</td>');
  $form['personal']['state1'] = array(
    '#type' => 'select',
    '#options' => eduerp_states(),
    '#default_value' => $result->permanent_address_state,
    '#prefix' => '<td>',
    '#suffix' => '</td>',
    '#attributes' => array('disabled' => 'disabled'));
  $form['personal']['space6'] = array(
    '#type' => 'item',
    '#prefix' => '<td>&nbsp;',
    '#suffix' => '</td>');
  $form['personal']['mobile0'] = array(
    '#type' => 'item',
    '#title' => 'Mobile No.',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['mobile1'] = array(
    '#type' => 'item',
    '#value' => $result->mobile_number,
    '#size' => 20,
    '#prefix' => '<td>',
    '#suffix' => '</td></tr>');
  $form['personal']['email0'] = array(
    '#type' => 'item',
    '#title' => 'E-mail address',
    '#prefix' => '<tr><td>',
    '#suffix' => '</td>');
  $form['personal']['email1'] = array(
    '#type' => 'item',
    '#value' => $result->email_address,
    '#size' => 20,
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['space15'] = array(
    '#type' => 'item',
    '#prefix' => '<td>&nbsp;',
    '#suffix' => '</td>');
  $form['personal']['health0'] = array(
    '#type' => 'item',
    '#title' => 'Health Status',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['health1'] = array(
    '#type' => 'item',
    '#value' => $result->physical_health_status,
    '#size' => 20,
    '#prefix' => '<td>',
    '#suffix' => '</td></tr></table>');
  $form['nextofkin'] = array(
    '#type' => 'fieldset',
    '#title' => 'Sponsor/Next of Kin Information',
    '#collapsed' => TRUE,
    '#collapsible' => TRUE);
  $form['nextofkin']['nofkin0'] = array(
    '#type' => 'item',
    '#title' => 'Next of Kin Name',
    '#prefix' => '<table cellspacing="10" cellpadding="10"><tr><td>',
    '#suffix' => '</td>');
  $form['nextofkin']['nofkin1'] = array(
    '#type' => 'item',
    '#value' => $result6->name,
    '#size' => 20,
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['nextofkin']['relation0'] = array(
    '#type' => 'item',
    '#title' => 'Relationship',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['nextofkin']['relation1'] = array(
    '#type' => 'item',
    '#value' => $result6->relationship,
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['nextofkin']['mobile0'] = array(
    '#type' => 'item',
    '#title' => 'Mobile',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['nextofkin']['mobile1'] = array(
    '#type' => 'item',
    '#value' => $result6->mobile,
    '#prefix' => '<td>',
    '#suffix' => '</td></tr>');
  $form['nextofkin']['sponsor0'] = array(
    '#type' => 'item',
    '#title' => 'Sponsor',
    '#prefix' => '<tr><td>',
    '#suffix' => '</td>');
  $form['nextofkin']['sponsor1'] = array(
    '#type' => 'item',
    '#size' => 20,
    '#value' => $result7->name,
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  if ($result7->mobile != $result6->mobile) {
    $form['nextofkin']['smobile0'] = array(
      '#type' => 'item',
      '#title' => 'Mobile',
      '#prefix' => '<td>',
      '#suffix' => '</td>');
    $form['nextofkin']['smobile1'] = array(
      '#type' => 'item',
      '#size' => 20,
      '#value' => $result7->mobile,
      '#prefix' => '<td>',
      '#suffix' => '</td></tr></table>');
  }
  else {
    $form['nextofkin']['smobile0'] = array(
      '#type' => 'item',
      '#title' => 'Mobile',
      '#prefix' => '<td>',
      '#suffix' => '</td></tr></table>');
  }
  $form['fs'] = array(
    '#type' => 'fieldset',
    '#title' => 'O-Level Results 1st Sitting',
    '#collapsed' => TRUE,
    '#collapsible' => TRUE);
  $form['fs']['qualification0'] = array(
    '#type' => 'item',
    '#title' => 'QUALIFICATION',
    '#prefix' => '<table><tr><td>',
    '#suffix' => '</td>');
  $form['fs']['qualification1'] = array(
    '#type' => 'item',
    '#value' => $result->h_qualification1,
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['fs']['space22'] = array(
    '#type' => 'item',
    '#prefix' => '<td>&nbsp;',
    '#suffix' => '</td>');
  $form['fs']['institution0'] = array(
    '#type' => 'item',
    '#title' => 'INSTITUTION',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['fs']['institution1'] = array(
    '#type' => 'item',
    '#value' => $result->h_institution1,
    '#prefix' => '<td>',
    '#suffix' => '</td></tr>');
  $form['fs']['ebd0'] = array(
    '#type' => 'item',
    '#title' => 'EXAM BODY',
    '#prefix' => '<tr><td>',
    '#suffix' => '</td>');
  $form['fs']['ebd1'] = array(
    '#type' => 'select',
    '#options' => _student_bod(),
    '#default_value' => $data[$data_key[0]]['exam_body'],
    '#prefix' => '<td>',
    '#suffix' => '</td>',
    '#attributes' => array('disabled' => 'disabled'));
  $form['fs']['space8'] = array(
    '#type' => 'item',
    '#prefix' => '<td>&nbsp;',
    '#suffix' => '</td>');
  $form['fs']['edate0'] = array(
    '#type' => 'item',
    '#title' => 'EXAM DATE',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['fs']['edate1'] = array(
    '#type' => 'date',
    '#default_value' => array(
      'day' => (int)substr($data[$data_key[0]]['exam_date'], -2),
      'month' => (int)substr($data[$data_key[0]]['exam_date'], 5, 2),
      'year' => substr($data[$data_key[0]]['exam_date'], 0, 4)),
    '#prefix' => '<td>',
    '#element_validate' => array('validate_always_true'),
    '#suffix' => '</td></tr>',
    '#attributes' => array('disabled' => 'disabled'));
  $form['fs']['ec0'] = array(
    '#type' => 'item',
    '#title' => 'EXAM CENTER',
    '#prefix' => '<tr><td>',
    '#suffix' => '</td>');
  $form['fs']['ec1'] = array(
    '#type' => 'item',
    '#size' => '20',
    '#value' => $data[$data_key[0]]['exam_center_name'],
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['fs']['space9'] = array(
    '#type' => 'item',
    '#prefix' => '<td>&nbsp;',
    '#suffix' => '</td>');
  $form['fs']['eno0'] = array(
    '#type' => 'item',
    '#title' => 'EXAM NO',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['fs']['eno1'] = array(
    '#type' => 'item',
    '#size' => '20',
    '#value' => $data[$data_key[0]]['exam_number'],
    '#prefix' => '<td>',
    '#suffix' => '</td></tr></table>');
  $form['fs']['ms1'] = array(
    '#type' => 'item',
    '#value' => 'SUBJECTS',
    '#prefix' => '<table><tr><td></td><th>',
    '#suffix' => '</th>');
  $form['fs']['ms2'] = array(
    '#type' => 'item',
    '#value' => 'GRADE',
    '#prefix' => '<td>',
    '#suffix' => '</td></tr>',
    '#attributes' => array('disabled' => 'disabled'));
  $temp=0;
  for ($i=1;$i<=9;$i++) {
    $temp = $i-1;
    $form['fs']["m1$i"] = array(
      '#value' => '<tr><td>'. $i,
      '#suffix' => '</td>');
    $form['fs']["s1$i"] = array(
      '#type' => 'select',
      '#options' => _student_sub(),
      '#prefix' => '<td>',
      '#suffix' => '</td>',
      '#default_value' => $data[$data_key[0]]['subjects'][$temp]['subject'],
      '#attributes' => array('disabled' => 'disabled'));
    if ($i == 9)
      $tend="</table>";
    $form['fs']["g1$i"] = array(
      '#type' => 'select',
      '#options' => _student_gr(),
      '#prefix' => '<td>',
      '#suffix' => '</td></tr>'. $tend,
      '#default_value' => $data[$data_key[0]]['subjects'][$temp]['grade'],
      '#attributes' => array('disabled' => 'disabled'));
    $temp = 0;
  }
  $form['fs2'] = array(
    '#id' => 'setting_sec',
    '#type' => 'fieldset',
    '#title' => 'O-Level Results 2nd Sitting',
    '#collapsed' => TRUE,
    '#collapsible' => TRUE);
  $form['fs2']['qualification10'] = array(
    '#type' => 'item',
    '#title' => 'QUALIFICATION',
    '#prefix' => '<table><tr><td>',
    '#suffix' => '</td>');
  $form['fs2']['qualification11'] = array(
    '#type' => 'item',
    '#value' => $result->h_qualification2,
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['fs2']['space25'] = array(
    '#type' => 'item',
    '#prefix' => '<td>&nbsp;',
    '#suffix' => '</td>');
  $form['fs2']['institution10'] = array(
    '#type' => 'item',
    '#title' => 'INSTITUTION',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['fs2']['institution11'] = array(
    '#type' => 'item',
    '#value' => $result->h_institution2,
    '#prefix' => '<td>',
    '#suffix' => '</td></tr>');
  $form['fs2']['ebd20'] = array(
    '#type' => 'item',
    '#title' => 'EXAM BODY',
    '#prefix' => '<tr><td>',
    '#suffix' => '</td>');
  $form['fs2']['ebd21'] = array(
    '#type' => 'select',
    '#options' => _student_bod(),
    '#default_value' => $data[$data_key[1]]['exam_body'],
    '#prefix' => '<td>',
    '#suffix' => '</td>',
    '#attributes' => array('disabled' => 'disabled'));
  $form['fs2']['space10'] = array(
    '#type' => 'item',
    '#prefix' => '<td>&nbsp;',
    '#suffix' => '</td>');
  $form['fs2']['edate20'] = array(
    '#type' => 'item',
    '#title' => 'EXAM DATE',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['fs2']['edate21'] = array(
    '#type' => 'date',
    '#default_value' => array(
      'day' => (int)substr($data[$data_key[1]]['exam_date'], -2),
      'month' => (int)substr($data[$data_key[1]]['exam_date'], 5, 2),
      'year' => substr($data[$data_key[1]]['exam_date'], 0, 4)),
    '#prefix' => '<td>',
    '#element_validate' => array('validate_always_true'),
    '#suffix' => '</td></tr>',
    '#attributes' => array('disabled' => 'disabled'));
  $form['fs2']['ec20'] = array(
    '#type' => 'item',
    '#title' => 'EXAM CENTER',
    '#prefix' => '<tr><td>',
    '#suffix' => '</td>');
  $form['fs2']['ec21'] = array(
    '#type' => 'item',
    '#size' => 20,
    '#value' => $data[$data_key[1]]['exam_center_name'],
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['fs2']['space11'] = array(
    '#type' => 'item',
    '#prefix' => '<td>&nbsp;',
    '#suffix' => '</td>');
  $form['fs2']['eno20'] = array(
    '#type' => 'item',
    '#title' => 'EXAM NO',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['fs2']['eno21'] = array(
    '#type' => 'item',
    '#size' => '20',
    '#value' => $data[$data_key[1]]['exam_number'],
    '#prefix' => '<td>',
    '#suffix' => '</td></tr></table>');
  $form['fs2']['ms11']=array(
    '#type' => 'item',
    '#value' => 'SUBJECTS',
    '#prefix' => '<table><tr><td></td><th>',
    '#suffix' => '</th>');
  $form['fs2']['ms12'] = array(
    '#type' => 'item',
    '#value' => 'GRADE',
    '#prefix' => '<td>',
    '#suffix' => '</td></tr>');
  $tend='';
  for ($i=1;$i<=9;$i++) {
    $temp = $i-1;
    $form['fs2']["m2$i"] = array(
      '#value' => '<tr><td>'. $i,
      '#suffix' => '</td>');
    $form['fs2']["s2$i"] = array(
      '#type' => 'select',
      '#options' => _student_sub(),
      '#prefix' => '<td>',
      '#suffix' => '</td>',
      '#default_value' => $data[$data_key[1]]['subjects'][$temp]['subject'],
      '#attributes' => array('disabled' => 'disabled'));
    if ($i == 9)
      $tend="</table>";
    $form['fs2']["g2$i"] = array(
      '#type' => 'select',
      '#options' => _student_gr(),
      '#prefix' => '<td>',
      '#suffix' => '</td></tr>'. $tend,
      '#default_value' => $data[$data_key[1]]['subjects'][$temp]['grade'],
      '#attributes' => array('disabled' => 'disabled'));
    $temp = 0;
  }

  $form['accomodation'] = array(
    '#type' => 'fieldset',
    '#title' => 'Accomodation Information',
    '#collapsed' => TRUE,
    '#collapsible' => TRUE);
  $form['accomodation']['hostelname0'] = array(
    '#type' => 'item',
    '#title' => 'Hostel Name',
    '#prefix' => '<table><tr><td>',
    '#suffix' => '</td>');
  $form['accomodation']['hostelname1'] = array(
    '#type' => 'item',
    '#size' => 20,
    '#value' => $result8->name,
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['accomodation']['hosteltype0'] = array(
    '#type' => 'item',
    '#title' => 'Hostel Type',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['accomodation']['hosteltype1'] = array(
    '#type' => 'item',
    '#size' => 20,
    '#value' => $result8->type,
    '#prefix' => '<td>',
    '#suffix' => '</td></tr></table>');

  if (!eduerp_has_role($user, 'Registry')) {
    $form['verify'] = array(
      '#type' => 'fieldset',
      '#title' => 'Verified Results',
      '#collapsed' => TRUE,
      '#collapsible' => TRUE);
    $form['verify']['result'] = array(
      '#type' => 'radios',
      '#title' => 'Is Verified',
      '#attributes' => array('disabled' => 'disabled'),
      '#default_value' => $result->verify_status ? 'yes' : 'no',
      '#options' => array('yes' => 'Yes', 'no' => 'No'));
    if ($clearanceform) {
      $form['verify']['result'] = array(
        '#type' => 'radios',
        '#title' => 'Is Verified',
        '#options' => array('yes' => 'Yes', 'no' => 'No'));
    }
    $form['clear'] = array(
      '#type' => 'fieldset',
      '#title' => 'Clear Student',
      '#collapsed' => TRUE,
      '#collapsible' => TRUE);
    $form['clear']['cleared'] = array(
      '#type' => 'radios',
      '#title' => 'Is Cleared',
      '#attributes' => array('disabled' => 'disabled'),
      '#default_value' => $result->clearance_status ? 'yes' : 'no',
      '#options' => array('yes' => 'Yes', 'no' => 'No'));
    if ($clearanceform) {
      $form['clear']['cleared'] = array(
        '#type' => 'radios',
        '#title' => 'Is Cleared',
        '#options' => array('yes' => 'Yes', 'no' => 'No'));
      $form['clear']['reject'] = array(
        '#type' => 'textarea',
        '#title' => 'Reason for Rejection',
        '#prefix' => '<div id="reason">',
        '#suffix' => '</div>');
    }
  }
  if (eduerp_has_role($user, 'Registry')) {
      $form['approve'] = array(
        '#type' => 'fieldset',
        '#title' => 'Approve Student',
        '#collapsed' => TRUE,
        '#collapsible' => TRUE);
      $form['approve']['accept'] = array(
        '#type' => 'radios',
        '#options' => array('yes' => 'Accept', 'no' => 'Reject'));
  }

  $form['submit'] = array(
    '#id' => 'edit-next',
    '#value' => 'Continue',
    '#type' => 'submit');
  if ($clearanceform) {
    $form['submit'] = array(
      '#id' => 'edit-next',
      '#value' => 'Submit',
      '#type' => 'submit');
  }

  $form['#multistep'] = TRUE;
  $form['#redirect'] = FALSE;
  return $form;
}


function validate_always_true($element, &$form_state){
  // Defined to provide a means of suppressing certain validation errors
}


function _get_staff_list() {
  $q = "SELECT er.uid, CONCAT(pro.field_profile_last_name_value, ', ', pro.field_profile_first_name_value, ' ', IFNULL(pro.field_profile_middle_name_value, '')) AS name
    FROM {eduerp_roles} er
    INNER JOIN {node} npro ON er.uid=npro.uid AND npro.type='profile'
    INNER JOIN {content_type_profile} pro ON npro.vid=pro.vid
    GROUP BY er.uid ORDER BY name";
  $rs = db_query($q);
  $staff_list = array(0 => "Select One");

  while ($row = db_fetch_object($rs)) {
    $staff_list[$row->uid] = $row->name;
  }

  return $staff_list;
}


function _get_staff_list_number() {
  $q = "SELECT er.uid, CONCAT(stpro.field_profile_staff_no_value, ': ', pro.field_profile_last_name_value, ', ', pro.field_profile_first_name_value, ' ', IFNULL(pro.field_profile_middle_name_value, '')) AS name
    FROM {eduerp_roles} er
    INNER JOIN {node} npro ON er.uid=npro.uid AND npro.type='profile'
    INNER JOIN {content_type_profile} pro ON npro.vid=pro.vid
    INNER JOIN {node} nstpro ON er.uid=nstpro.uid AND nstpro.type='staff_profile'
    INNER JOIN {content_type_staff_profile} stpro ON nstpro.vid=stpro.vid
    GROUP BY er.uid ORDER BY name";
  $rs = db_query($q);
  $staff_list = array(0 => "Select One");

  while ($row = db_fetch_object($rs)) {
    $staff_list[$row->uid] = $row->name;
  }

  return $staff_list;
}


function search_staff_form1(&$obj) {
  if (isset($_SESSION['staff']['staff_no'])) {
    unset($_SESSION['staff']['staff_no']);
  }
  $form['#title'] = t('Search Staff');
  $form['staff_no'] = array(
    '#title' => 'Staff No.',
    '#type' => 'select',
    '#options' => _get_staff_list_number());
  $form['lbl_or'] = array(
    '#type' => 'fieldset',
    '#title' => 'Or');
  $form['lbl_or']['user_id'] = array(
    '#title' => 'Staff Name',
    '#type' => 'select',
    '#options' => _get_staff_list());
  $form['submit'] = array(
    '#value' => 'Next',
    '#type' => 'submit',
    '#id' => 'edit-next');
  return $form;
}


function search_staff_form_submit($form, &$state) {
  if ($state['clicked_button']['#id'] == 'edit-previous') {
    $state['storage']['step']--;
    return;
  }
  elseif ($state['clicked_button']['#id'] == 'edit-next') {
    $state['storage']['values'][$state['storage']['step']]=$state['values'];
    $state['storage']['step'] = (++$state['storage']['step'] > 2) ? 1 : $state['storage']['step'];
    $state['#rebuild']=TRUE;
  }
  else
    return;
}


function search_staff_form_validate($form, &$state) {
  if ($state['storage']['step'] == 1) {
    $values = $form['lbl_or']['#post'];
    $staff_no = $values['staff_no'];
    if ($staff_no != '' && !$form['#post']['user_id']) {
      if ($staff_no > 0) {
        $_SESSION['staff']['user_id'] = $staff_no;
      }
      else {
        form_set_error('staff_no', "Staff Number is not valid.");
      }
    }
    else {
      if ($form['#post']['user_id'] > 0) {
        $_SESSION['staff']['user_id'] = $form['#post']['user_id'];
      }
      else {
        form_set_error('user_id', "Please select a Staff Name from the list or enter the Staff Number.");
      }
    }
  }
}


function search_staff_form2(&$obj) {
  $user_profile = new UserProfile($_SESSION['staff']['user_id']);
  $staff_user = user_load($_SESSION['staff']['user_id']);

  $form['extra'] = array(
    '#type' => 'fieldset',
    '#title' => 'Staff Information',
    '#collapsed' => TRUE,
    '#collapsible' => TRUE);
  $form['extra']['staff_no0'] = array(
    '#type' => 'item',
    '#title' => 'Staff No.',
    '#prefix' => '<table><tr><td>',
    '#suffix' => '</td>');
  $form['extra']['staff_no1'] = array(
    '#type' => 'item',
    '#value' => $user_profile->profile_staff_no,
    '#size' => 20,
    '#prefix' => '<td colspan="5">',
    '#suffix' => '</td></tr>');
  $form['extra']['type0'] = array(
    '#type' => 'item',
    '#title' => 'Staff Type',
    '#prefix' => '<tr><td>',
    '#suffix' => '</td>');
  $form['extra']['type1'] = array(
    '#type' => 'item',
    '#value' => $user_profile->profile_staff_type,
    '#size' => 20,
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['extra']['posn0'] = array(
    '#type' => 'item',
    '#title' => 'Staff Position',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['extra']['posn1'] = array(
    '#type' => 'item',
    '#value' => '',
    '#size' => 20,
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['extra']['grade0'] = array(
    '#type' => 'item',
    '#title' => 'Grade Level',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['extra']['grade1'] = array(
    '#type' => 'item',
    '#value' => '',
    '#size' => 20,
    '#prefix' => '<td>',
    '#suffix' => '</td></tr>');
  $form['extra']['salary0'] = array(
    '#type' => 'item',
    '#title' => 'Staff Salary',
    '#prefix' => '<tr><td>',
    '#suffix' => '</td>');
  $form['extra']['salary1'] = array(
    '#type' => 'item',
    '#value' => '',
    '#size' => 20,
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['extra']['employ_type0'] = array(
    '#type' => 'item',
    '#title' => 'Employment Type',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['extra']['employ_type1'] = array(
    '#type' => 'item',
    '#size' => 20,
    '#value' => $user_profile->profile_employment_type,
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['extra']['appt_date0'] = array(
    '#type' => 'item',
    '#title' => 'Appointment Date',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['extra']['appt_date1'] = array(
    '#type' => 'item',
    '#value' => date('jS F Y', strtotime($user_profile->profile_appointment_date)),
    '#prefix' => '<td>',
    '#suffix' => '</td></tr></table>',
    '#size' => 15);
  $form['personal'] = array(
    '#type' => 'fieldset',
    '#title' => 'Personal Information',
    '#collapsed' => TRUE,
    '#collapsible' => TRUE);
  $form['personal']['fname0'] = array(
    '#type' => 'item',
    '#title' => 'First Name',
    '#prefix' => '<table><tr><td>',
    '#suffix' => '</td>');
  $form['personal']['fname1'] = array(
    '#type' => 'item',
    '#size' => 20,
    '#value' => $user_profile->profile_first_name,
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['mname0'] = array(
    '#type' => 'item',
    '#title' => 'Middle Name',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['mname1'] = array(
    '#type' => 'item',
    '#size' => 20,
    '#value' => $user_profile->profile_middle_name,
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['lname0'] = array(
    '#type' => 'item',
    '#title' => 'Last Name',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['lname1'] = array(
    '#type' => 'item',
    '#size' => 20,
    '#value' => $user_profile->profile_last_name,
    '#prefix' => '<td>',
    '#suffix' => '</td></tr>');
  $form['personal']['dob0'] = array(
    '#type' => 'item',
    '#title' => 'Date of Birth',
    '#prefix' => '<tr><td>',
    '#suffix' => '</td>');
  $form['personal']['dob1'] = array(
    '#type' => 'item',
    '#value' => date('jS F Y', strtotime($user_profile->profile_dob)),
    '#prefix' => '<td colspan="5">',
    '#suffix' => '</td></tr>');
  $form['personal']['gender0'] = array(
    '#type' => 'item',
    '#title' => 'Gender',
    '#prefix' => '<tr><td>',
    '#suffix' => '</td>');
  $form['personal']['gender1'] = array(
    '#type' => 'item',
    '#size' => 20,
    '#value' => $user_profile->profile_gender,
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['origin0'] = array(
    '#type' => 'item',
    '#title' => 'State Of Origin',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['origin1'] = array(
    '#type' => 'item',
    '#value' => $user_profile->profile_state_name_origin,
    '#prefix' => '<td>',
    '#suffix' => '</td>',
    '#attributes' => array('disabled' => 'disabled'));
  $form['personal']['lga0'] = array(
    '#type' => 'item',
    '#title' => 'LGA Of Origin',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['lga1'] = array(
    '#type' => 'item',
    '#value' => $user_profile->profile_lga_name,
    '#prefix' => '<td>',
    '#suffix' => '</td></tr>');
  $form['personal']['mstatus0'] = array(
    '#type' => 'item',
    '#title' => 'Marital Status',
    '#prefix' => '<tr><td>',
    '#suffix' => '</td>');
  $form['personal']['mstatus1'] = array(
    '#type' => 'item',
    '#value' => $user_profile->profile_marital_status,
    '#size' => 20,
    '#prefix' => '<td colspan="5">',
    '#suffix' => '</td></tr>');
  $form['personal']['address0'] = array(
    '#type' => 'item',
    '#title' => 'Permanent Address',
    '#prefix' => '<tr><td>',
    '#suffix' => '</td>');
  $form['personal']['address1'] = array(
    '#type' => 'item',
    '#size' => 20,
    '#value' => $user_profile->profile_permanent_address,
    '#prefix' => '<td colspan="5">',
    '#suffix' => '</td></tr>');
  $form['personal']['city0'] = array(
    '#type' => 'item',
    '#title' => 'City',
    '#prefix' => '<tr><td>',
    '#suffix' => '</td>');
  $form['personal']['city1'] = array(
    '#type' => 'item',
    '#value' => $user_profile->profile_permanent_city,
    '#size' => 20,
    '#prefix' => '<td colspan="5">',
    '#suffix' => '</td></tr>');
  $form['personal']['t_address0'] = array(
    '#type' => 'item',
    '#title' => 'Temporary Address',
    '#prefix' => '<tr><td>',
    '#suffix' => '</td>');
  $form['personal']['t_address1'] = array(
    '#type' => 'item',
    '#size' => 20,
    '#value' => $user_profile->profile_temporary_address,
    '#prefix' => '<td colspan="5">',
    '#suffix' => '</td></tr>');
  $form['personal']['t_city0'] = array(
    '#type' => 'item',
    '#title' => 'City',
    '#prefix' => '<tr><td>',
    '#suffix' => '</td>');
  $form['personal']['t_city1'] = array(
    '#type' => 'item',
    '#value' => $user_profile->profile_temporary_city . ', ' . $user_profile->profile_temporary_state,
    '#size' => 20,
    '#prefix' => '<td colspan="5">',
    '#suffix' => '</td></tr>');
  $form['personal']['tel0'] = array(
    '#type' => 'item',
    '#title' => 'Tel. No.',
    '#prefix' => '<tr><td>',
    '#suffix' => '</td>');
  $form['personal']['tel1'] = array(
    '#type' => 'item',
    '#value' => '',
    '#size' => 20,
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['mobile0'] = array(
    '#type' => 'item',
    '#title' => 'GSM No.',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['mobile1'] = array(
    '#type' => 'item',
    '#value' => $user_profile->profile_mobile_number,
    '#size' => 20,
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['mobile20'] = array(
    '#type' => 'item',
    '#title' => 'GSM No.(2)',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['mobile21'] = array(
    '#type' => 'item',
    '#value' => '',
    '#size' => 20,
    '#prefix' => '<td>',
    '#suffix' => '</td></tr>');
  $form['personal']['email0'] = array(
    '#type' => 'item',
    '#title' => 'E-mail address',
    '#prefix' => '<tr><td>',
    '#suffix' => '</td>');
  $form['personal']['email1'] = array(
    '#type' => 'item',
    '#value' => $staff_user->mail,
    '#size' => 20,
    '#prefix' => '<td colspan="6">',
    '#suffix' => '</td></tr></table>');
  $form['nextofkin'] = array(
    '#type' => 'fieldset',
    '#title' => 'Next of Kin Information',
    '#collapsed' => TRUE,
    '#collapsible' => TRUE);
  // TODO: From here
  $form['nextofkin']['kin_name0'] = array(
    '#type' => 'item',
    '#title' => 'Name',
    '#prefix' => '<table><tr><td>',
    '#suffix' => '</td>');
  $form['nextofkin']['kin_name1'] = array(
    '#type' => 'item',
    '#value' => '',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['nextofkin']['kin_relation0'] = array(
    '#type' => 'item',
    '#title' => 'Relationship',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['nextofkin']['kin_relation1'] = array(
    '#type' => 'item',
    '#value' => '',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['nextofkin']['kin_address0'] = array(
    '#type' => 'item',
    '#title' => 'Address',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['nextofkin']['kin_address1'] = array(
    '#type' => 'item',
    '#value' => '',
    '#prefix' => '<td>',
    '#suffix' => '</td></tr>');
  $form['nextofkin']['kin_city0'] =array(
    '#type' => 'item',
    '#title' => 'City',
    '#prefix' => '<tr><td>',
    '#suffix' => '</td>');
  $form['nextofkin']['kin_city1'] =array(
    '#type' => 'item',
    '#value' => '',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['nextofkin']['kin_telephone0'] = array(
    '#type' => 'item',
    '#title' => 'Telephone',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['nextofkin']['kin_telephone1'] = array(
    '#type' => 'item',
    '#value' => '',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['nextofkin']['kin_mobile0'] = array(
    '#type' => 'item',
    '#title' => 'Mobile',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['nextofkin']['kin_mobile1'] = array(
    '#type' => 'item',
    '#value' => '',
    '#prefix' => '<td>',
    '#suffix' => '</td></tr>');
  $form['nextofkin']['kin_email0'] = array(
    '#type' => 'item',
    '#title' => 'Email',
    '#prefix' => '<tr><td>',
    '#suffix' => '</td>');
  $form['nextofkin']['kin_email1'] = array(
    '#type' => 'item',
    '#value' => '',
    '#prefix' => '<td colspan="5">',
    '#suffix' => '</td></tr></table>');

  if (staff_has_eduerp_role($user->uid, 0, 0, array('Bursar'))) {
    $form['payment'] = array(
      '#type' => 'fieldset',
      '#title' => 'Payment Information',
      '#collapsed' => TRUE,
      '#collapsible' => TRUE);
    $form['payment']['tax0'] = array(
      '#type' => 'item',
      '#title' => 'Tax Number',
      '#prefix' => '<table><tr><td>',
      '#suffix' => '</td>');
    $form['payment']['tax1'] = array(
      '#type' => 'item',
      '#value' => '',
      '#size' => 20,
      '#prefix' => '<td>',
      '#suffix' => '</td>');
    $form['payment']['bank0'] = array(
      '#type' => 'item',
      '#title' => 'Bank Name',
      '#prefix' => '<td>',
      '#suffix' => '</td>');
    $form['payment']['bank1'] = array(
      '#type' => 'item',
      '#value' => '',
      '#size' => 20,
      '#prefix' => '<td>',
      '#suffix' => '</td>');
    $form['payment']['acct0'] = array(
      '#type' => 'item',
      '#title' => 'Account Number',
      '#prefix' => '<td>',
      '#suffix' => '</td>');
    $form['payment']['acct1'] = array(
      '#type' => 'item',
      '#value' => '',
      '#prefix' => '<td>',
      '#suffix' => '</td></tr></table>');
  }

  $form['submit'] = array(
    '#id' => 'edit-next',
    '#value' => 'Continue',
    '#type' => 'submit');
  $form['#multistep']=TRUE;
  $form['#redirect']=FALSE;
  return $form;
}


function semester_admin() {
  ob_start();

  echo '<br /><hr /><br />';

  echo drupal_get_form('set_session_form');
  echo '<br /><hr /><br />';

  echo '<a href="' . url('staff/missingcourses') . '">Check for Missing Courses for a Semester (no Lecturer or Timetable Assigned)';
  echo '<br /><br /><hr /><br />';

  echo '<a href="' . url('staff/checkverifyprogmme') . '">Check have all existing Courses required for all Programmes been Verified (associated with the Programme)</a>';
  echo '<br /><br /><hr /><br />';

  echo 'List the Fees for all Programmes by Level & Semester[Feature #444]';
  echo '<br /><br /><hr /><br />';

  echo drupal_get_form('open_close_student_registration_form');
  echo '<br /><hr /><br />';

  echo drupal_get_form('open_close_student_course_registration_form');
  echo '<br /><hr /><br />';

  echo '<a href="' . url('grading/statsuni') . '">Grading Statistics for University</a>';
  echo '<br /><br /><hr /><br />';

  echo '<a href="' . url('staff/studentprogress') . '">Student Progress towards Qualification</a>';
  echo '<br /><br /><hr /><br />';

  echo '<a href="' . url('staff/unregstudents') . '">List of Students who have Not Registered for a Semester</a>';
  echo '<br /><br /><hr /><br />';

  echo '<a href="' . url('staff/department') . '">View Departments and Courses</a>';
  echo '<br /><br /><hr /><br />';

  echo '<a href="' . url('liststaff') . '">List Staff</a>';
  echo '<br /><br /><hr /><br />';

  echo '<a href="' . url('staff/createeditcourse') . '">Create or Modify Courses for a Department</a>';
  echo '<br /><br /><hr /><br />';

  echo '<a href="' . url('staff/createmodifyprog') . '">Create or Modify a University Programme</a>';
  echo '<br /><br /><hr /><br />';

  echo '<a href="' . url('staff/createeditdept') . '">Create or Modify a Department</a>';
  echo '<br /><br /><hr /><br />';

  echo '<a href="' . url('staff/createeditfaculty') . '">Create or Modify a Faculty</a>';
  echo '<br /><br /><hr /><br />';

  echo '<a href="' . url('staff/list') . '">List Staff and Assign Roles</a>';
  echo '<br /><br /><hr /><br />';

  echo '<a href="' . url('staff/manualcoursereg') . '">Manually Register a Student in a Course</a>';
  echo '<br /><br /><hr /><br />';

  echo '<a href="' . url('staff/dropcoursereg') . '">Mark a Student as Not being Required to take an Exam for a course they have enrolled in</a>';
  echo '<br /><br /><hr /><br />';

  echo '<a href="' . url('staff/changeprogmme') . '">Change a Student to a Different Programme</a>';
  echo '<br /><br /><hr /><br />';

  return ob_get_clean();
}


function set_session_form($form_state) {
  global $user;

  $form['top'] = array('#value' => 'The current Session is: ' . variable_get('eduerp_current_session', '') . ' and current Semester is: ' . variable_get('eduerp_current_semester', ''));

  if (staff_has_eduerp_role($user->uid, 0, 0, array('Registrar'))) {
    $current_year = intval(date('Y'));
    $sessions = array();
    $sessions[sprintf("%s/%s", $current_year - 1, $current_year)] = sprintf("%s/%s", $current_year - 1, $current_year);
    $sessions[sprintf("%s/%s", $current_year, $current_year + 1)] = sprintf("%s/%s", $current_year, $current_year + 1);

    $eduerp_current_session = variable_get('eduerp_current_session', sprintf("%s/%s", $current_year - 1, $current_year));

    $form['eduerp_current_session'] = array(
      '#type' => 'select',
      '#options' => $sessions,
      '#title' => 'Current Session',
      '#default_value' => variable_get('eduerp_current_session', sprintf("%s/%s", $current_year - 1, $current_year)),
      '#description' => 'Please specify the current session'
    );

    $form['eduerp_current_semester'] = array(
      '#type' => 'select',
      '#options' => array(1 => '1', 2 => '2'),
      '#title' => 'Current Semester',
      '#default_value' => variable_get('eduerp_current_semester', 1),
      '#description' => 'Please specify the current semester'
    );

    $form['submit'] = array('#type' => 'submit', '#value' => 'Set the Session and Semester');
  }
  return $form;
}


function set_session_form_submit($form, &$form_state) {

  variable_set('eduerp_current_session', $form_state['values']['eduerp_current_session']);
  variable_set('eduerp_current_semester', $form_state['values']['eduerp_current_semester']);

  // Check if the current session is in the session table
  $session_rs = db_query("SELECT sess_name FROM {session} WHERE sess_name = '%s'", $form_state['values']['eduerp_current_session']);
  if (!db_result($session_rs)) {
    db_query("INSERT INTO {session} (sess_name) VALUES ('%s')", $form_state['values']['eduerp_current_session']);
    
    module_invoke_all('createsession', $form_state['values']['eduerp_current_session']);
  }
  
  
}


function open_close_student_registration_form($form_state) {
  global $user;

  // We could add a from element with more options that just on/off
  if (variable_get('eduerp_allow_student_registrations', '1')) {
    $open = 'Open';
    $closeverb = 'Close';
  }
  else {
    $open = 'Closed';
    $closeverb = 'Open';
  }

  $form['top'] = array('#value' => "Student Registrations and Initial Payment are $open for the Session " . variable_get('eduerp_current_session', '') . '<br />');

  if (staff_has_eduerp_role($user->uid, 0, 0, array('Registrar'))) {
    $form['submit'] = array('#type' => 'submit', '#value' => "$closeverb Student Registrations for the Session");
  }
  return $form;
}


function open_close_student_registration_form_submit($form, &$form_state) {

  if (variable_get('eduerp_allow_student_registrations', '1')) {
    variable_set('eduerp_allow_student_registrations', '0');
    variable_set('user_register', 0);
  }
  else {
    variable_set('eduerp_allow_student_registrations', '1');
    variable_set('user_register', 1);
  }
}


function open_close_student_course_registration_form($form_state) {
  global $user;

  $form['top'] = array('#value' => 'Here are the Programmes (& Level) currenly Open for Course Registrations this Semester: ' . listofopenprogrammes());

  if (staff_has_eduerp_role($user->uid, 0, 0, array('Registrar'))) {

    $programmestoopen = selectlistofprogrammestoopen();
    if (!empty($programmestoopen)) {
        $form['programmestoopen'] = array(
          '#type' => 'select',
          '#options' => $programmestoopen,
          '#title' => 'Programme(level) to Open OR Open ALL',
          '#default_value' => 999999,
          '#description' => 'Please specify one Programme Level to Open for Course Registrations or Open ALL'
        );
    }

    $programmestoclose = selectlistofprogrammestoclose();
    if (!empty($programmestoclose)) {
        $form['programmestoclose'] = array(
          '#type' => 'select',
          '#options' => $programmestoclose,
          '#title' => 'Programme(level) to Close OR Close ALL',
          '#default_value' => 999999,
          '#description' => 'Please specify one Programme Level to Close for Course Registrations or Close ALL'
        );
    }

    if (empty($programmestoclose)) $openverb = 'Open';
    elseif (empty($programmestoopen)) $openverb = 'Close';
    else $openverb = 'Open or Close';

    $form['submit'] = array('#type' => 'submit', '#value' => "$openverb Course Registrations for this Semester");
  }
  return $form;
}


function listofopenprogrammes() {
  $semester = variable_get('eduerp_current_semester', 1);

  $names = array();
  $sql = "SELECT CONCAT(p.field_programme_name_value, '(', pls.level, ')') AS name
    FROM {program_level_semester} pls, {content_type_program} p
    WHERE pls.open_for_registrations=1 AND pls.semester='%s' AND pls.programme_id=p.nid ORDER BY name ASC";
  $rows = db_query($sql, $semester);
  while ($row = db_fetch_object($rows)) {
    $names[] = $row->name;
  }
  if (empty($names)) return 'None';
  return implode('; ', $names);
}


function selectlistofprogrammestoopen() {
  $semester = variable_get('eduerp_current_semester', 1);

  $names = array();
  $names[999999] = 'ALL';
  $noprogrammes = TRUE;
  $sql = "SELECT
      CONCAT(pls.programme_id, ',', pls.level, ',', pls.semester) AS id,
      CONCAT(p.field_programme_name_value, '(', pls.level, ')') AS name
    FROM {program_level_semester} pls, {content_type_program} p
    WHERE pls.open_for_registrations=0 AND pls.semester='%s' AND pls.programme_id=p.nid ORDER BY name ASC";
  $rows = db_query($sql, $semester);
  while ($row = db_fetch_object($rows)) {
    $noprogrammes = FALSE;
    $names[$row->id] = $row->name;
  }
  if ($noprogrammes) return FALSE;
  return $names;
}


function selectlistofprogrammestoclose() {
  $semester = variable_get('eduerp_current_semester', 1);

  $names = array();
  $names[999999] = 'ALL';
  $noprogrammes = TRUE;
  $sql = "SELECT
      CONCAT(pls.programme_id, ',', pls.level, ',', pls.semester) AS id,
      CONCAT(p.field_programme_name_value, '(', pls.level, ')') AS name
    FROM {program_level_semester} pls, {content_type_program} p
    WHERE pls.open_for_registrations=1 AND pls.semester='%s' AND pls.programme_id=p.nid ORDER BY name ASC";
  $rows = db_query($sql, $semester);
  while ($row = db_fetch_object($rows)) {
    $noprogrammes = FALSE;
    $names[$row->id] = $row->name;
  }
  if ($noprogrammes) return FALSE;
  return $names;
}


function open_close_student_course_registration_form_submit($form, &$form_state) {
  $semester = variable_get('eduerp_current_semester', 1);

  if     (!empty($form_state['values']['programmestoopen']) && $form_state['values']['programmestoopen'] == 999999) {
    if (variable_get('RegisterAllCoursesatStartofSession', 0)) $semesterselect = '';
    else $semesterselect = "WHERE pls.semester=$semester";

    db_query("UPDATE {program_level_semester} pls SET pls.open_for_registrations=1 $semesterselect");
  }
  elseif (!empty($form_state['values']['programmestoclose']) && $form_state['values']['programmestoclose'] == 999999) {
    if (variable_get('RegisterAllCoursesatStartofSession', 0)) $semesterselect = '';
    else $semesterselect = "WHERE pls.semester=$semester";

    db_query("UPDATE {program_level_semester} pls SET pls.open_for_registrations=0 $semesterselect");
  }
  elseif (!empty($form_state['values']['programmestoopen'])) {
    $prog_lev_sem = explode(',', $form_state['values']['programmestoopen']);

    if (variable_get('RegisterAllCoursesatStartofSession', 0)) $semesterselect = '';
    else $semesterselect = "AND pls.semester={$prog_lev_sem[2]}";

    db_query("UPDATE {program_level_semester} pls SET pls.open_for_registrations=1 WHERE pls.programme_id=%d AND pls.level=%d $semesterselect", $prog_lev_sem[0], $prog_lev_sem[1]);
  }
  elseif (!empty($form_state['values']['programmestoclose'])) {
    $prog_lev_sem = explode(',', $form_state['values']['programmestoclose']);

    if (variable_get('RegisterAllCoursesatStartofSession', 0)) $semesterselect = '';
    else $semesterselect = "AND pls.semester={$prog_lev_sem[2]}";

    db_query("UPDATE {program_level_semester} pls SET pls.open_for_registrations=0 WHERE pls.programme_id=%d AND pls.level=%d $semesterselect", $prog_lev_sem[0], $prog_lev_sem[1]);
  }
}


function get_faculties() {
  $r = db_query("SELECT nid, field_college_name_value AS name, field_college_abbreviation_value AS abbr, field_college_email_subdomain_value AS fac_email_subdomain FROM {content_type_college} ORDER BY field_college_name_value");
  while ($f = db_fetch_object($r)){
    $faculties[$f->nid]['faculty_name'] = $f->name;
    $faculties[$f->nid]['faculty_abbr'] = $f->abbr;
    $faculties[$f->nid]['faculty_nid'] = $f->nid;
    $faculties[$f->nid]['faculty_email_subdomain'] = $f->fac_email_subdomain;
  }
  return $faculties;
}


function get_departments() {
  $r = db_query("SELECT d.nid nid, field_department_name_value AS dept_name, field_college_name_value AS fac_name, field_college_abbreviation_value AS fac_abbr, field_department_code_value AS dept_code
      FROM {content_type_department} d INNER JOIN {content_type_college} c ON d.field_college_id_nid=c.nid
      ORDER BY field_college_name_value, dept_name");

  while ($f = db_fetch_object($r)){
    $faculties[$f->nid]['faculty_name'] = $f->fac_name;
    $faculties[$f->nid]['faculty_abbr'] = $f->fac_abbr;
    $faculties[$f->nid]['dept_nid'] = $f->nid;
    $faculties[$f->nid]['dept_name'] = $f->dept_name;
    $faculties[$f->nid]['dept_code'] = $f->dept_code;
  }
  return $faculties;
}


function get_Available_Courses($department_nid = 0, $course_nid = 0) {
  $where = ""; $arg = 0;
  if ($department_nid != 0) {
    $where = " WHERE k.field_department_nid_nid = %d";
    $arg = $department_nid;
  }
  if ($course_nid != 0) {
    $where = " WHERE k.nid = %d";
    $arg = $course_nid;
  }

  $r = db_query("SELECT k.nid nid, field_level_value AS course_level, field_code_value AS course_code,
      field_coursetitle_value AS course_title, field_creditload_value AS credit_load, field_prerequisite_value AS prerequisite_desc,
      field_prerequisite_codes_value AS prerequisite_codes, field_semester_value AS course_semester, field_course_description_value AS course_description,
      field_department_name_value AS dept_name, field_college_name_value AS fac_name, field_college_abbreviation_value AS fac_abbr
      FROM {content_type_course} k
      INNER JOIN {content_type_department} d ON k.field_department_nid_nid = d.nid
      INNER JOIN {content_type_college} c ON d.field_college_id_nid = c.nid
      ". $where ."
      ORDER BY field_college_name_value, dept_name, course_level, course_code ", $arg);

  return  $r;
}


function staff_display_available_courses($session, $semester, $departmentInfo = array(), $type = 0) {
  //$type; 0=available course, 1=assigned courses, 2=unassigned courses
  $department_nid = 0;$forassigned=false;
  $str = "";
  if (sizeof($departmentInfo)) {
    $key = array_keys($departmentInfo);
    $department_nid = $key[0];
  }
  switch ($type) {
    case '1':
      $courses = get_Assigned_Courses($session, $department_nid); break;//variable_get('eduerp_current_session', '')
    case '2':
      // ALAN 20110109 Does not seem to be used, verify and remove
      $courses = get_UnAssigned_Courses($session, $department_nid); break;
    case '3':
      $courses = get_department_running_courses($session, $department_nid, $semester); break; //variable_get('eduerp_current_semester', '')
    default:
      $courses = get_Available_Courses($department_nid);
  }
  if ($department_nid){
    if ($type == 1){
      $forassigned=true;
      $str  = "<b>Assigned Courses for ". $departmentInfo[$department_nid] ." Department</b> for <b>". $session ."</b> Session<br />";
    }
    elseif ($type == 2)
      $str  = "<b>UnAssigned Courses for ". $departmentInfo[$department_nid] ." Department</b> for <b>". $session ."</b> Session </b><br />";
    elseif ($type == 3)
      $str  = "<b>List of courses that need to be run for ". $departmentInfo[$department_nid] ." Department</b> for <b>". $session ."</b> Session for Semester <b>". $semester ."</b><br />";
    else
      $str  = "<b>Available Courses for ". $departmentInfo[$department_nid] ." Department</b><br />";
  }
  else
    $str  = "<b>Available Courses</b><br />";


  if (db_affected_rows($courses) <= 0) {
    $str .= Error_Types(106);
  }
  else {

  $str .= "<div id='assigned_courses'>";
    $str .= "
    <table border=1>
      <tr>
        <th><b>#</b></th>";
        if ($type == 3)
          $str .="
          <th><b>Chief Lecturer</b></th>";
        if ($type != 0)
          $str .="
        <th><b>Programme Name</b></th>";
        $str .="
        <th><b>Course Level</b></th>
        <th><b>Course Code</b></th>
        <th><b>Course Title</b></th>
        <th><b>Credit load</b></th>
        <th><b>Prerequisite Codes</b></th>
        <th><b>Prerequisite Description</b></th>
        <th><b>Course Description</b></th>
        <th><b>Course Semester</b></th>";
        if ($forassigned)
          $str .="
          <th><b>Time Table</b></th>";
          $str .="
      </tr>";$i = 1; $found = false;

      while($course = db_fetch_object($courses)){
        if ($i%2){$rcolor = "#E5E5E5";} else {$rcolor = "#FFFFFF";}
        //check for course to be highlighted in red
        if ($type !=0 && $course->clean_nid == "") {
          $found = true;
          $rowColor = "color='#FF0000'";

        }
        else
          $rowColor = "color='#000000'";
          $str .= "
             <tr bgcolor = \"$rcolor\" onMouseOver = \"this.bgColor = '#FDD381';\" onMouseOut = \"this.bgColor = '$rcolor';\">
               <td>". $i++ ."</td>";
               if ($type == 3){
                 //get the staff name
                 if ($course->clean_nid != "") {
                   $staffInfo = get_Staff_in_Department(0, $course->lecturer_uid);
                   $course->staff_name = $staffInfo[$course->lecturer_uid];
                 }
                 else
                   $course->staff_name = "<i>Not Assigned yet!</i>";

                   $str .="
                 <td><font $rowColor >". $course->staff_name ."</font></td>";

               }
               if ($type != 0)
               $str .="
               <td><font $rowColor >". $course->programme_name ."</font></td>";

               $str .="
               <td><font $rowColor >". $course->course_level ."</font></td>
               <td><font $rowColor >". $course->course_code ."</font></td>
               <td><font $rowColor >". $course->course_title ."</font></td>
               <td><font $rowColor >". $course->credit_load ."</font></td>
               <td><font $rowColor >". $course->prerequisite_codes ."</font></td>
               <td><font $rowColor >". $course->prerequisite_desc ."</font></td>
               <td><font $rowColor >". $course->course_description ."</font></td>
               <td><font $rowColor >". $course->course_semester ."</font></td>";
               if ($forassigned)
                 $str .="
               <td><font $rowColor >". $course->timetable ."</font></td>";
               $str .="

             </tr>";
      }
      $str .= "
      </table>
      </div>";
  }
  $str .= "<br /><br />";
  if ($found)
    $str .= "<b><font color='#ff0000'>Note: The HODs for the course(s) highlighted in Red above will have to assign a lecturer for the course(s) for this semester<br />
       If you are the HOD for those courses, you will be able to fix the problem yourself.<br />In any case, when the problem is resolved, you MUST come back to this screen to complete verification!</font></b>";

  return $str;

}


function staff_display_available_programmes() {

  $str  = "<b>Available Programme</b><br />";

  $programmes = get_programmes();
  if (db_affected_rows($programmes) <= 0) {
    $str .= Error_Types(106);
  }
  else {

    $str .= "
    <table width = '50%'>
      <tr>
        <td><b>#</b></td>
        <td><b>Faculty Name</b></td>
        <td><b>Department Name</b></td>
        <td><b>Programme Name</b></td>
        <td><b>Programme Abbreviation</b></td>
        <td><b>Duration</b></td>
        <td><b>Max Duration</b></td>
        <td><b>Min. Credit Load</b></td>
        <td><b>Type</b></td>
      </tr>";$i = 1;

      while($programme = db_fetch_object($programmes)){
        if ($i%2){$rcolor = "#E5E5E5";} else {$rcolor = "#FFFFFF";}
          $str .= "
             <tr bgcolor = \"$rcolor\" onMouseOver = \"this.bgColor = '#FDD381';\" onMouseOut = \"this.bgColor = '$rcolor';\">
               <td>". $i++ ."</td>
               <td>". $programme->faculty_name ."</td>
               <td>". $programme->department_name ."</td>
               <td>". $programme->programme_name ."</td>
               <td>". $programme->programme_abbr ."</td>
               <td>". $programme->duration ."</td>
               <td>". $programme->max_duration ."</td>
               <td>". $programme->min_credit_load ."</td>
               <td>". $programme->programme_type ."</td>

             </tr>";
      }
      $str .= "
      </table>";
  }
  return $str;

}


function staff_create_edit_faculty() {
  global $user;
  ob_start();

  if (! staff_has_eduerp_role($user->uid, 0, 0, array('Role Assigner'))) $isAuthorized = false; else $isAuthorized = true;

  echo '<br /><hr /><br />';
  
  if (! $isAuthorized) {
    echo Error_Types(104);

  }
  else {
    //if (isset($_POST['faculty_nid']))
    if (arg(2)){
      echo "<font size = '1px'><a href = '/staff/semester/'>Semester Administration</a>&nbsp; &raquo; &nbsp;<a href = '/staff/createeditfaculty'>Create/Modify Faculty</a>&nbsp; &raquo; &nbsp;Modify Faculty</font><br /><br />";
      echo '<hr /><br />';
      echo "<b>Modify Faculty</b> - Make any required changes to the faculty<br />";
    }
    else{
      echo "<font size = '1px'><a href = '/staff/semester/'>Semester Administration</a>&nbsp; &raquo; &nbsp;Create Faculty</font><br /><br />";
      echo '<hr /><br />';
      echo "<b>Create Faculty</b> - Fill the form below to create a new Faculty<br />";
      
    }

    echo drupal_get_form('staff_create_edit_faculty_form');
  }

  echo '<br /><hr /><br />';
  //$me = me_gen_matno(947);
  //drupal_set_message(print_r($me));
  //drupal_set_message(substr(variable_get('eduerp_current_session', ''), -3, 3)); 
  //$user_profile = new UserProfile(947); 
  //drupal_set_message(print_r($user_profile));//drupal_set_message($user_profile->field_profile_mode_of_entry); //
  //me_gen_createsession('2011/2012');
  if (! arg(2)) {
    if (! $isAuthorized) {
      echo Error_Types(105);
    }
    else {
      //if edit was selected then do not show the rest of the page
      echo "<b>Modify Faculty</b> - Select a Faculty to edit it<br />";
      echo drupal_get_form('staff_update_faculty_form');
    }
    echo '<br /><hr /><br />';

    //display existing faculties here
    echo staff_display_available_faculties();
  }
  return ob_get_clean();
}


function staff_create_edit_dept() {
  global $user;
  ob_start();

  if (! staff_has_eduerp_role($user->uid, 0, 0, array('Role Assigner'))) $isAuthorized = false; else $isAuthorized = true;

  echo '<br /><hr /><br />';

  if (! $isAuthorized) {
    echo Error_Types(104);

  }
  else {
      if (arg(2)){
      	echo "<font size = '1px'><a href = '/staff/semester/'>Semester Administration</a>&nbsp; &raquo; &nbsp;<a href = '/staff/createeditdept'>Create/Modify Department</a>&nbsp; &raquo; &nbsp;Modify Department</font><br /><br />";
        echo '<hr /><br />';
        echo "<b>Modify Department</b> - Make any required changes to the Department<br />";
      }
      else{
      	echo "<font size = '1px'><a href = '/staff/semester/'>Semester Administration</a>&nbsp; &raquo; &nbsp;Create Department</font><br /><br />";
        echo '<hr /><br />';
        echo "<b>Create Department</b> - Fill the form below to create a new Department<br />";
      }

      echo drupal_get_form('staff_create_edit_dept_form');
  }
  echo '<br /><hr /><br />';
  if (! arg(2)) {
    if (! $isAuthorized) {
      echo Error_Types(105);
    }
    else {
      //if edit was selected then do not show the rest of the page
      echo "<b>Modify Department</b> - Select a Department to edit it<br />";
      echo drupal_get_form('staff_update_dept_form');

      echo '<br /><hr /><br />';
    }
    //display existing departments here
    echo staff_display_available_departments();

  }

  return ob_get_clean();
}


function staff_create_edit_faculty_form() {

 //if (isset($_SESSION['eduerp_fac_nid']))$_POST['faculty_nid'] = $_SESSION['eduerp_fac_nid'];

  if (arg(2) && is_valid_faculty(arg(2))) {
    if (empty($_POST['faculty_name'])) {
      $result = db_query('SELECT field_college_name_value AS name, field_college_abbreviation_value AS abbr, field_college_email_subdomain_value AS fac_subdomain FROM {content_type_college} WHERE nid = %d', arg(2));
      $fac_edit_record = db_fetch_object($result);
    }
  }
  $form['#title'] = 'Create New Faculty';
  $form['faculty_name'] = array(
    '#title' => 'Faculty Name',
    '#type' => 'textfield',
    '#size' => 40,
    '#required' => TRUE
  );
  if ($fac_edit_record) $form['faculty_name']['#value'] = $fac_edit_record->name;

  $form['faculty_abbreviation'] = array(
    '#title' => 'Faculty Abbreviation',
    '#type' => 'textfield',
    '#size' => 6,
    '#required' => TRUE
  );
  if ($fac_edit_record) $form['faculty_abbreviation']['#value'] = $fac_edit_record->abbr;
  
  $form['faculty_subdomain'] = array(
    '#title' => 'Faculty E-mail Subdomain e.g. science.xyz.com',
    '#type' => 'textfield',
    '#size' => 50,
    //'#required' => TRUE
  );
  if ($fac_edit_record) $form['faculty_subdomain']['#value'] = $fac_edit_record->fac_subdomain;
  
  /*
  if (isset($_POST['faculty_nid'])) {
    $form['faculty_nid'] = array(
    '#title' => 'Faculty nid',
    '#type' => 'hidden',
    '#value' => $_POST['faculty_nid']
    );

  }
  */
  $form['submit'] = array(
    '#value' => 'Create Faculty',
    '#type' => 'submit'
  );
  if ($fac_edit_record) $form['submit']['#value'] = 'Update Faculty';

  return $form;
}


function staff_update_faculty_form() {
  $form['#title'] = 'Update Faculty';
  $form['faculty_id'] = array(
    '#type' => 'select',
    '#options' => faculty(),
    '#title' => 'Faculty Name');
  $form['submit'] = array(
    '#value' => 'Modify Faculty',
    '#type' => 'submit'
  );
  return $form;
}


function staff_update_dept_form() {
  $form['#title'] = 'Update Department';
  $form['department_nid'] = array(
    '#type' => 'select',
    '#options' => department(),
    '#title' => 'Department Name');
  $form['submit'] = array(
    '#value' => 'Modify Department',
    '#type' => 'submit'
  );
  return $form;
}


function staff_create_edit_faculty_form_validate($form, &$form_state) {
  //unset($_SESSION['eduerp_fac_nid']);
  if (arg(2) && is_valid_faculty(arg(2))) {//validate EDIT
    if (is_Faculty_Name_Existing($form_state['values']['faculty_name'], arg(2)))
      form_set_error('faculty_name', Error_Types(101));

    if (is_Faculty_Abbreviation_Existing($form_state['values']['faculty_abbreviation'], arg(2)))
      form_set_error('faculty_abbreviation', Error_Types(102));
  }
  else {//validate CREATE
    if (is_Faculty_Name_Existing($form_state['values']['faculty_name']))
      form_set_error('faculty_name', Error_Types(101));

    if (is_Faculty_Abbreviation_Existing($form_state['values']['faculty_abbreviation']))
      form_set_error('faculty_abbreviation', Error_Types(102));
  }

}


function staff_create_edit_faculty_form_submit($form, &$form_state) {

  //if (isset($form_state['values']['faculty_nid']) && ! preg_match("/^[0-9]{1,12}$/", $form_state['values']['faculty_nid'])) {//the user is trying to edit a given faculty
  if(arg(2) && is_valid_faculty(arg(2))){
    $node = node_load(arg(2));
    $node->title                                  = $form_state['values']['faculty_name'];
    $node->field_college_name[0]['value']         = $form_state['values']['faculty_name'];
    $node->field_college_abbreviation[0]['value'] = $form_state['values']['faculty_abbreviation'];
    $node->field_college_email_subdomain[0]['value'] = $form_state['values']['faculty_subdomain'];
    
    drupal_set_message($form_state['values']['faculty_name'] . ' Faculty was updated!<br />');
    
  }
  else {
    $node = new stdClass();
    $node->type                                   = 'college';
    $node->uid                                    = 1;  // Admin
    $node->status                                 = 1;  // Published
    $node->promote                                = 0;
    $node->sticky                                 = 0;
    $node->comment                                = 0;
    $node->title                                  = $form_state['values']['faculty_name'];
    $node->field_college_name[0]['value']         = $form_state['values']['faculty_name'];
    $node->field_college_abbreviation[0]['value'] = $form_state['values']['faculty_abbreviation'];
    $node->field_college_email_subdomain[0]['value'] = $form_state['values']['faculty_subdomain'];

    drupal_set_message($form_state['values']['faculty_name'] . ' Faculty has been created!<br />');
  }

  node_save($node);
  
  module_invoke_all('updFacultyInfo', $node->nid, variable_get('eduerp_current_session', ''), $form_state['values']['faculty_subdomain']);
  //unset($_SESSION['eduerp_fac_nid']);
  drupal_goto("staff/createeditfaculty");
  

}
 

function staff_create_edit_dept_form_validate($form, &$form_state) {

  //if (isset($_POST['department_nid'])) {//validate EDIT
  if (arg(2)) {//validate EDIT
    if (is_Department_Name_Existing($form_state['values']['department_name'], arg(2)))
      form_set_error('department_name', Error_Types(103));

  }
  else {//validate CREATE
    if(is_Department_Name_Existing($form_state['values']['department_name']))
      form_set_error('department_name', Error_Types(103));
  }

}


function staff_create_edit_dept_form_submit($form, &$form_state) {

  //if (isset($form_state['values']['department_nid']) && ! preg_match("/^[0-9]{1,12}$/", $form_state['values']['department_nid'])) {//the user is trying to edit a given department. OK!
  if (arg(2) && is_valid_department(arg(2))) {//the user is trying to edit a given department. OK!
    $node = node_load(arg(2));
    $node->title                                = $form_state['values']['department_name'];
    $node->field_department_name[0]['value']    = $form_state['values']['department_name'];
    $node->field_college_id[0]['nid']           = $form_state['values']['faculty_nid'];//
    $node->field_department_code[0]['value']    = $form_state['values']['department_code'];
    
    drupal_set_message($form_state['values']['department_name'] . ' Department was updated!<br />');
    unset($_SESSION['eduerp_dept_nid']);
  }
  else {
    $node = new stdClass();
    $node->type                              = 'department';
    $node->uid                               = 1;  // Admin
    $node->status                            = 1;  // Published
    $node->promote                           = 0;
    $node->sticky                            = 0;
    $node->comment                           = 0;
    $node->title                             = $form_state['values']['department_name'];
    $node->field_department_name[0]['value'] = $form_state['values']['department_name'];
    $node->field_college_id[0]['nid']        = $form_state['values']['faculty_nid'];
    $node->field_department_code[0]['value'] = $form_state['values']['department_code'];

    //$department = $node->nid;

    drupal_set_message($form_state['values']['department_name'] . ' Department has been created!<br />');
  }

  node_save($node);
  drupal_goto("staff/createeditdept");

}


function staff_create_edit_dept_form() {

  //if (isset($_SESSION['eduerp_dept_nid']))$_POST['department_nid'] = $_SESSION['eduerp_dept_nid'];
  if (arg(2) && is_valid_department(arg(2))) {
    if (empty($_POST['department_name'])) {
      $result = db_query('SELECT field_college_id_nid AS college_nid, field_department_name_value AS dept_name, field_department_code_value AS dept_code FROM {content_type_department} WHERE nid = %d', arg(2));
      $dept_edit_record = db_fetch_object($result);
    }
  }


  $form['#title'] = 'Create New Department';
  $form['faculty_nid'] = array(
    '#type' => 'select',
    '#title' => 'Faculty Name');
  if ($dept_edit_record){
    $form['faculty_nid']['#default_value'] = $dept_edit_record->college_nid;
    $form['faculty_nid']['#options'] = faculty($dept_edit_record->college_nid);
  }
  else
    $form['faculty_nid']['#options'] = faculty();

  $form['department_name'] = array(
    '#title' => 'Department Name',
    '#type' => 'textfield',
    '#size' => 100,
    '#required' => TRUE
  );
  if ($dept_edit_record) $form['department_name']['#value'] = $dept_edit_record->dept_name;
  
  $form['department_code'] = array(
    '#title' => 'Department Code',
    '#type' => 'textfield',
    '#size' => 20,
    //'#required' => TRUE
  );
  if ($dept_edit_record) $form['department_code']['#value'] = $dept_edit_record->dept_code;
  /*
  if (isset($_POST['department_nid'])) {
    $form['department_nid'] = array(
    '#title' => 'Department nid',
    '#type' => 'hidden',
    '#value' => $_POST['department_nid']
    );
  }
  */
  $form['submit'] = array(
    '#value' => 'Create Department',
    '#type' => 'submit'
  );
  if ($dept_edit_record) $form['submit']['#value'] = 'Update Department';

  return $form;
}


function staff_update_faculty_form_validate($form, &$form_state) {
  if ($form_state['values']['faculty_id'] == 0)
    form_set_error('faculty_id', Error_Types(114));
}


function staff_update_faculty_form_submit($form, &$form_state) {

  //$_SESSION['eduerp_fac_nid'] = $form_state['values']['faculty_id'];
  drupal_goto("staff/createeditfaculty/" . $form_state['values']['faculty_id']);
}


function staff_update_dept_form_validate($form, &$form_state) {
  if ($form_state['values']['department_nid'] == 0)
    form_set_error('department_nid', Error_Types(114));
}


function staff_update_dept_form_submit($form, &$form_state) {

  //$_SESSION['eduerp_dept_nid'] = $form_state['values']['department_nid'];
   drupal_goto("staff/createeditdept/" . $form_state['values']['department_nid']);
}


function staff_create_edit_course() {
  global $user, $departmentInfo, $canCreateModify;
  ob_start();
  $canCreateModify = false;$hideOthers = false;

  if (isset($_SESSION['eduerp_showFullForm'])) $_POST['showFullForm'] = 1;
  if (isset($_SESSION['eduerp_showCourseAssignment'])) $_POST['showCourseAssignment'] = 1;


  echo '<br /><hr /><br />';
  $authorizeCourseEdit = false;
  if (arg(2) && is_Valid_Department(arg(2))) {//the department is valid
    //get the departments info
    $departmentInfo = department(arg(2));
    //check that he can create/modify courses
    if (staff_has_eduerp_role($user->uid, arg(2), 0, array('Head of Department', 'Department Examination Officer'))) {//allow for one db call only
      $canCreateModify = true;
    }

    //if ($canCreateModify) {
      //check to know if proceed with course assignment was clicked
      if (isset($_POST['showCourseAssignment']) || isset($_SESSION['eduerp_fix_course'])) {
        //allow for some easy navigation
        $navi = "<font size = '1px'><a href = '/staff/semester/'>Semester Administration</a>&nbsp; &raquo; &nbsp;<a href = '/staff/createeditcourse'>Create/Modify a Course</a>&nbsp; &raquo; &nbsp;<a href = '/staff/createeditcourse/". arg(2) ."'>". $departmentInfo[arg(2)] ." Department</a>&nbsp; &raquo; &nbsp;<b>Course Assignment</b></font><br /><br />";
        $navi .= '<br /><hr /><br />';
        echo $navi;
        echo staff_show_assign_course();
        $hideOthers=true;
      }
      else {
        //check if user is trying to edit record
         if (arg(3) && is_valid_course(arg(3)) && course_belongs_to_department(arg(2), arg(3))) {
          $authorizeCourseEdit = true;$hideOthers=true;
          //get the course info
          $course = db_fetch_object(get_Available_Courses(0,arg(3)));
          //allow for some easy navigation
          $navi = "<font size = '1px'><a href = '/staff/semester/'>Semester Administration</a>&nbsp; &raquo; &nbsp;<a href = '/staff/createeditcourse'>Create/Modify a Course</a>&nbsp; &raquo; &nbsp;<a href = '/staff/createeditcourse/". arg(2) ."'>". $departmentInfo[arg(2)] ." Department</a>&nbsp; &raquo; &nbsp;Modify Course: <b>". $course->course_code ."</b></font><br /><br />";
          $navi .= '<br /><hr /><br />';
          $navi .= "<b>Modify Course</b> - Make any required changes to the Course: <b>". $course->course_code ."</b><br />";
        }
        else {
          //allow for some easy navigation
          $navi = "<font size = '1px'><a href = '/staff/semester/'>Semester Administration</a>&nbsp; &raquo; &nbsp;<a href = '/staff/createeditcourse'>Create/Modify a Course</a>&nbsp; &raquo; &nbsp;<a href = '/staff/createeditcourse/".arg(2)."'>". $departmentInfo[arg(2)] ." Department</a>&nbsp; &raquo; &nbsp;Create New Course</font><br /><br />";
          $navi .= '<br /><hr /><br />';
          $navi .= "<b>Create New Course</b> - Please fill the form<br />";
          ;
        }

        if (isset($_POST['showFullForm']) || arg(3)) {//expand the course creation form
          if ($canCreateModify) {
            echo $navi;
            echo drupal_get_form('staff_create_course_form');
            $hideOthers = true;
            echo '<br /><hr /><br />';
            echo staff_display_available_courses(variable_get('eduerp_current_session', ''), variable_get('eduerp_current_semester', ''), $departmentInfo);
          }
          else {
            echo "<font size = '1px'><a href = '/staff/semester'>Semester Administration</a>&nbsp; &raquo; &nbsp;<a href = '/staff/createeditcourse'>Create/Modify a Course</a>&nbsp; &raquo; &nbsp;". $departmentInfo[arg(2)] ." Department</font><br /><br />";
            echo '<br /><hr /><br />';
            echo Error_Types(104);
          }
        }
        else {//some small navigation
          if ($canCreateModify) {
            echo "<font size = '1px'><a href = '/staff/semester'>Semester Administration</a>&nbsp; &raquo; &nbsp;<a href = '/staff/createeditcourse'>Create/Modify a Course</a>&nbsp; &raquo; &nbsp;". $departmentInfo[arg(2)] ." Department</font><br /><br />";
            echo '<br /><hr /><br />';
            echo "<b>Create Course</b> - Click to proceed with Course creation<br /><br />";
            echo drupal_get_form('staff_create_course_mini_form');
          }
          else {
            echo "<font size = '1px'><a href = '/staff/semester'>Semester Administration</a>&nbsp; &raquo; &nbsp;<a href = '/staff/createeditcourse'>Create/Modify a Course</a>&nbsp; &raquo; &nbsp;". $departmentInfo[arg(2)] ." Department</font><br /><br />";
            echo '<br /><hr /><br />';
            echo Error_Types(104);
          }
        }
      }//end of else of if proceed with course assignment
    //}
    /*
    else {//the user cannot create records
      echo "<font size = '1px'><a href = '/staff/semester'>Semester Administration</a>&nbsp; &raquo; &nbsp;<a href = '/staff/createeditcourse'>Create/Modify a Course</a>&nbsp; &raquo; &nbsp;". $departmentInfo[arg(2)] ." Department</font><br /><br />";
      echo '<br /><hr /><br />';
      echo Error_Types(104);
    }
    */
    if (! $hideOthers) {//only show these things in none edit mode
      echo '<br /><hr /><br />';
      if ($canCreateModify) {
        echo "<b>Modify Course</b> - Select a Course to modify it<br />";
        echo drupal_get_form('staff_edit_course_form');
      }
      else {//user cannot modify records
        echo Error_Types(105);
      }
      //display form for proceed to Course assignment
      echo '<br /><hr /><br />';
      echo '<b>Assign Lecturers and Timetables for Courses - Click to proceed with assigning lecturers and timetables for courses<br /><br />';
      echo drupal_get_form('staff_assign_course_proceed_form');

      //display existing courses in the departmens here
      echo '<br /><hr /><br />';
      echo staff_display_available_courses(variable_get('eduerp_current_session', ''), variable_get('eduerp_current_semester', ''), $departmentInfo);

    }
  }
  else {

    //allow for some easy navigation
    echo "<font size = '1px'><a href = '/staff/semester/'>Semester Administration</a>&nbsp; &raquo; &nbsp;Create/Modify a Course</font><br /><br />";
    echo "<b>Create/Modify Course</b> - To begin select a department and Click Continue<br />";
    echo drupal_get_form('staff_create_edit_course_select_dept_form');

    echo '<br /><hr /><br />';
    //display existing departmens here
    echo staff_display_available_departments();
  }


  unset($_SESSION['eduerp_showFullForm']);unset($_SESSION['eduerp_showCourseAssignment']);
  return ob_get_clean();

}


function staff_create_edit_course_select_dept_form($form_state) {

  $form['#title'] = 'Select Department';
  $form['department_nid'] = array(
    '#type' => 'select',
    '#options' => department(),
    '#title' => 'Department Name');
  $form['submit'] = array(
    '#value' => 'Continue',
    '#type' => 'submit'
  );

  return $form;

}


function staff_create_edit_course_select_dept_form_validate($form, $form_state) {
  if ($form_state['values']['department_nid'] == 0)
    form_set_error('programme_nid', Error_Types(114));
}


function staff_create_edit_course_select_dept_form_submit($form, $form_state) {
  drupal_goto("staff/createeditcourse/" . $form_state['values']['department_nid']);
}


function staff_display_available_faculties() {
  $str = "<b>Available Faculties</b><br />
  <table border=1>
    <tr>
      <td><b>#</b></td>
      <td><b>Faculty Name</b></td>
      <td><b>Faculty Abbreviation</b></td>
      <td><b>Faculty E-mail Subdomain</b></td>
    </tr>";$i = 1;$color = 0;
    $faculties = get_faculties();
    foreach ($faculties as $v) {
      if ($i%2)$rcolor = "#E5E5E5"; else $rcolor = "#FFFFFF";
      $str .= "
      <tr bgcolor = \"$rcolor\" onMouseOver = \"this.bgColor = '#FDD381';\" onMouseOut = \"this.bgColor = '$rcolor';\">
        <td>". $i++ ."</td>
        <td>". $v['faculty_name'] ."</td>
        <td>". $v['faculty_abbr'] ."</td>
        <td>". $v['faculty_email_subdomain'] ."</td>
      </tr>";
      }
  $str .= "
  </table>";
  return $str;
}


function staff_display_available_departments() {
  $str = "
  <div id='assigned_courses'>
  <b>Available Departments</b><br />
  <table border=1>
    <tr>
      <th><b>#</b></th>
      <th><b>Faculty Name</b></th>
      <th><b>Faculty Abbreviation</b></th>
      <th><b>Department Name</b></th>
      <th><b>Department Code</b></th>
    </tr>";$i = 1;
    $faculties = get_departments();
    foreach ($faculties as $v){
      if ($i%2) $rcolor = "#E5E5E5"; else $rcolor = "#FFFFFF";
        $str .= "
         <tr bgcolor = \"$rcolor\" onMouseOver = \"this.bgColor = '#FDD381';\" onMouseOut = \"this.bgColor = '$rcolor';\">
           <td>". $i++ ."</td>
           <td>". $v['faculty_name'] ."</td>
           <td>". $v['faculty_abbr'] ."</td>
           <td>". $v['dept_name'] ."</td>
           <td>". $v['dept_code'] ."</td>
         </tr>";
      }

  //}
  $str .= "
  </table>
  </div>";
  return $str;

}


function is_Faculty_Name_Existing($faculty_name, $nid = 0) {
  //now if nid is zero then the check is coming from CREATE else it is coming from UPDATE
  if ($nid != 0)
    $result = db_query("SELECT nid FROM {content_type_college} WHERE field_college_name_value = '%s' AND nid != %d ", $faculty_name, $nid);
  else
    $result = db_query("SELECT nid FROM {content_type_college} WHERE field_college_name_value = '%s' ", $faculty_name);

  if (db_fetch_object($result)) return true;

  return false;
}


function is_Programme_Name_Existing($programme_name, $nid = 0) {
  //now if nid is zero then the check is coming from CREATE else it is coming from UPDATE
  if ($nid != 0)
    $result = db_query("SELECT nid FROM {content_type_program} WHERE field_programme_name_value = '%s' AND nid != %d ", $programme_name, $nid);
  else
    $result = db_query("SELECT nid FROM {content_type_program} WHERE field_programme_name_value = '%s' ", $programme_name);

  if (db_fetch_object($result)) return true;

  return false;
}


function is_Programme_Abbr_Existing($programme_abbr, $nid = 0) {
  //now if nid is zero then the check is coming from CREATE else it is coming from UPDATE
  if ($nid != 0)
    $result = db_query("SELECT nid FROM {content_type_program} WHERE field_programme_abbr_value = '%s' AND nid != %d ", $programme_abbr, $nid);
  else
    $result = db_query("SELECT nid FROM {content_type_program} WHERE field_programme_abbr_value = '%s' ", $programme_abbr);

  if (db_fetch_object($result)) return true;

  return false;
}


function is_Faculty_Abbreviation_Existing($faculty_abbreviation, $nid = 0) {
  //now if nid is zero then the check is coming from CREATE else it is coming from UPDATE
  if ($nid != 0)
    $result = db_query("SELECT nid FROM {content_type_college} WHERE field_college_abbreviation_value = '%s' AND nid != %d ", $faculty_abbreviation, $nid);
  else
    $result = db_query("SELECT nid FROM {content_type_college} WHERE field_college_abbreviation_value = '%s' ", $faculty_abbreviation);

  if (db_fetch_object($result)) return true;

  return false;
}


function is_Department_Name_Existing($department_name, $nid = 0) {
  //now if nid is zero then the check is coming from CREATE else it is coming from UPDATE
  if ($nid != 0)
    $result = db_query("SELECT nid FROM {content_type_department} WHERE field_department_name_value = '%s' AND nid != %d ", $department_name, $nid);
  else
    $result = db_query("SELECT nid FROM {content_type_department} WHERE field_department_name_value='%s' ", $department_name);

  if (db_fetch_object($result)) return true;

  return false;
}


function is_Course_Code_Existing($course_code, $nid = 0) {
  //now if nid is zero then the check is coming from CREATE else it is coming from UPDATE
  if ($nid != 0)
    $result = db_query("SELECT nid FROM {content_type_course} WHERE field_code_value='%s' AND nid !=%d ", $course_code, $nid);
  else
    $result = db_query("SELECT nid FROM {content_type_course} WHERE field_code_value='%s' ", $course_code);

  if (db_fetch_object($result)) return true;

  return false;
}


function Error_Types($num = 0) {
  $prifix1 = "Sorry, "; $prifix2 = "Warning! ";
  switch($num){
  case '101':
    $msg = $prifix1 . 'Faculty Name already exists!<br />'; break;
  case '102':
    $msg = $prifix1 . 'Faculty Abbreviation already exists!<br />'; break;
  case '103':
    $msg = $prifix1 . 'Department Name already exists!<br />'; break;
  case '104':
    $msg = $prifix1 . 'You do not have permission to Create new Records!<br />'; break;
  case '105':
    $msg = $prifix1 . 'You do not have permission to Modify Records!<br /><br /><br />'; break;
  case '106':
    $msg = $prifix1 . 'No record(s) exists!<br />'; break;
  case '107':
    $msg = $prifix1 . 'Numeric value expected!<br />'; break;
  case '108':
    $msg = $prifix1 . 'Course Name already exists!<br />'; break;
  case '109':
    $msg = $prifix1 . 'Spaces are not allowed in Course Code!<br />'; break;
  case '110':
    $msg = $prifix1 . 'At least one of the Course Codes entered for Prerequisites Codes either does not exist or is invalid!<br />'; break;
  case '111':
    $msg = $prifix1 . 'Cannot reference self for Prerequisite Course!<br />'; break;
  case '112':
    $msg = $prifix1 . 'You do not have permission to Access the Department!<br />'; break;
  case '113':
    $msg = $prifix1 . 'Course Assignment already exists for the Course, for the Timetable, for the Semester and for the Session!<br />'; break;
  case '114':
    $msg = $prifix1 . 'Invalid Data was supplied!<br />'; break;
  case '115':
    $msg = $prifix1 . 'Programme Name already exists!<br />'; break;
  case '116':
    $msg = $prifix1 . 'Prerequisite Description cannot be empty!<br />'; break;
  case '117':
    $msg = $prifix1 . 'You do not have permission to Create or Modify records in the selected Department!<br /><br /><br />'; break;
  case '118':
    $msg = $prifix1 . 'Input Data not in expected format!<br />'; break;
  case '119':
    $msg = $prifix1 . 'Minimum Credit Load cannot be greater than Maximum Credit Load!<br />'; break;
  case '120':
    $msg = $prifix1 . 'Programme Abbreviation already exists!<br />'; break;
  case '121':
    $msg = $prifix1 . 'You do not have permission to Create or Modify records in the selected Programme!<br />'; break;
  case '122':
    $msg = $prifix1 . 'There is a problem with the setup of this Programme!<br />'; break;
  case '123':
    $msg = $prifix1 . 'The selected Course already exists for the Semester, for the Programme and for the Level!<br />'; break;
  case '124':
    $msg = $prifix1 . 'Either no Course Registration information exists or all have been dropped for the student for the selected Session and Semester!<br />'; break;
  case '125':
    $msg = $prifix1 . 'Either the Matriculation/JAMB Number does not exist or it is invalid!<br />'; break;
  case '126':
    $msg = $prifix1 . 'No more record(s) exists!<br />'; break;
  case '127':
    $msg = $prifix1 . 'You do not have permission to access this module!<br /><br /><br />'; break;
  case '128':
    $msg = $prifix1 . 'Either Courses have not been setup or the student has fully registered all courses for the selected Session and Semester!<br />'; break;
  case '129': $msg = $prifix1 . 'The arithmetic sum of all CA + Exam marks must be 100!<br />'; break;
  case '130': $msg = $prifix1 . 'Numeric values not greater than 3 digits expected!<br />'; break;
  case '131': $msg = $prifix1 . 'Hostel Name already exists!<br />'; break;
  case '132': $msg = $prifix1 . 'Block Name already exists in the selected Hostel!<br />'; break;
  case '133': $msg = $prifix1 . 'Room Name already exists in the selected Block!<br />'; break;
  case '134': $msg = $prifix1 . 'Room Capacity must be of Numeric type!<br />'; break;
  case '135': $msg = $prifix1 . 'The allocated and available space must be equal!<br />'; break;
  case '136': $msg = $prifix1 . 'No Room exists in the selected Block!'; break;
  case '137': $msg = $prifix1 . 'Invalid date specified!'; break;
  case '138': $msg = $prifix1 . 'Reservation already exists for the student!'; break;
  case '139': $msg = $prifix1 . 'Room allocation already exists for the student!'; break;
  case '140': $msg = $prifix1 . 'Either the student does not belong to any active category or No free Bedspace was found!'; break;
  case '141': $msg = $prifix1 . 'No Allocation Rules exists for the Block!'; break;
  case '142': $msg = $prifix1 . 'The operation was not successful. No Allocation Rules exists for at least one of the Blocks!'; break;
  case '143': $msg = $prifix1 . 'The student may not have been properly setup!'; break;
  case '144': $msg = $prifix1 . 'Invalid format specified for Price!'; break;
  case '145': $msg = $prifix1 . 'Either your Reservation as expired or no Reservation information was found!'; break;
  case '146': $msg = $prifix1 . 'Hostel setup error encountered. Please contact your Administrator!'; break;
  case '147': $msg = $prifix1 . 'Hostel Reservation period has expired!'; break;
  case '148': $msg = $prifix1 . 'Hostel Reservation period has not yet reached!'; break;
  case '149': $msg = $prifix1 . 'Hostel Reservation has been temporarily stopped. Please try again later!'; break;
  case '150': $msg = $prifix1 . 'The operation was not successful. Allocation Number cannot be less than Alloted Number!'; break;
  case '151': $msg = $prifix1 . 'Room Allocation failed. Please contact your Administrator!'; break;

  default:
    $msg =  $prifix2 .'Something fatal occured!<br /><br /><br />';
  }
  return $msg;
}

function is_Valid_Faculty ($faculty_nid) {
  $result = db_query("SELECT nid FROM {content_type_college} WHERE nid =%d ", $faculty_nid);
  if (db_affected_rows($result) > 0 ) return true;

  return false;
}


function is_Valid_Department ($department_nid) {
  $result = db_query("SELECT nid FROM {content_type_department} WHERE nid =%d ", $department_nid);
  if (db_affected_rows($result) > 0 ) return true;

  return false;
}


function is_valid_programme ($programme_nid) {
  $result = db_query("SELECT nid FROM {content_type_program} WHERE nid =%d ", $programme_nid);
  if (db_affected_rows($result) > 0 ) return true;

  return false;
}


function is_valid_programme_course_id ($programme_nid, $programme_course_nid) {
  $result = db_query("SELECT program_course_id FROM {program_course} WHERE program_course_id=%d AND programme_id=%d ", $programme_course_nid, $programme_nid);
  if (db_affected_rows($result) > 0 ) return true;

  return false;
}


function is_valid_course($course_nid) {
  $result = db_query("SELECT nid FROM {content_type_course} WHERE nid =%d ", $course_nid);
  if (db_affected_rows($result) > 0 ) return true;

  return false;

}


function is_valid_course_instance($instance_nid) {
  $result = db_query("SELECT nid FROM {content_type_course_instance} WHERE nid =%d ", $instance_nid);
  if (db_affected_rows($result) > 0 ) return true;

  return false;

}


function is_valid_course_code($course_code) {
  $result = db_query("SELECT nid FROM {content_type_course} WHERE field_code_value ='%s' ", $course_code);
  if (db_affected_rows($result) > 0 ) return true;

  return false;

}


function course_belongs_to_department($department_nid, $course_nid) {
  $result = db_query("SELECT nid FROM {content_type_course} WHERE nid =%d AND field_department_nid_nid =%d", $course_nid, $department_nid);
  if (db_affected_rows($result) > 0 ) return true;

  return false;

}


function course_instance_match_department_and_session($department_nid, $course_instance_nid, $session) {
  $result = db_query("SELECT i.nid FROM {content_type_course_instance} i
        INNER JOIN {content_type_course} c ON i.field_course_id_nid = c.nid

        WHERE c.field_department_nid_nid =%d AND i.nid =%d AND i.field_sess_name_value='%s' ", $department_nid, $course_instance_nid, $session);
  if (db_affected_rows($result) > 0 ) return true;

  return false;

}


function staff_create_course_form() {

 $authorizeCourseEdit = false;
 if (arg(3) && arg(2) && is_valid_course(arg(3)) && course_belongs_to_department(arg(2), arg(3))) {
   $authorizeCourseEdit = true;
   if (empty($_POST['course_code'])) {//trying to edit
     $result = get_Available_Courses(0, arg(3));
     $course = db_fetch_object($result);
   }
  }

  $form['#title'] = 'Create New Course';
  $form['course_level'] = array(
    '#type' => 'select',
    '#options' => course_levels(),
    '#title' => 'Course Level');
  if ($course) $form['course_level']['#default_value'] = $course->course_level;

  $form['course_code'] = array(
    '#title' => 'Course Code',
    '#type' => 'textfield',
    '#size' => 50,
    '#required' => TRUE
  );
  if ($course) $form['course_code']['#value'] = $course->course_code;

  $form['course_title'] = array(
    '#title' => 'Course Title',
    '#type' => 'textarea',
    '#size' => 255,
    '#required' => TRUE
  );
  if ($course) $form['course_title']['#value'] = $course->course_title;

  $form['course_description'] = array(
    '#title' => 'Course Description',
    '#type' => 'textarea',
    '#size' => 255,
    '#required' => TRUE
  );
  if ($course) $form['course_description']['#value'] = $course->course_description;


  $form['credit_load'] = array(
    '#title' => 'Credit Load',
    '#type' => 'textfield',
    '#size' => 3,
    '#required' => TRUE
  );
  if ($course) $form['credit_load']['#value'] = $course->credit_load;

  $form['prerequisites_codes'] = array(
    '#title' => 'Prerequisite Codes - List of course_code(s), comma separated that have to be completed before this course, code1/code2/code3 will be alternatives, one of which must be completed',
    '#type' => 'textarea',
    '#size' => 255

  );
  if ($course) $form['prerequisites_codes']['#value'] = $course->prerequisite_codes;


    $form['prerequisite_desc'] = array(
    '#title' => 'Prerequisite Description - Description of prerequisites',
    '#type' => 'textarea',
    '#size' => 255

  );
  if ($course) $form['prerequisite_desc']['#value'] = $course->prerequisite_desc;

  $form['course_semester'] = array(
    '#type' => 'select',
    '#options' => semesters(),
    '#title' => 'Course Semester',
    '#required' => TRUE);
  if ($course) $form['course_semester']['#default_value'] = $course->course_semester;

  if (isset($_POST['showFullForm'])) {
    //$form['showFullForm'] = array('#showFullForm' => '1');/*
    $form['showFullForm'] = array(
    '#title' => 'Course Description',
    '#type' => 'hidden',
    '#default_value'=> 1
   );

  }
 $form['assessment'] = array(
      '#type' => 'fieldset',
      '#title' => t('Continuous Assessment Maximum Marks'),
      '#description' => t('e.g. If the number of CA\'s for this course is 2, select 2 in <b>Number of CA\'s</b>, enter appropriate values in fields <b>Max. Mark 1<sup>st</sup> CA</b>, <b>Max. Mark 2<sup>nd</sup> CA</b> and <b>Max. Exam Mark</b> then enter 0 (zero) in fields <b>Max. Mark 3<sup>rd</sup> CA.</b> and <b>Max. Mark 4<sup>th</sup> CA</b>. <br /><b>Note:</b> Arithmetic Sum of all marks MUST be equal to 100!'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
    );
 //print_r($_SESSION['eduerp_course_grade_weightings']);
 $caApproval = array (0 => 'Approved Along with Exams', 1 => 'Approved Individually');
 $caNum = array(0=>'0', 1=>'1', 2=>'2', 3=>'3', 4=>'4');

 $form['assessment']['caNum'] = array('#type' => 'select', '#title' => t('Number of CA\'s'), '#options' => $caNum, '#description' => t('Describes total number of CA\'s for the course'), '#required' => True);
 if(isset($_SESSION['eduerp_course_grade_weightings'])) $form['assessment']['caNum']['#default_value'] = $_SESSION['eduerp_course_grade_weightings']['number_of_ca'];

 $form['assessment']['caApproval'] = array('#type' => 'select', '#title' => t('CA Approval Method'), '#options' => $caApproval, '#description' => t('Describes how the CA\'s should be approved'), '#required' => True);
 if(isset($_SESSION['eduerp_course_grade_weightings'])) $form['assessment']['caApproval']['#default_value'] = $_SESSION['eduerp_course_grade_weightings']['ca_approved_onebyone'];

 $form['assessment']['ca1'] = array('#type' => 'textfield', '#title' => t('Max. Mark 1<sup>st</sup> CA'), '#description' => t('Maximum allowable marks for 1<sup>st</sup> CA.'), '#required' => True);
 if(isset($_SESSION['eduerp_course_grade_weightings'])) $form['assessment']['ca1']['#default_value'] = $_SESSION['eduerp_course_grade_weightings']['max_mark_ca1'];

 $form['assessment']['ca2'] = array('#type' => 'textfield', '#title' => t('Max. Mark 2<sup>nd</sup> CA'), '#description' => t('Maximum allowable marks for 2<sup>nd</sup> CA.'), '#required' => True);
 if(isset($_SESSION['eduerp_course_grade_weightings'])) $form['assessment']['ca2']['#default_value'] = $_SESSION['eduerp_course_grade_weightings']['max_mark_ca2'];

 $form['assessment']['ca3'] = array('#type' => 'textfield', '#title' => t('Max. Mark 3<sup>rd</sup> CA'), '#description' => t('Maximum allowable marks for 3<sup>rd</sup> CA.'), '#required' => True);
 if(isset($_SESSION['eduerp_course_grade_weightings'])) $form['assessment']['ca3']['#default_value'] = $_SESSION['eduerp_course_grade_weightings']['max_mark_ca3'];

 $form['assessment']['ca4'] = array('#type' => 'textfield', '#title' => t('Max. Mark 4<sup>th</sup> CA'), '#description' => t('Maximum allowable marks for 4<sup>th</sup> CA.'), '#required' => True);
 if(isset($_SESSION['eduerp_course_grade_weightings'])) $form['assessment']['ca4']['#default_value'] = $_SESSION['eduerp_course_grade_weightings']['max_mark_ca4'];

 $form['assessment']['exam_mark'] = array('#type' => 'textfield', '#title' => t('Max. Exam Mark'), '#description' => t('Note: If the exam is a repeat, this will be overridden to 100'), '#required' => True);
 if(isset($_SESSION['eduerp_course_grade_weightings'])) $form['assessment']['exam_mark']['#default_value'] = $_SESSION['eduerp_course_grade_weightings']['max_mark_exam'];


 if(isset($_SESSION['eduerp_course_grade_weightings'])) unset($_SESSION['eduerp_course_grade_weightings']);

  $form['submit'] = array(
    '#value' => 'Create Course',
    '#type' => 'submit'
  );
  if ($authorizeCourseEdit) $form['submit']['#value'] = 'Update Course';

  return $form;

}


function staff_create_course_form_validate($form, $form_state) {
  //if(isset($form_state['showFullForm'])) $_POST['showFullForm'] = 1; //$form['showFullForm'];
  if (isset($form_state['values']['showFullForm'])) $_POST['showFullForm'] = $form_state['values']['showFullForm'];

  if (arg(3)) {//validate EDIT
    if (is_Course_Code_Existing($form_state['values']['course_code'], arg(3)))
      form_set_error('course_code', Error_Types(108));

  }
  else {//validate CREATE
    if (is_Course_Code_Existing($form_state['values']['course_code']))
      form_set_error('course_code', Error_Types(108));
  }
  $form_state['values']['credit_load'] = (int) $form_state['values']['credit_load'];
  if (! preg_match("/^[0-9]{1,3}$/", $form_state['values']['credit_load']) || $form_state['values']['credit_load'] <= 0)
      form_set_error('credit_load', Error_Types(107));

  //make sure that no spaces in course code
  if (strpos($form_state['values']['course_code'], " "))
    form_set_error('course_code', Error_Types(109));

  //if prerequisites is not empty then make sure it conforms
  if (! empty($form_state['values']['prerequisites_codes'])) {
    $bits = explode(", ", $form_state['values']['prerequisites_codes']);
    if (is_array($bits) && sizeof($bits)) {
      //looks like he entered more than one course codes
      foreach ($bits as $v) {
        $v = trim($v);
        if (strpos($v, '/')) {
          //a / was found..ok
          //lets break it up
          $morebits =  explode("/", $v);
          if (is_array($morebits) && sizeof($morebits)) {
            //fine now test each
            foreach ($morebits as $h) {
              $h = trim($h);
              //the data is single so check for valid course code
              if (! is_valid_course_code($h)) //$h == $form_state['values']['course_code'] means do not allow prereqisite to reference itself
                form_set_error('prerequisites_codes', Error_Types(110));
              elseif ($h == $form_state['values']['course_code'])
                form_set_error('prerequisites_codes', Error_Types(111));//cannot reference self
            }
          }
          else {
            //something spooky is going on
            form_set_error('prerequisites_codes', Error_Types(110));
          }
        }
        else {
          //the data is single so check for valid course code
          if (! is_valid_course_code($v))
            form_set_error('prerequisites_codes', Error_Types(110));
          elseif ($v == $form_state['values']['course_code'])
            form_set_error('prerequisites_codes', Error_Types(111));//cannot reference self
        }
      }
    }
    else {//seems he entered only one course code. well lets see
      //check for valid course code
      if (! is_valid_course_code($form_state['values']['prerequisites_codes']))
        form_set_error('prerequisites_codes', Error_Types(110));
      elseif ($form_state['values']['prerequisites_codes'] == $form_state['values']['course_code'])
        form_set_error('prerequisites_codes', Error_Types(111));//cannot reference self
    }

    //make sure that the description field is not empty
    if(empty($form_state['values']['prerequisite_desc']))
      form_set_error('prerequisite_desc', Error_Types(116));
  }
  $values = $form_state['values'];
  //validate continuos assessment
  //drupal_set_message($values['exam_mark']);
  if(! preg_match("/^[0-9]{1,3}$/", $values['exam_mark'])) form_set_error('exam_mark', Error_Types(130));
  if(! preg_match("/^[0-9]{1,3}$/", $values['ca1'])) form_set_error('ca1', Error_Types(130));
  if(! preg_match("/^[0-9]{1,3}$/", $values['ca2'])) form_set_error('ca2', Error_Types(130));
  if(! preg_match("/^[0-9]{1,3}$/", $values['ca3'])) form_set_error('ca3', Error_Types(130));
  if(! preg_match("/^[0-9]{1,3}$/", $values['ca4'])) form_set_error('ca4', Error_Types(130));

  // add up the enteries and make sure it is not < 0 or > 100
  $totalMarks = $values['ca1'] + $values['ca2'] + $values['ca3'] + $values['ca4'] + $values['exam_mark'];
  if ($totalMarks < 0 || $totalMarks > 100) {
    form_set_error('exam_mark', Error_Types(129));

  }

}


function staff_create_course_form_submit($form, &$form_state){
  //if(isset($form_state['values']['course_nid']) && is_numeric($form_state['values']['course_nid'])){//the user is trying to edit a given faculty
  $values = $form_state['values'];
  //check for changes in default course weighting settings
  $defaults = get_course_grade_weighting();
  $found = false;
  //form=>dbfields
  $dbFields = array('caNum'=>'number_of_ca', 'caApproval'=>'ca_approved_onebyone', 'ca1'=>'max_mark_ca1', 'ca2'=>'max_mark_ca2', 'ca3'=>'max_mark_ca3', 'ca4'=>'max_mark_ca4', 'exam_mark'=>'max_mark_exam');
  foreach($dbFields as $k => $v) {
    if ($defaults[$v] != $values[$k]) { //some changes were made
      $found = true;
      break;
    }

  }

  //get default values again
  $_SESSION['eduerp_course_grade_weightings'] = $defaults;

  if(! arg(3)) $_SESSION['eduerp_showFullForm'] = 1;
  if(arg(3)){

    $node =  node_load(arg(3));
    $node->title                                = $form_state['values']['course_title'];
    $node->field_department_nid[0]['nid']       = arg(2);
    $node->field_code[0]['value']               = $form_state['values']['course_code'];
    $node->field_coursetitle[0]['value']        = $form_state['values']['course_title'];
    $node->field_course_description[0]['value'] = $form_state['values']['course_description'];
    $node->field_creditload[0]['value']         = $form_state['values']['credit_load'];
    $node->field_prerequisite_codes[0]['value'] = ( ! empty($form_state['values']['prerequisites_codes'])) ? $form_state['values']['prerequisites_codes'] : ''; //List of Course code(s), comma separated that have to be completed before this course, code1/code2/code3 will be alternatives, one of which must be completed
    $node->field_prerequisite[0]['value']       = ( ! empty($form_state['values']['prerequisite_desc'])) ? $form_state['values']['prerequisite_desc'] : '';
    $node->field_level[0]['value']              = $form_state['values']['course_level'];
    $node->field_semester[0]['value']           = $form_state['values']['course_semester'];
    node_save($node);

    $values['course_nid'] = $node->nid;
    if ($found) create_course_weighting_entries($values);

    drupal_set_message($form_state['values']['course_code'] . ' Course was updated!<br />');

    drupal_goto("staff/createeditcourse/" . arg(2));
  }
  else {

    // course CCK
    $node = new stdClass();
    $node->type                                 = 'course';
    $node->uid                                  = 1;  // Admin
    $node->status                               = 1;  // Published
    $node->promote                              = 0;
    $node->sticky                               = 0;
    $node->comment                              = 0;
    $node->title                                = $form_state['values']['course_title'];
    $node->field_department_nid[0]['nid']       = arg(2);
    $node->field_code[0]['value']               = $form_state['values']['course_code'];
    $node->field_coursetitle[0]['value']        = $form_state['values']['course_title'];
    $node->field_course_description[0]['value'] = $form_state['values']['course_description'];
    $node->field_creditload[0]['value']         = $form_state['values']['credit_load'];
    $node->field_prerequisite_codes[0]['value'] = ( ! empty($form_state['values']['prerequisites_codes'])) ? $form_state['values']['prerequisites_codes'] : ''; //List of Course code(s), comma separated that have to be completed before this course, code1/code2/code3 will be alternatives, one of which must be completed
    $node->field_prerequisite[0]['value']       = ( ! empty($form_state['values']['prerequisite_desc'])) ? $form_state['values']['prerequisite_desc'] : '';
    $node->field_level[0]['value']              = $form_state['values']['course_level'];
    $node->field_semester[0]['value']           = $form_state['values']['course_semester'];

    drupal_set_message($form_state['values']['course_code'] . ' Course has been created!<br />');
  }

  node_save($node);

  $values['course_nid'] = $node->nid;
  if ($found) create_course_weighting_entries($values);
}


function staff_edit_course_form(){
  $form['#title'] = 'Update Course';


    $form['course_nid'] = array(
      '#type' => 'select',
      '#options' => course(arg(2)),
      '#title' => 'Course Code');

    $form['submit'] = array(
      '#value' => 'Modify Course',
      '#type' => 'submit'
    );


  return $form;
}


function staff_edit_course_form_validate($form, $form_state){
  if ($form_state['values']['course_nid'] == 0)
    form_set_error('course_nid', Error_Types(114));

}


function staff_edit_course_form_submit($form, $form_state){
  //get the course weightings
  $_SESSION['eduerp_course_grade_weightings'] = get_course_grade_weighting($form_state['values']['course_nid']);
  drupal_goto(drupal_goto("staff/createeditcourse/" . arg(2) .'/'. $form_state['values']['course_nid']));
}


function course_levels() {
  foreach (range(100, 900, 100) as $number) {
    $levels[$number] = $number;
  }
  foreach (range(1, 9) as $number) {
    $levels[$number] = $number;
  }
  return $levels;
}


function semesters() {
  foreach (range(1, 3) as $number) {
    $semester[$number] = $number;
  }
  return $semester;
}


function user_has_access_to_department($department_nid) {
  global $user;
  $result = db_query("SELECT er.role FROM {eduerp_roles} er WHERE er.uid=%d AND er.department_id=%d ", $user->uid, $department_nid);

  if(db_Affected_Rows() > 0) return true;
  return false;
}


function staff_create_course_mini_form() {
  $form['#title'] = 'Start Course Creation';

  $form['submit'] = array(
    '#value' => 'Start Course Creation',
    '#type' => 'submit'
  );

  return $form;
}


function staff_create_course_mini_form_submit($form, &$form_state) {

  $_SESSION['eduerp_showFullForm'] = 1;
  //load default course_grade_weightings
  $_SESSION['eduerp_course_grade_weightings'] = get_course_grade_weighting();
}


function get_Staff_in_Department($department_nid = 0, $staff_uid = 0) {
  $where = "";
  if ($department_nid != 0) {
    $where = " WHERE er.department_id=". $department_nid ."";
  }
  elseif ($staff_uid != 0)
      $where = " WHERE ur.uid = ". $staff_uid ." ";

  $sql = "
  SELECT ur.uid,
      CONCAT(pro.field_profile_last_name_value, ', ', pro.field_profile_first_name_value, ' ', IFNULL(pro.field_profile_middle_name_value, '')) AS name
    FROM {users_roles} ur
    INNER JOIN {role} r ON ur.rid=r.rid AND name='Staff'
    LEFT JOIN {node} npro ON ur.uid=npro.uid AND npro.type='profile'
    LEFT JOIN {content_type_profile} pro ON npro.vid=pro.vid
    LEFT JOIN {eduerp_roles} er ON ur.uid=er.uid AND er.role='Academic Staff'
    LEFT JOIN {content_type_department} d ON er.department_id=d.nid
    LEFT JOIN {content_type_college} c ON er.college_id=c.nid
    ". $where ."
    ORDER BY name
  ";//GROUP BY ur.uid ORDER BY name

  $result = db_query($sql);

  if (db_affected_rows($result) > 0) {
    while($row = db_fetch_object($result)){
      $stafflist[$row->uid] = $row->name;
    }
  }
  else {
    $stafflist[] = strip_tags(Error_Types(106));
  }
  return $stafflist;
}


function staff_show_assign_course() {
  global $departmentInfo, $canCreateModify;

  //because of referal from LIST OF COURSES NOT RUNNING, WE SHALL DEFAULT THE SESSION AND SEMESTER
  if(isset($_SESSION['eduerp_fix_course'])) {
    $_SESSION['eduerp_assign_course_session'] = $_SESSION['eduerp_fix_course']->session;
    $_SESSION['eduerp_assign_course_semester'] = $_SESSION['eduerp_fix_course']->semester;
  }
  if(! isset($_SESSION['eduerp_assign_course_session'])) variable_get('eduerp_current_session', '');
  if(! isset($_SESSION['eduerp_assign_course_semester'])) variable_get('eduerp_current_semester', '');

  //variable_get('eduerp_current_session', '') variable_get('eduerp_current_semester', '')
  if (arg(3))
    echo "<b>Modify Assigned Lecturers and Timetables for Courses</b> | Sesssion: <b>". $_SESSION['eduerp_assign_course_session'] ."</b> | Semester: <b>". $_SESSION['eduerp_assign_course_semester'] ."</b><br /><br />";
  else
    echo "<b>Assign Lecturers and Timetables for Courses</b> | Sesssion: <b>". $_SESSION['eduerp_assign_course_session'] ."</b> | Semester: <b>". $_SESSION['eduerp_assign_course_semester'] ."</b><br /><br />";

  //echo "Below is a list of all availabel Staff and Course(s) that belong to <b>". $departmentInfo[arg(2)] ."</b> Department.<br /><br />";
  if ($canCreateModify)
    echo drupal_get_form('staff_assign_course_form');
  else
    echo Error_Types(104);


  if (! arg(3)) {
    //show edit form
    echo '<br /><hr /><br />';
    echo "<b>Modify Assigned Lecturers and Timetables for Courses</b><br /> ";
    if ($canCreateModify)
      echo drupal_get_form('staff_edit_assigned_course_form');
    else
      echo Error_Types(105);

    //display missing courses in the department here
    echo '<br /><hr /><br />';
    echo staff_display_available_courses($_SESSION['eduerp_assign_course_session'], $_SESSION['eduerp_assign_course_semester'], $departmentInfo, 3);

    //display unassigned existing courses in the department here
    //echo '<br /><hr /><br />';
    //echo staff_display_available_courses($departmentInfo, 2);


    //display assigned existing courses in the department here
    //echo '<br /><hr /><br />';
    //echo staff_display_available_courses($departmentInfo, 1);
  }

  if(isset($_SESSION['eduerp_fix_course'])) unset($_SESSION['eduerp_fix_course']); if(isset($_SESSION['eduerp_return_url'])) unset($_SESSION['eduerp_return_url']);
}


function staff_assign_course_form() {
  if ($_SESSION['eduerp_fix_course']) //the user is trying to fix course issues
    $course_instance = $_SESSION['eduerp_fix_course'];

  //if (arg(3) && arg(2) && is_valid_course_instance(arg(3)) && course_instance_match_department_and_session(arg(2), arg(3), variable_get('eduerp_current_session', ''))) {
  if (arg(3) && arg(2) && is_valid_course_instance(arg(3)) && course_instance_match_department_and_session(arg(2), arg(3), $_SESSION['eduerp_assign_course_session'])) {
   //the record is already for the current session so no more checks...we are fine!
   $authorizeCourseEdit = true;
   if (empty($_POST['location'])) {//trying to edit
     $result = get_Course_Instance(arg(3));
     $course_instance = db_fetch_object($result);
     $courses[$course_instance->nid] = $course_instance->course_code;
   }
  }

  if(! isset($courses))
  $courses = course(arg(2), $_SESSION['eduerp_assign_course_semester']);

  $form['#title'] = 'Assign Lecturers and Timetable for Course';

  $form['course_nid'] = array(
  '#type' => 'select',
  '#options' => $courses,
  '#title' => 'Course Code',
  '#ahah' => array('path' => 'staff/ajax/getdeflecturer', 'event' => 'change', 'method' => 'replace', 'wrapper' => 'getdeflecturerz'),
  '#required'  => TRUE
  );

  if ($course_instance) $form['course_nid']['#default_value'] = $course_instance->field_course_id_nid;

  $form['chief_staff_nid'] = array(
      '#type' => 'select',
      '#options' => array(''=>'') + get_Staff_in_Department(), //arg(2)),
      '#title' => 'Chief Lecturer',
      '#attributes' => array(
      'style' => 'width:100px'),
      '#prefix' => "<div id='getdeflecturerz'>",
      '#suffix' => "</div>",
      '#disabled' => TRUE,
      '#required'  => TRUE

      );
  if ($course_instance) {$form['chief_staff_nid']['#default_value'] = $course_instance->field_lecturer_uid; $form['chief_staff_nid']['#disabled'] = FALSE; }

  $form['assist_staff_nid'] = array(
      '#type' => 'select',
      '#options' => array(0=>'N/A') + get_Staff_in_Department(), //arg(2)),
      '#title' => 'Assistant Lecturer'

      );
  if ($course_instance) $form['assist_staff_nid']['#default_value'] = (int) $course_instance->field_lecturer_alternate_uid ;

   $form['timetable'] = array(
      '#type' => 'textarea',
      '#title' => 'Time Table',
      '#required' => TRUE
      );
   if ($course_instance) $form['timetable']['#default_value'] = $course_instance->field_timetable_value;

   $form['showCourseAssignment'] = array( //used to keep showing the form
      '#type' => 'hidden',
      '#default_value' => 1
      );

  $form['submit'] = array(
      '#value' => 'Assign',
      '#type' => 'submit'
    );
  if (arg(3)) $form['submit']['#value'] = "Update Assignment";
  if(isset($_SESSION['eduerp_fix_course'])) unset($_SESSION['eduerp_fix_course']);
  return $form;
}


function staff_assign_course_proceed_form() {
  $form['#title'] = 'Start Assigning Lecturers to Courses';

  $form['session'] = array(
    '#type' => 'select',
    '#options' => get_all_sessions(),
    '#title' => 'Session',
    '#default_value'=>variable_get('eduerp_current_session', ''),
    '#required' => TRUE,

    );
  $form['semester'] = array(
    '#type' => 'select',
    '#options' => array(1=>'1', 2=>'2', 3=>'3'),
    '#title' => 'Semester',
    '#default_value'=>variable_get('eduerp_current_semester', ''),
    '#required' => TRUE,

    );
  $form['submit'] = array(
    '#value' => 'Start Assigning Lecturers to Courses',
    '#type' => 'submit'
  );

  return $form;
}


function staff_assign_course_proceed_form_submit($form, &$state) {
  $values = $state['values'];
  $_SESSION['eduerp_assign_course_session'] = $values['session'];
  $_SESSION['eduerp_assign_course_semester'] = $values['semester'];
  $_SESSION['eduerp_showCourseAssignment'] = 1;
}


function staff_assign_course_form_validate($form, &$form_state) {
  //make sure it is unique for course/semester/session


  if (arg(3)) {//validate EDIT variable_get('eduerp_current_session', '') variable_get('eduerp_current_semester', '')
    if (is_course_assignment_existing($form_state['values']['course_nid'], $_SESSION['eduerp_assign_course_semester'], $_SESSION['eduerp_assign_course_session'], $form_state['values']['timetable'], arg(3))) {
      form_set_error('course_code', Error_Types(113));
    }

  }
  else {
    if (is_course_assignment_existing($form_state['values']['course_nid'], $_SESSION['eduerp_assign_course_semester'], $_SESSION['eduerp_assign_course_session'], $form_state['values']['timetable'])) {
      form_set_error('course_code', Error_Types(113));
    }
  }

}


function staff_assign_course_form_submit($form, &$form_state) {
  $_SESSION['eduerp_showCourseAssignment'] = 1;

  $course = db_fetch_object(get_Available_Courses(0,$form_state['values']['course_nid']));
  //if(! arg(3)) $_SESSION['eduerp_showFullForm'] = 1;
  if(arg(3)){

    $node =  node_load(arg(3));
    $node->title                              = $course->course_code .' - '. $_SESSION['eduerp_assign_course_session'] .' - '. $_SESSION['eduerp_assign_course_semester'] .' - '. $course->course_level .' - '. $form_state['values']['location']; //[Course Title] . ' - ' . [Session Name] . ' - ' . [Semester Name] . ' - ' . [Level Name];
    //$node->field_course_id[0]['nid']          = $form_state['values']['course_nid'];
    $node->field_lecturer[0]['uid']           = $form_state['values']['chief_staff_nid'];
    $node->field_lecturer_alternate[0]['uid'] = ($form_state['values']['assist_staff_nid'] != 0) ? $form_state['values']['assist_staff_nid'] : NULL;
    $node->field_sess_name[0]['value']        = $_SESSION['eduerp_assign_course_session'];
    $node->field_semester_name[0]['value']    = $_SESSION['eduerp_assign_course_semester'];
    $node->field_repeat[0]['value']           = ($_SESSION['eduerp_assign_course_semester'] == 3) ? 1 : 0;
    //$node->field_location[0]['value']         = $form_state['values']['location'];
    $node->field_timetable[0]['value']        = $form_state['values']['timetable'];
    node_save($node);
    drupal_set_message($course->course_code .' Course was updated!<br />');

    drupal_goto("staff/createeditcourse/" . arg(2));
  }
  else {
    $location = 1;
    //this check is to know wether to increase the value of Location
    if (is_course_assignment_existing($form_state['values']['course_nid'], $_SESSION['eduerp_assign_course_semester'], $_SESSION['eduerp_assign_course_session'], $form_state['values']['timetable'], 0, true )) {
      //it means this course already has an instance for the semester and for the session
      //now get the max Location ID
      $max = get_Max_Location_ID($form_state['values']['course_nid'], $_SESSION['eduerp_assign_course_semester'], $_SESSION['eduerp_assign_course_session']);
      $location = $max->num + 1;

    }
    // course_instance CCK
    $node = new stdClass();
    $node->type                               = 'course_instance';
    $node->uid                                = 1;  // Admin
    $node->status                             = 1;  // Published
    $node->promote                            = 0;
    $node->sticky                             = 0;
    $node->comment                            = 0;
    $node->title                              = $course->course_code .' - '. variable_get('eduerp_current_session', '') .' - '. variable_get('eduerp_current_semester', '') .' - '. $course->course_level .' - '. $form_state['values']['location']; //[Course Title] . ' - ' . [Session Name] . ' - ' . [Semester Name] . ' - ' . [Level Name];
    $node->field_course_id[0]['nid']          = $form_state['values']['course_nid'];
    $node->field_lecturer[0]['uid']           = $form_state['values']['chief_staff_nid'];
    $node->field_lecturer_alternate[0]['uid'] = ($form_state['values']['assist_staff_nid'] != 0) ? $form_state['values']['assist_staff_nid'] : NULL;
    $node->field_sess_name[0]['value']        = $_SESSION['eduerp_assign_course_session'];
    $node->field_semester_name[0]['value']    = $_SESSION['eduerp_assign_course_semester'];
    $node->field_repeat[0]['value']           = ($_SESSION['eduerp_assign_course_semester'] == 3) ? 1 : 0;;
    $node->field_location[0]['value']         = $location;
    $node->field_timetable[0]['value']        = $form_state['values']['timetable'];

    //$course_instance = $node->nid;

    drupal_set_message($course->course_code. ' Course has been Assigned!<br />');
  }

  node_save($node);
  if ($_SESSION['eduerp_return_url']) drupal_goto($_SESSION['eduerp_return_url']);

}


function staff_edit_assigned_course_form(){
  $form['#title'] = 'Update Assigned Courses';
 //get all assigned courses for the department
 $assigned = get_Assigned_Courses($_SESSION['eduerp_assign_course_session'], arg(2), $_SESSION['eduerp_assign_course_semester']);
 if (db_affected_rows() > 0) {
   while ($row = db_fetch_object($assigned)){
     if ($row->course_instance_id != "")
       $assignedCourses[$row->course_instance_id] = $row->code;
   }
 }
 else
   $assignedCourses[] = strip_tags(Error_Types(106));

 $form['course_instance_nid'] = array(
      '#type' => 'select',
      '#options' => $assignedCourses,
      '#title' => 'Course Code');
 $form['showCourseAssignment'] = array( //used to keep showing the form
      '#type' => 'hidden',
      '#default_value' => 1
      );
 $form['submit'] = array(
      '#value' => 'Modify Assignment',
      '#type' => 'submit'
    );

  return $form;
}


function staff_edit_assigned_course_form_validate($form, &$form_state) {
  if ($form_state['values']['course_instance_nid'] == '0')
    form_set_error('course_instance_nid', Error_Types(114));
}


function staff_edit_assigned_course_form_submit($form, $form_state) {
  $_SESSION['eduerp_showCourseAssignment'] = 1;
  drupal_goto("staff/createeditcourse/" . arg(2) .'/'. $form_state['values']['course_instance_nid']);
}


function get_Assigned_Courses($session, $department_nid, $semester) {
  $morewhere = "";
  //if ($semester != 0)
  //  $morewhere = "pc.semester='". $semester ."' AND";
  $sql = "SELECT
  ci.nid AS course_instance_id,
  CONCAT(c.field_code_value, IF(ci.field_location_value > 1, CONCAT(' (', CAST(ci.field_location_value AS CHAR), ': ', LEFT(ci.field_timetable_value, 100), ')'), '')) AS code
  FROM {content_type_course} c, {content_type_course_instance} ci
    WHERE
      c.field_department_nid_nid=%d AND
      c.nid=ci.field_course_id_nid AND
      ci.field_sess_name_value='%s' AND
      ci.field_semester_name_value='%s'
      ORDER BY code";
      $r = db_query($sql,$department_nid, $session, $semester);
/*
  $sql = "SELECT DISTINCT
        pc.level course_level,
        c.field_code_value course_code,
        p.field_programme_name_value programme_name,
        d.field_department_name_value dept_name,
        co.field_college_name_value,
        ci.nid nid,
        ci.field_lecturer_uid lecturer_uid,
        field_creditload_value AS credit_load,
        field_prerequisite_codes_value AS prerequisite_codes,
        field_prerequisite_value AS prerequisite_desc,
        pc.semester course_semester,
        field_course_description_value AS course_description,
        field_coursetitle_value AS course_title
      FROM {program_course} pc
      INNER JOIN {content_type_course} c ON pc.course_id=c.nid AND pc.historical=0
      LEFT JOIN {content_type_course_instance} ci
      ON
        c.nid=ci.field_course_id_nid AND
        pc.semester=ci.field_semester_name_value AND
        ci.field_sess_name_value='". $session ."'
      INNER JOIN {content_type_program} p ON pc.programme_id=p.nid
      INNER JOIN {content_type_department} d ON c.field_department_nid_nid=d.nid
      INNER JOIN {content_type_college} co ON d.field_college_id_nid=co.nid
      WHERE " . $morewhere . " d.nid='". $department_nid ."'
      ORDER BY co.field_college_name_value, d.field_department_name_value, c.field_code_value, p.field_programme_name_value, pc.level";*/

    /*
  $r = db_query("SELECT DISTINCT
        ci.nid,
        c.field_code_value course_code

        FROM  {content_type_course} c
      LEFT JOIN {content_type_course_instance} ci
      ON
        c.nid=ci.field_course_id_nid AND
        ci.field_sess_name_value='%s'


      INNER JOIN {content_type_department} d ON c.field_department_nid_nid=d.nid

      WHERE d.nid=%d
      ORDER BY c.field_code_value ", $session, $department_nid);
  */
  return $r;
}


function get_department_running_courses($session, $department_nid, $semester = 0) {
  $morewhere = "";
  if ($semester != 0)
    $morewhere = " pc.semester='". $semester ."' AND ";

  $sql = "SELECT DISTINCT
        pc.level course_level,
        c.field_code_value course_code,
        p.field_programme_name_value programme_name,
        d.field_department_name_value dept_name,
        co.field_college_name_value,
        ci.nid clean_nid,
        ci.field_lecturer_uid lecturer_uid,
        field_creditload_value AS credit_load,
        field_prerequisite_codes_value AS prerequisite_codes,
        field_prerequisite_value AS prerequisite_desc,
        pc.semester course_semester,
        field_course_description_value AS course_description,
        field_coursetitle_value AS course_title,
        c.nid nid
      FROM {program_course} pc
      INNER JOIN {content_type_course} c ON pc.course_id=c.nid AND pc.historical=0
      LEFT JOIN {content_type_course_instance} ci
      ON
        c.nid=ci.field_course_id_nid AND
        pc.semester=ci.field_semester_name_value AND
        ci.field_sess_name_value='". $session ."'
      INNER JOIN {content_type_program} p ON pc.programme_id=p.nid
      INNER JOIN {content_type_department} d ON c.field_department_nid_nid=d.nid
      INNER JOIN {content_type_college} co ON d.field_college_id_nid=co.nid
      WHERE  $morewhere d.nid='". $department_nid ."'
      ORDER BY co.field_college_name_value, d.field_department_name_value, c.field_code_value, p.field_programme_name_value, pc.level ";
  $sql = "SELECT DISTINCT
        pc.level course_level,
        c.field_code_value course_code,
        p.field_programme_name_value programme_name,
        d.field_department_name_value dept_name,
        co.field_college_name_value,
        ci.nid clean_nid,
        ci.field_lecturer_uid lecturer_uid,
        pc.credit_load AS credit_load,
        field_prerequisite_codes_value AS prerequisite_codes,
        field_prerequisite_value AS prerequisite_desc,
        pc.semester course_semester,
        field_course_description_value AS course_description,
        field_coursetitle_value AS course_title,
        c.nid nid
      FROM {program_course} pc
      INNER JOIN {content_type_course} c ON pc.course_id=c.nid AND pc.historical=0
      LEFT JOIN {content_type_course_instance} ci
      ON
        c.nid=ci.field_course_id_nid AND
        pc.semester=ci.field_semester_name_value AND
        ci.field_sess_name_value='". $session ."'
      INNER JOIN {content_type_program} p ON pc.programme_id=p.nid
      INNER JOIN {content_type_department} d ON c.field_department_nid_nid=d.nid
      INNER JOIN {content_type_college} co ON d.field_college_id_nid=co.nid
      WHERE  $morewhere d.nid='". $department_nid ."'
      ORDER BY co.field_college_name_value, d.field_department_name_value, c.field_code_value, p.field_programme_name_value, pc.level ";
    $r = db_query($sql);
  return $r;
}


function get_unassigned_courses($session, $department_nid = 0) {
  // ALAN 20110109 Does not seem to be used, verify and remove
  $where = ""; $args = "";
  if ($department_nid != 0) {
     $where = "
     WHERE k.nid NOT IN (
        SELECT course.field_course_id_nid
    FROM {content_type_course_instance} AS course
    INNER JOIN {content_type_course} AS q ON q.nid = course.field_course_id_nid
    INNER JOIN {content_type_department} AS dept ON q.field_department_nid_nid = dept.nid
    WHERE dept.nid =$department_nid AND course.field_sess_name_value = '". $session ."' )
  AND k.field_department_nid_nid =$department_nid ";
  }

  $sql = "
  SELECT k.nid nid, field_level_value AS course_level, field_code_value AS course_code, field_coursetitle_value AS course_title,
      field_creditload_value AS credit_load, field_prerequisite_value AS prerequisite_desc, field_prerequisite_codes_value AS prerequisite_codes,
      field_semester_value AS course_semester, field_course_description_value AS course_description, field_department_name_value AS dept_name,
      field_college_name_value AS fac_name, field_college_abbreviation_value AS fac_abbr, field_programme_name_value programme_name
      FROM {content_type_course} AS k
      INNER JOIN {content_type_department} AS d ON k.field_department_nid_nid = d.nid
      INNER JOIN {content_type_college} AS c ON d.field_college_id_nid = c.nid
      INNER JOIN {content_type_program} AS p ON p.field_department_id_nid = d.nid
      ". $where ."
      ORDER BY field_college_name_value, dept_name, programme_name, course_level, course_code ";


  $r = db_query($sql);

  return $r;
}


function get_Max_Location_ID($course_nid, $semester, $session) {
  $result = db_query("SELECT IFNULL(MAX(field_location_value), 0) num FROM {content_type_course_instance}
      WHERE field_course_id_nid=%d AND field_semester_name_value='%s' AND field_sess_name_value='%s' ", $course_nid, $semester, $session);
  return $row = db_fetch_object($result);
}


function is_course_assignment_existing($course_nid, $semester, $session, $timetable, $instance_nid = 0, $for_location_checks=false) {
  if ($for_location_checks) {//no need to include timetable
    if ($instance_nid != 0) {
      $result = db_query("SELECT nid FROM {content_type_course_instance}
      WHERE field_course_id_nid=%d AND field_semester_name_value='%s' AND field_sess_name_value='%s' AND nid !=%d ", $course_nid, $semester, $session, $instance_nid);

    }
    else {
      $result = db_query("SELECT nid FROM {content_type_course_instance}
      WHERE field_course_id_nid=%d AND field_semester_name_value='%s' AND field_sess_name_value='%s' ", $course_nid, $semester, $session);
    }

  }
  else {//include timetable
    if ($instance_nid != 0) {
      $result = db_query("SELECT nid FROM {content_type_course_instance}
      WHERE field_course_id_nid=%d AND field_semester_name_value='%s' AND field_sess_name_value='%s' AND nid !=%d AND field_timetable_value = '%s' ", $course_nid, $semester, $session, $instance_nid, $timetable);

    }
    else {
      $result = db_query("SELECT nid FROM {content_type_course_instance}
      WHERE field_course_id_nid=%d AND field_semester_name_value='%s' AND field_sess_name_value='%s'  AND field_timetable_value = '%s' ", $course_nid, $semester, $session, $timetable);
    }
  }
  if (db_affected_rows() > 0) return true;

  return false;

}


function get_Course_Instance($course_instance_nid) {
  $result = db_query("SELECT field_code_value course_code, ci.nid, ci.field_lecturer_uid, ci.field_sess_name_value, ci.field_semester_name_value, ci.field_lecturer_alternate_uid, ci.field_repeat_value, ci.field_course_id_nid,  ci.field_location_value, ci.field_timetable_value
      FROM {content_type_course_instance} ci
      INNER JOIN {content_type_course} c0 ON ci.field_course_id_nid = c0.nid
      WHERE ci.nid=%d ", $course_instance_nid);
  return $result;
}


function staff_create_edit_programme() {
  global $user, $programmeInfo, $canCreateModify, $authorizeEdit;
  $canCreateModify = false;
  //$hideOthers = false;

  if (isset($_SESSION['eduerp_showOn'])) $_POST['showOn'] = 1;
  if (isset($_SESSION['eduerp_showCourseAssignment'])) $_POST['showCourseAssignment'] = 1;
  ob_start();
  echo '<br /><hr /><br />';
  $authorizeEdit = false;

  //check if user is trying to edit record
  if (arg(2) && is_valid_programme(arg(2))) {//the programme is valid
    //get the programme info
    $programmeInfo = db_fetch_object(get_programmes(arg(2)));
    $authorizeEdit = true;$hideOthers=true;
    /*
    if (isset($_POST['showCourseAssignment'])) {
        //allow for some easy navigation
        $navi = "<font size = '1px'><a href = '/staff/semester/'>Semester Administration</a>&nbsp; &raquo; &nbsp;<a href = '/staff/createmodifyprog'>Create/Modify a Programme</a>&nbsp; &raquo; &nbsp;<a href = '/staff/createmodifyprog/". arg(2) ."'>". $programmeInfo->programme_name ." Programme</a>&nbsp; &raquo; &nbsp;<b>Course Assignment</b></font><br /><br />";
        $navi .= '<br /><hr /><br />';
        echo $navi;
        echo show_Specify_Course_for_Programme();
        $hideOthers=true;
    }
    */
    //else {
      //allow for some easy navigation
      $navi = "<font size = '1px'><a href = '/staff/semester/'>Semester Administration</a>&nbsp; &raquo; &nbsp;<a href = '/staff/createmodifyprog'>Create/Modify a University Programme</a>&nbsp; &raquo; &nbsp;Modify Programme: <b>". $programmeInfo->programme_name . ' ('. $programmeInfo->programme_abbr . ')' ."</b></font><br /><br />";
      $navi .= '<br /><hr /><br />';

      if (! isset($_POST['showOn'])) {
        echo $navi;
        echo "<b>Modify Programme...Step 1 of 2</b> - Please make all required changes<br /><br />";
        echo drupal_get_form('staff_create_programme_form');
        //$hideOthers = true;
      }
      else {
        echo $navi;
        echo drupal_get_form('staff_create_programme_back_form') . "<br />";
        echo "<b>Modify Programme continued...Step 2 of 2</b> - Please make all required changes<br /><br />";
        if (isset($_POST['showOn'])) {
          echo "Programme Name: <b>" . $_SESSION['eduerp_bkinfo']->programme_name . "</b><br /><br />";
          echo "Programme Duration: <b>" . $_SESSION['eduerp_bkinfo']->duration . "</b><br />";
        }
        echo drupal_get_form('staff_create_programme_form2') . "<br />";
        echo drupal_get_form('staff_create_programme_back_form') . "<br />";
        //echo drupal_get_form('staff_create_programme_cancel_form');
      }
    //}
  }
  else { //not in edit mode

    //allow for some easy navigation
    echo "<font size = '1px'><a href = '/staff/semester'>Semester Administration</a>&nbsp; &raquo; &nbsp;Create/Modify a Programme</font><br /><br />";
    echo '<br /><hr /><br /><br />';

    if (! isset($_POST['showOn'])) {
      echo "<b>Create Programme...Step 1 of 2</b> - Please fill the form<br /><br />";
      echo drupal_get_form('staff_create_programme_form');
    }
    else {
      echo drupal_get_form('staff_create_programme_back_form') . "<br />";
      echo "<b>Create Programme continued...Step 2 of 2</b> - Please fill the form<br /><br />";
      if (isset($_POST['showOn'])) {
        echo "Programme Name: <b>" . $_SESSION['eduerp_bkinfo']->programme_name . "</b><br /><br />";
        echo "Programme Duration: <b>" . $_SESSION['eduerp_bkinfo']->duration . "</b><br />";

      }
      echo drupal_get_form('staff_create_programme_form2') . "<br />";
      echo drupal_get_form('staff_create_programme_back_form') . "<br />";
      //echo drupal_get_form('staff_create_programme_cancel_form');
    }

      echo '<br /><hr /><br />';
      echo "<b>Modify Programme</b> - Select a Programme to modify it<br /><br />";
      echo drupal_get_form('staff_modify_programme_form');

      echo '<br /><hr /><br />';
      echo '<b>Specify Courses for a Programme</b> - Click to proceed with specifying course for a programme<br /><br />';
      echo drupal_get_form('staff_specify_course_proceed_form');


      echo '<br /><hr /><br />';
      echo '<b>Verify all Courses needed for a Programme are being run for a Semester - Click to proceed with verifying courses<br /><br />';
      echo drupal_get_form('staff_verify_course_proceed_form');

      //display existing programmes here
      echo '<br /><hr /><br />';
      echo staff_display_available_programmes($programmeInfo);
  }


  unset($_SESSION['eduerp_showOn']); unset($_SESSION['eduerp_goBack']);

  return ob_get_clean();

}


function staff_create_programme_form() {
  global $authorizeEdit, $programmeInfo;

 //i am now using global variables as u can see above. Before getting here (for editing), most checks have been done. lets not do anymore db calls hmmm..
 if (isset($_SESSION['eduerp_goBack']) && $_SESSION['eduerp_bkinfo']) {$programme = $_SESSION['eduerp_bkinfo']; }

  if ($authorizeEdit) {
    if (empty($_POST['programme_name'])) {//trying to edit
      //check if data exists in program_level_semester
      if($_SESSION['eduerp_bkinfo'])
        $programme = $_SESSION['eduerp_bkinfo'];
      else
        $programme = $programmeInfo; //$_SESSION['eduerp_bkinfo']; //$programmeInfo;
      //ok fine we need to get the previous start_level that was set

      $result = db_query("SELECT * FROM {program_level_semester} WHERE programme_id = %d ORDER BY level ",arg(2));
      if (db_affected_rows($result) > 0) {
        $row = db_fetch_object($result);
        $programmeInfo->start_level = $row->level;
      }

    }
  }

  $form['#title'] = 'Create New Programme';
  $form['programme_name'] = array(
    '#title' => 'Programme Name',
    '#type' => 'textfield',
    '#size' => 100,
    '#required' => TRUE
  );
  if ($programme) $form['programme_name']['#default_value'] = $programme->programme_name;

  $form['programme_abbr'] = array(
    '#type' => 'textfield',
    '#title' => 'Programme Abbreviation',
    '#required' => TRUE
  );
  if ($programme) $form['programme_abbr']['#default_value'] = $programme->programme_abbr;

  //during modification, department_nid should not be changed so lets deal with it
  if ($programme) {//for modification
    $id = $programme->department_nid;
  }
  else {
    $id = 0;
  }

  $form['department_nid'] = array(
    '#type' => 'select',
    '#options' => department($id),
    '#title' => 'Department');
  if ($programme) $form['department_nid']['#default_value'] = $programme->department_nid;

  $form['duration'] = array(
    '#title' => 'Programme Duration - Duration in years of this programme e.g. 4',
    '#type' => 'textfield',
    '#size' => 2,
    '#required' => TRUE
  );
  if ($programme) $form['duration']['#value'] = $programme->duration;

  $form['max_duration'] = array(
    '#title' => 'Maximum Duration - Maximum semesters a student may spend completing this programme e.g. 12',
    '#type' => 'textfield',
    '#size' => 2,
    '#required' => TRUE
  );
  if ($programme) $form['max_duration']['#value'] = $programme->max_duration;

  $form['min_credit_load'] = array(
    '#title' => 'Minimum Credit Load - Minimum completed credit load before graduation',
    '#type' => 'textfield',
    '#size' => 4,
    '#required' => TRUE
  );
  if ($programme) $form['min_credit_load']['#value'] = $programme->min_credit_load;

  $form['programme_type'] = array(
    '#type' => 'select',
    '#options' => programme_types(),
    '#title' => 'Programme Type',
    '#required' => TRUE);
  if ($programme) $form['programme_type']['#default_value'] = $programme->programme_type;

  $form['start_level'] = array(
    '#type' => 'select',
    '#options' => array(100 => '100', 1 => '1'),
    '#title' => 'Start Level',
    '#required' => TRUE);
  if ($programme) $form['start_level']['#default_value'] = $programme->start_level;


  $form['submit'] = array(
    '#value' => 'Continue',
    '#type' => 'submit'
  );
  if ($authorizeEdit || isset($_POST['showOn'])) $form['submit']['#value'] = 'Continue Update Programme';

  return $form;

}


function staff_create_programme_form_validate($form, &$form_state) {
  global $user;
  unset($_SESSION['eduerp_bkinfo']);
  //make sure he can create/modify
  if (staff_has_eduerp_role($user->uid, $form_state['values']['department_nid'], 0, array('Head of Department', 'Department Examination Officer'))) {

    //make sure no duplicates
    if (arg(2)) {//validate EDIT
      if (is_Programme_Name_Existing($form_state['values']['programme_name'], arg(2)))
        form_set_error('programme_name', Error_Types(101));

      if (is_Programme_Abbr_Existing($form_state['values']['programme_abbr'], arg(2)))
        form_set_error('programme_abbr', Error_Types(120));
    }
    else {//validate CREATE
      if (is_Programme_Name_Existing($form_state['values']['programme_name']))
        form_set_error('programme_name', Error_Types(115));

      if (is_Programme_Abbr_Existing($form_state['values']['programme_abbr']))
        form_set_error('programme_abbr', Error_Types(120));
    }

    //validate for int entry

    if(! preg_match("/^[0-9]{1,2}$/", trim($form_state['values']['duration'])) || $form_state['values']['duration'] <= 0) form_set_error('duration', Error_Types(107));


    if(! preg_match("/^[0-9]{1,2}$/", trim($form_state['values']['max_duration'])) || $form_state['values']['max_duration'] <= 0) form_set_error('max_duration', Error_Types(107));


    if(! preg_match("/^[0-9]{1,3}$/", trim($form_state['values']['min_credit_load'])) || $form_state['values']['min_credit_load'] <= 0) form_set_error('min_credit_load', Error_Types(107));

  }
  else
    form_set_error('department_nid', Error_Types(117));

}


function staff_create_programme_form_submit($form, &$form_state) {

  //the form has been validated. put all in a session variable and show the next form
  $_SESSION['eduerp_showOn'] = 1; $_POST['showOn'] = 1;
  foreach ($form_state['values'] as $k  => $v)
    $bkinfo->{$k} = $v;

  $_SESSION['eduerp_bkinfo'] = $bkinfo;

}


function staff_create_programme_form2() {
  global $authorizeEdit;
  if (isset($_SESSION['eduerp_bkinfo'])) {

    $form['#title'] = 'Create New Programme continued...';
    if ($authorizeEdit && empty($_POST['credit_desc11'])) {
      //check if previous rec exists in program_level_semester table
      $result = db_query("SELECT * FROM {program_level_semester} WHERE programme_id = %d ORDER BY level", arg(2));
      if (db_affected_rows($result) > 0 && db_affected_rows($result) ==  ($_SESSION['eduerp_bkinfo']->duration * 2)) {
        //the record is up for edit and the user did not change the duration. so show whats in the db as defaults
        if (strlen($_SESSION['eduerp_bkinfo']->start_level) > 1) $mul = 100; else $mul = 1;$id=$mul;$g=1;
        while($row = db_fetch_object($result)) {
          $credit_desc[$id][$row->semester] = $row->min_credit_load .', '. $row->max_credit_load;
          if ($g >= 2) {$id += $mul; $g=1;} else $g++;
        }
      }
    }

    for ($i = 1; $i <= $_SESSION['eduerp_bkinfo']->duration; $i++) {
      for ($p = 1; $p <= 2; $p++) {
        $form['credit_desc'.$i.$p] = array(
          '#title' => 'Level '. $i * $_SESSION['eduerp_bkinfo']->start_level .', Semester '. $p .':<br /> Minimum and Maximum Credit Load a Student is allowed select when Registering Courses for this Semester. Note: (The Min and Max must be separated by \', \' e.g. 10,60) ',
          '#type' => 'textfield',
          '#size' => 10,
          '#required' => TRUE
        );
        if ($credit_desc) $form['credit_desc'.$i.$p]['#default_value'] = $credit_desc[$i * $_SESSION['eduerp_bkinfo']->start_level][$p];

      }

    }
   $form['showOn'] = array(//keep showing the form
    '#title' => 'Show On',
    '#type' => 'hidden',
    '#default_value' => 1
  );

    $form['submit'] = array(
      '#value' => 'Create Programme',
      '#type' => 'submit'
    );
    if ($authorizeEdit) $form['submit']['#value'] = 'Update Programme';
    return $form;
  }
}


function staff_create_programme_form2_validate($form, &$form_state) {

  for ($i = 1; $i <= $_SESSION['eduerp_bkinfo']->duration; $i++) {
      for ($p = 1; $p <= 2; $p++) {
        if (strpos($form_state['values']['credit_desc'.$i.$p], ",")) {
          $prog_credit_load = explode(',', $form_state['values']['credit_desc'.$i.$p]);
          if (sizeof($prog_credit_load) != 2) form_set_error('credit_desc'.$i.$p, Error_Types(118)); //not in expected format

          else {//check each to match int
            foreach ($prog_credit_load as $v) {
                if(! preg_match("/^[0-9]{1,3}$/", trim($v))) form_set_error('credit_desc'.$i.$p, Error_Types(107));
            }
            if ($prog_credit_load[0] > $prog_credit_load[1]) form_set_error('credit_desc'.$i.$p, Error_Types(119)); //min shld not b greater than max
          }
        }
        else{
          form_set_error('credit_desc'.$i.$p, Error_Types(118)); //not in expected format

        }

      }
    }
}


function staff_create_programme_form2_submit($form, &$form_state) {

  if(arg(2)){
    $node =  node_load(arg(2));
    $node->title                            = $_SESSION['eduerp_bkinfo']->programme_name;
    $node->field_programme_name[0]['value'] = $_SESSION['eduerp_bkinfo']->programme_name;
    $node->field_programme_abbr[0]['value'] = $_SESSION['eduerp_bkinfo']->programme_abbr;
    $node->field_department_id[0]['nid']    = $_SESSION['eduerp_bkinfo']->department_nid;
    $node->field_duration[0]['value']       = $_SESSION['eduerp_bkinfo']->duration;
    $node->field_max_duration[0]['value']   = $_SESSION['eduerp_bkinfo']->max_duration;
    $node->field_min_credit_load_program[0]['value'] = $_SESSION['eduerp_bkinfo']->min_credit_load;
    $node->field_program_type[0]['value']   = $_SESSION['eduerp_bkinfo']->programme_type;

    node_save($node);
    drupal_set_message($_SESSION['eduerp_bkinfo']->programme_name .' Programme was updated!<br />');
    //delete all entries reping the programme.
    db_query("DELETE FROM program_level_semester WHERE programme_id = '". arg(2) ."'");

    //insert program_level_semester
    if (isset($_SESSION['eduerp_bkinfo'])) {
      $sql = "INSERT INTO program_level_semester (programme_id, level, semester, min_credit_load, max_credit_load, open_for_registrations) VALUES  ";
      for ($i = 1; $i <= $_SESSION['eduerp_bkinfo']->duration; $i++) {
        for ($p = 1; $p <= 2; $p++) {
          $prog_credit_load = explode(',', $form_state['values']['credit_desc'.$i.$p]);
            $level = $_SESSION['eduerp_bkinfo']->start_level * $i;
            $sql .= "('". arg(2) ."', '". $level ."', '". $p ."', '". trim($prog_credit_load[0]) ."', '". trim($prog_credit_load[1]) ."', 0), ";
        }

      }
      $sql = substr($sql, 0, -2);
      db_query($sql);
      unset($_SESSION['eduerp_bkinfo']);
    }

    drupal_goto("staff/createmodifyprog");
  }
  else {

    // program CCK
    $node = new stdClass();
    $node->type                             = 'program';
    $node->uid                              = 1;  // Admin
    $node->status                           = 1;  // Published
    $node->promote                          = 0;
    $node->sticky                           = 0;
    $node->comment                          = 0;
    $node->title                            = $_SESSION['eduerp_bkinfo']->programme_name;
    $node->field_programme_name[0]['value'] = $_SESSION['eduerp_bkinfo']->programme_name;
    $node->field_programme_abbr[0]['value'] = $_SESSION['eduerp_bkinfo']->programme_abbr;
    $node->field_department_id[0]['nid']    = $_SESSION['eduerp_bkinfo']->department_nid;
    $node->field_duration[0]['value']       = $_SESSION['eduerp_bkinfo']->duration;
    $node->field_max_duration[0]['value']   = $_SESSION['eduerp_bkinfo']->max_duration;
    $node->field_min_credit_load_program[0]['value'] = $_SESSION['eduerp_bkinfo']->min_credit_load;
    $node->field_program_type[0]['value']   = $_SESSION['eduerp_bkinfo']->programme_type;
    node_save($node);
    $programme_nid = $node->nid;
    drupal_set_message($_SESSION['eduerp_bkinfo']->programme_name .' Programme was created!<br />');

    //insert into program_level_semester
    if (isset($_SESSION['eduerp_bkinfo'])) {
      $sql = "INSERT INTO program_level_semester (programme_id, level, semester, min_credit_load, max_credit_load, open_for_registrations) VALUES  ";
      for ($i = 1; $i <= $_SESSION['eduerp_bkinfo']->duration; $i++) {
        for ($p = 1; $p <= 2; $p++) {
          $prog_credit_load = explode(',', $form_state['values']['credit_desc'.$i.$p]);
            $level = $_SESSION['eduerp_bkinfo']->start_level * $i;
            $sql .= "('". $programme_nid ."', '". $level ."', '". $p ."', '". trim($prog_credit_load[0]) ."', '". trim($prog_credit_load[1]) ."', 0), ";
        }

      }
      $sql = substr($sql, 0, -2);
      db_query($sql);
      unset($_SESSION['eduerp_bkinfo']);
    }
  }

}


function staff_create_programme_back_form() {
  //$form['#title'] = 'Create New Programme Back';
  $form['showOn'] = array(//keep showing the form
    '#title' => 'Show On',
    '#type' => 'hidden',
    '#default_value' => 1
  );

  $form['submit'] = array(
      '#value' => 'go Back',
      '#type' => 'submit'
    );

    return $form;
}


function staff_create_programme_back_form_validate($form, &$form_state) {
  $_SESSION['eduerp_goBack'] = 1;
}


function staff_create_programme_back_form_submit($form, &$form_state) {
  $_SESSION['eduerp_goBack'] = 1;
}


function staff_create_programme_cancel_form() {
  $form['#title'] = 'Create New Programme Cancel';
  $form['submit'] = array(
      '#value' => 'Cancel',
      '#type' => 'submit'
    );

    return $form;
}


function staff_create_programme_cancel_form_submit($form, &$form_state) {
  ;

}


function programme_types() {
 return array(1 => 'Full Time Undergraduate', 2 => 'Part Time Undergraduate', 3 => 'Medicine Type Grades', '-1' => 'Closed to new entrants, Full Time Undergraduate', '-2' => 'Closed to new entrants, Part Time Undergraduate', '-3' => 'Closed to new entrants, Medicine Type Grades');
}


function staff_modify_programme_form(){
  $form['#title'] = 'Modify Programme';


    $form['programme_nid'] = array(
      '#type' => 'select',
      '#options' => programme(),
      '#title' => 'Programme Name');

    $form['submit'] = array(
      '#value' => 'Modify Programme',
      '#type' => 'submit'
    );


  return $form;
}


function staff_modify_programme_form_validate($form, &$form_state) {
  global $user;
  unset($_SESSION['eduerp_bkinfo']);
  //get the department attached to the programme
  $program = get_programmes($form_state['values']['programme_nid']);
  if (db_affected_rows($program) > 0) {
    $programInfo = db_fetch_object($program);
    if (staff_has_eduerp_role($user->uid, $programInfo->department_nid, 0, array('Head of Department', 'Department Examination Officer'))) {
      $authorizeEdit = true;

    }
    else
      form_set_error('programme_nid', Error_Types(121));
  }
  else
    form_set_error('programme_nid', Error_Types(114));
}


function staff_modify_programme_form_submit($form, &$form_state) {
  drupal_goto("staff/createmodifyprog/" . $form_state['values']['programme_nid']);
}


function staff_specify_course_for_programme() {
  global $user, $programmeInfo, $canCreateModify, $progCourse;
  ob_start();
  $programmeInfo = db_fetch_object(get_programmes(arg(2)));
  $canCreateModify = false;

  if (! arg(2) || ! is_valid_programme(arg(2)))
    drupal_goto("/staff/createmodifyprog");

  if (staff_has_eduerp_role($user->uid, $programmeInfo->department_nid, 0, array('Head of Department', 'Department Examination Officer')))
    $canCreateModify = true;
  if (arg(3)) {
    if (! is_valid_programme_course_id(arg(2), arg(3)))
      drupal_goto("/staff/specifycourse/". arg(2));
    else {
        $sql = "SELECT course_id, programme_id, level, semester, course_type, lecturer_id  FROM {program_course} WHERE program_course_id=%d";
        $sql = "SELECT course_id, programme_id, level, semester, course_type, lecturer_id, credit_load FROM {program_course} WHERE program_course_id=%d";
        $rs = db_query($sql, arg(3));
        $progCourse = db_fetch_object($rs);

    }
  }

  $arg = arg(2);

  $delete_assignment_js =<<< EOD
  function delete_assignment(id) {

    if (confirm('Are you sure you want to delete this course assignment?')) {
      $.get('/staff/ajax/deleteassignprog/'+id, function(data) { location.href='/staff/specifycourse/$arg'; });
    }
  }


  function make_available(id) {
    if (confirm('Are you sure you want to make the Course available for New Registrations?')) {
      $.get('/staff/ajax/makeavailable/'+id, function(data) { location.href='/staff/specifycourse/$arg'; });
    }
  }
  function edit_assignment(id) {
      $.get('/staff/ajax/modifyassignprog/'+id, function(data) { location.href='/staff/specifycourse/$arg/'+id; });
  }
EOD;


  drupal_add_js($delete_assignment_js, 'inline');

  echo '<br /><hr /><br />';
  if (arg(3)) {
    $navi = "<font size = '1px'><a href = '/staff/semester/'>Semester Administration</a>&nbsp; &raquo; &nbsp;<a href = '/staff/createmodifyprog'>Create/Modify a Programme</a>&nbsp; &raquo; &nbsp;<a href='/staff/specifycourse/". arg(2) ."'>Specify Course(s): <b>". $programmeInfo->programme_name ."</b> Programme</a>&nbsp; &raquo; &nbsp;Edit Course</font><br /><br />";
    $navi .= '<br /><hr /><br />';
    echo $navi;
    echo "<b>Modify Specified Course(s) for Programme</b> | Programme: <b>". $programmeInfo->programme_name ."</b><br /><br />"; //. variable_get('eduerp_current_session', '') ."</b> | Semester: <b>". variable_get('eduerp_current_semester', '') ."</b><br /><br />";
  }
  else {
    $navi = "<font size = '1px'><a href = '/staff/semester/'>Semester Administration</a>&nbsp; &raquo; &nbsp;<a href = '/staff/createmodifyprog'>Create/Modify a Programme</a>&nbsp; &raquo; &nbsp;Specify Course(s): <b>". $programmeInfo->programme_name ."</b> Programme</font><br /><br />";
    $navi .= '<br /><hr /><br />';
    echo $navi;
    echo "<b>Specify Course(s) for Programme</b> | Programme: <b>". $programmeInfo->programme_name ."</b><br /><br />"; // variable_get('eduerp_current_session', '') ."</b> | Semester: <b>". variable_get('eduerp_current_semester', '') ."</b><br /><br />";

  }

  //echo "Below is a list of all availabel Course(s) that belong to <b>". $programmeInfo->department_name ."</b> Department.<br /><br />";

  if ($canCreateModify)
    echo drupal_get_form('staff_assign_course_to_programme_form');
  else
    echo Error_Types(104);


  if(! arg(3)) {

    $runningCourse = get_programme_running_courses ($programmeInfo->programme_nid, variable_get('eduerp_current_session', ''), variable_get('eduerp_current_semester', '') );
    echo '<br /><hr /><br />';
    echo "<b>List of courses that need to be run this semester for ". $programmeInfo->programme_name  ." Programme</b><br/><br />";
    echo "<div id='assigned_courses'>";
    //show_running_courses($runningCourse);
    //drupal_set_message($programmeInfo->programme_nid);
    //course_specify_list($programmeInfo->programme_nid);
    course_specify_list($runningCourse);
    echo "</div>";

    echo '<br /><hr /><br />';
    echo "<b>Historical Courses not available for New Registrations</b><br/><br />";
    echo "<div id='assigned_courses'>";
    historical_course_list($programmeInfo->programme_nid);
    echo "</div>";
  }
  return ob_get_clean();
}


function staff_verify_assigned_course() {
  global $user, $all_sessions, $programmeInfo;
  ob_start();

  if (! arg(2) || ! is_valid_programme(arg(2)))
    drupal_goto("/staff/createmodifyprog");

  $all_sessions = get_all_sessions();
  $programmeInfo = db_fetch_object(get_programmes(arg(2)));
  echo '<br /><hr /><br />';
    $navi = "<font size = '1px'><a href = '/staff/semester/'>Semester Administration</a>&nbsp; &raquo; &nbsp;<a href = '/staff/createmodifyprog'>Create/Modify a Programme</a>&nbsp; &raquo; &nbsp;Verified Assigned Course(s): <b>". $programmeInfo->programme_name ."</b> Programme</font><br /><br />";
    $navi .= '<br /><hr /><br />';
    echo $navi;
    echo "<b>Verify all Courses needed for a Programme are being run for</b> | Session: <b>". $_SESSION['eduerp_verify']['session'] ."</b> | Semester: <b>". $_SESSION['eduerp_verify']['semester'] ."</b> | Programme: <b>". $programmeInfo->programme_name ."</b><br /><br />"; //. variable_get('eduerp_current_session', '') ."</b> | Semester: <b>". variable_get('eduerp_current_semester', '') ."</b><br /><br />";

    echo '<br /><hr /><br />';
    //run the verify code
    verify_assigned_courses($programmeInfo->programme_nid, $_SESSION['eduerp_verify']['session'], $_SESSION['eduerp_verify']['semester']);

    //test to see if all courses for the programme have been assigned
    $unassignedRecords = get_unassigned_for_programme($programmeInfo->programme_nid, $_SESSION['eduerp_verify']['session'], $_SESSION['eduerp_verify']['semester']);
    if (db_affected_rows($unassignedRecords) > 0) {
      //there are unassigned courses

      echo "<b>List of Missing Courses for <b>". $programmeInfo->programme_name  ."</b> Programme for ". $_SESSION['eduerp_verify']['session'] ." Session for Semester ". $_SESSION['eduerp_verify']['semester'] ."</b><br/><br />";
      echo "<div id='assigned_courses'>";
      display_course_result($unassignedRecords, true);
      echo "</div>";
      echo '<br /><hr /><br />';
    }
    else
      echo "<b>All Courses for ". $programmeInfo->programme_name ." HAVE BEEN VERIFIED (assigned a lecturer & timetable) for <b>". $_SESSION['eduerp_verify']['session'] ." Session</b> and <b>Semester ". $_SESSION['eduerp_verify']['semester'] ."</b>!!!</b><br /><br /><br /><hr /><br />";

    //test for unassigned courses for the programme
    $runningCourse = get_programme_running_courses ($programmeInfo->programme_nid, $_SESSION['eduerp_verify']['session'], $_SESSION['eduerp_verify']['semester']);

      echo "<b>List of Courses that need to be run for <b>". $programmeInfo->programme_name  ."</b> Programme for ". $_SESSION['eduerp_verify']['session'] ." Session for Semester ". $_SESSION['eduerp_verify']['semester'] ."</b><br/><br />";
      echo "<div id='assigned_courses'>";
      display_course_result($runningCourse);
      echo "</div><br /><br />";

      unset($_SESSION['eduerp_return_url']);
  return ob_get_clean();
}


function verify_assigned_courses($programme_nid, $session, $semester) {

  db_query("DELETE FROM {program_course_instance} WHERE session='%s' AND semester='%s' AND programme_id=%d", $session, $semester, $programme_nid);
   $sql = "INSERT INTO {program_course_instance}
     SELECT DISTINCT
       ci.nid AS course_instance_id,
       pc.programme_id AS programme_id,
       ci.field_sess_name_value AS session,
       ci.field_semester_name_value AS semester
     FROM {program_course} pc
     INNER JOIN {content_type_course} c ON pc.course_id=c.nid AND pc.historical=0
     INNER JOIN {content_type_course_instance} ci
     ON
       c.nid=ci.field_course_id_nid AND
       pc.semester=ci.field_semester_name_value AND
       ci.field_sess_name_value='%s' AND
       ci.field_semester_name_value='%s'
     WHERE pc.programme_id=%d";
   $result = db_query($sql, $session, $semester, $programme_nid);

}


function show_verified_assigned_courses(&$result) {
  // ALAN 20110109 Does not seem to be used, verify and remove

  $html = "
  <table border ='1'>
    <tr>
      <th>#</th>
    <th>Course Title</th>
    <th>Course Code</th>
    <th>level</th>
    <th>Credit Load</th>
    <th>Prerequisites Codes</th>
    <th>Prerequisites Description</th>
    <th>Course Semester</th>
    </tr>";$i=1;
  while ($f = db_fetch_object($result)) {
    if ($i%2) $rcolor = "#E5E5E5"; else $rcolor = "#FFFFFF";
    //$course_type = array('1' => 'Core', 2 => 'Elective');$i++;
    $html .="
    <tr bgcolor = \"$rcolor\" onMouseOver = \"this.bgColor = '#FDD381';\" onMouseOut = \"this.bgColor = '$rcolor';\">
      <td>". $i++ ."</td>
      <td>". $f->course_title ."</td>
      <td>". $f->course_code ."</td>
      <td>". $f->level ."</td>
      <td>". $f->credit_load ."</td>
      <td>". $f->Prerequisites_codes ."</td>
      <td>". $f->Prerequisites_description ."</td>
      <td>". $f->course_semester ."</td>

   </tr>";
  }
  $html .="
  </table>";
  echo $html;
}


function get_programme_running_courses ($programme_nid, $session, $semester) {

   $sql = "SELECT DISTINCT
        pc.level,
        c.field_code_value course_code,
        p.field_programme_name_value programme_name,
        d.field_department_name_value department_name,
        co.field_college_name_value faculty_name,
        pc.semester AS semester,
        pc.course_type,
        CONCAT( c.field_coursetitle_value, ' (', field_code_value  ,')') AS course_title,
        pc.credit_load AS credit_load,
        field_creditload_value old_credit_load,
        field_course_description_value course_description,
        field_prerequisite_codes_value prerequisites_codes,
        field_prerequisite_value prerequisites_description,
        pc.program_course_id,
        if(ci.nid IS NULL, NULL, 1) AS clean_nid
      FROM {program_course} pc
      INNER JOIN {content_type_course} c ON pc.course_id=c.nid AND pc.historical=0
      LEFT JOIN {content_type_course_instance} ci
      ON
        c.nid=ci.field_course_id_nid AND
        pc.semester=ci.field_semester_name_value AND
        ci.field_sess_name_value='%s'
      INNER JOIN {content_type_program} p ON pc.programme_id=p.nid
      INNER JOIN {content_type_department} d ON c.field_department_nid_nid=d.nid
      INNER JOIN {content_type_college} co ON d.field_college_id_nid=co.nid
      WHERE pc.semester='%s' AND p.nid=%d
      ORDER BY co.field_college_name_value, d.field_department_name_value, c.field_code_value, p.field_programme_name_value, pc.level";
    $result = db_query($sql, $session, $semester, $programme_nid);
    //drupal_set_message($param['session']);
  return $result;
}


function display_course_result(&$result, $formissing = false) {
  global $programmeInfo;
  $department_nid = $programmeInfo->department_nid;
  $programme_nid = $programmeInfo->programme_nid;

   $delete_assignment_js =<<< EOD
function fix_course(id) {
  if (confirm('Proceed to fixing problem?')) {
    $.get('/staff/ajax/fix_course/$programme_nid/'+id, function(data) { location.href='/staff/createeditcourse/$department_nid'; });
  }
}
EOD;
  drupal_add_js($delete_assignment_js, 'inline');

  $html = "
  <table border ='1'>
    <tr>
      <th>#</th>
      <th>Level</th>
      <th>Course Code</th>
      <th>Department</th>";
    if ($formissing)
      $html .= "<th>Action</th>";

  $html .="

    </tr>";$i=1; $found = false;
  while ($f = db_fetch_object($result)) {
    if ($i%2) $rcolor = "#E5E5E5"; else $rcolor = "#FFFFFF";
    //check for course to be highlighted in red
    if ($f->clean_nid == "") {
      $found = true;
      $rowColor = "color='#FF0000'";

    }
    else
      $rowColor = "color='#000000'";


    $html .="
    <tr bgcolor = \"$rcolor\" onMouseOver = \"this.bgColor = '#FDD381';\" onMouseOut = \"this.bgColor = '$rcolor';\">
      <td><font $rowColor >". $i++ ."</font></td>
      <td><font $rowColor >". $f->level ."</font></td>
      <td><font $rowColor >". $f->course_code ."</font></td>
      <td><font $rowColor >". $f->department_name ."</font></td>";
      if ($formissing) {
        $html .= "<td><input type='button' class='delete_btn' value='Fix Problem' onClick=\"fix_course({$f->program_course_id});\" /></td>";

      }
      $html .= "
   </tr>";
  }
  $html .="
  </table><br />";
  if ($found)
    $html .= "<b><font color='#ff0000'>Note: The HODs for the course(s) highlighted in Red above will have to assign a lecturer for the course(s) for this semester<br />
       If you are the HOD for those courses, you will be able to fix the problem yourself.<br />In any case, when the problem is resolved, you MUST come back to this screen to complete verification!</font></b>";
  echo $html;
}


function staff_assign_course_to_programme_form() {
  global $programmeInfo, $progCourse;

  if ($progCourse && ! preg_match("/^[0-9]{1,12}$/", $_POST['level'])) {
    $prog_course = $progCourse;
  }
  $levels = get_levels_from_programme_level_semester($programmeInfo->programme_nid);
  if (sizeof($levels) <= 1) drupal_set_message(Error_Types(122));

  //we want to put the courses of the department at the top and then others will follow
  //$departmentCourses = staff_course($programmeInfo->department_nid);
  //$nonedepartmentCourses = staff_course($programmeInfo->department_nid, true);
  //merge the two
  //$allcourses = $departmentCourses + $nonedepartmentCourses;

  $form = array(
    '#theme' => 'form_panel_table',
    '#form_panel_table_attributes' => array('border' => 0));
  $form['title_test'] = array(
    '#type' => 'item',
    '#value' => '<b>Course</b>',
    '#required' => TRUE,
    '#form_panel_col' => 1,
    '#form_panel_row' => 1);

  $form['programme_id'] = array(
    '#type' => 'select',
    '#options' => array($programmeInfo->programme_nid => $programmeInfo->programme_name), //staff_prg(),
    '#title' => 'Programme',
    '#attributes' => array(
      'style' => 'width:100px'),
    '#required' => TRUE,
    '#form_panel_col' => 1,
    '#form_panel_row' => 2);
  if(isset($prog_course)) $form['title_test']['#default_value'] = $prog_course->programme_id;

  $form['level'] = array(
    '#type' => 'select',
    '#options' => array('' => '' ) + $levels, //staff_level(),
    '#title' => 'Level',
    '#required' => TRUE,
    '#ahah' => array('path' => 'staff/ajax/course', 'event' => 'change', 'method' => 'replace', 'wrapper' => 'courses'),
    '#form_panel_col' => 2,
    '#form_panel_row' => 2);
  if(isset($prog_course)) $form['level']['#default_value'] = $prog_course->level;

  $form['semester'] = array(
    '#type' => 'select',
    '#title' => 'Semester',
    '#required' => TRUE,
    '#options' => get_semester_from_programme_level_semester($programmeInfo->programme_nid),
    '#form_panel_col' => 3,
    '#form_panel_row' => 2);
  if(isset($prog_course)) $form['semester']['#default_value'] = $prog_course->semester;

  $form['course_id'] = array(
    '#type' => 'select',
    '#title' => 'Course Code',
    '#options' => staff_course(),
    '#attributes' => array(
      'style' => 'width:100px'),
    '#prefix' => "<div id='courses'>",
    '#suffix' => "</div>",
    '#required' => TRUE,
    '#disabled' => TRUE,
    '#form_panel_col' => 4,
    '#form_panel_row' => 2);
  if(isset($prog_course)) {$form['course_id']['#default_value'] = $prog_course->course_id; $form['course_id']['#disabled'] = FALSE; }

  $form['course_type_id'] = array(
    '#type' => 'select',
    '#options' => array( 1 => 'Core', 2 => 'Elective'),
    '#title' => 'Course Type',
    '#required' => TRUE,
    '#form_panel_col' => 5,
    '#form_panel_row' => 2);
  if(isset($prog_course)) $form['course_type_id']['#default_value'] = $prog_course->course_type;

  $form['credit_load'] = array(
    '#type' => 'textfield',
    '#title' => 'Credit Load',
    '#size' => 3,
    '#form_panel_col' => 6,
    '#form_panel_row' => 2);
  if(isset($prog_course)) $form['credit_load']['#default_value'] = $prog_course->credit_load;

  $form['user_id'] = array(
    '#type' => 'select',
    '#options' => array('' => '' ) + get_Staff_in_Department(), //lecturer(),
    '#title' => 'Lecturer',
    '#required' => FALSE,
    '#form_panel_col' => 7,
    '#form_panel_row' => 2);
  if(isset($prog_course)) $form['user_id']['#default_value'] = $prog_course->lecturer_id;

  $form['explain'] = array(
    '#type' => 'item',
    '#value' => 'If Credit Load is not specified, it will be taken from the selected Course. Lecturer can be specified later or when courses are verified for a semester.',
    '#form_panel_col' => 1,
    '#form_panel_row' => 4);

  if (sizeof($levels) > 1) {
    $form['jambsubn'] = array(
      '#id' => 'edit-next',
      '#value' => 'Add',
      '#type' => 'submit',
      '#form_panel_col' => 1,
      '#form_panel_row' => 5);
    if(arg(3)) $form['jambsubn']['#value'] = "Update";;
  }
  $form['sep'] = array(
    '#type' => 'item',
    '#value' => '',
    '#form_panel_col' => 1,
    '#form_panel_row' => 6);

  return $form;
}


function staff_assign_course_to_programme_form_validate($form, &$form_state) {
 $values = $form_state['values'];

  if (empty($values['level']))
   form_set_error('level', Error_Types(114));

  if (empty($values['semester']))
   form_set_error('semester', Error_Types(114));

  //make sure the course does not exists for the same program/level/semester
  if (arg(3)) {
    $rs = db_query("SELECT program_course_id FROM {program_course} WHERE course_id=%d AND programme_id=%d AND level='%s' AND semester='%s' AND program_course_id !=%d ", $values['course_id'], $values['programme_id'], $values['level'], $values['semester'], arg(3) );
    if (db_affected_rows($rs) > 0)
      form_set_error('course_id', Error_Types(123));
  }
  else {
    $rs = db_query("SELECT program_course_id FROM {program_course} WHERE course_id=%d AND programme_id=%d AND level='%s' AND semester='%s'", $values['course_id'], $values['programme_id'], $values['level'], $values['semester'] );
    if (db_affected_rows($rs) > 0)
      form_set_error('course_id', Error_Types(123));
  }
 //return true;
}


function staff_assign_course_to_programme_form_submit($form, &$state) {
  $values = $state['values'];

  if (empty($values['credit_load']) || !preg_match("/^[0-9]{1,3}$/", $values['credit_load'])) {
    $sql = "SELECT field_creditload_value FROM {content_type_course} WHERE nid=%d";
    $rows = db_query($sql, $values['course_id']);
    $row = db_fetch_object($rows);
    $values['credit_load'] = $row->field_creditload_value;
  }

  $query = "SELECT program_course_id FROM {program_course} WHERE course_id=%d AND programme_id=%d AND level='%s' AND semester='%s'";
  $result = db_query($query, $values['course_id'], $values['programme_id'], $values['level'], $values['semester']);

  if ($row = db_fetch_object($result)) {
    $query = "UPDATE {program_course}
      SET course_id=%d, programme_id=%d, level='%s', semester='%s', course_type=%d, credit_load=%d, lecturer_id=%d, historical=0
      WHERE program_course_id=%d";
    db_query($query, $values['course_id'], $values['programme_id'], $values['level'], $values['semester'], $values['course_type_id'], $values['credit_load'], $values['user_id'], $row->program_course_id);
  }
  else {
    $query = "INSERT INTO {program_course}
      SET course_id=%d, programme_id=%d, level='%s', semester='%s', course_type=%d, credit_load=%d, lecturer_id=%d, historical=0";
    db_query($query, $values['course_id'], $values['programme_id'], $values['level'], $values['semester'], $values['course_type_id'], $values['credit_load'], $values['user_id']);
  }

  if (arg(3))
    drupal_set_message("Course was Updated");
  else
    drupal_set_message("Course Added to Programme");

  if (arg(3)) drupal_goto("staff/specifycourse/". arg(2));

}


function get_levels_from_programme_level_semester($programme_nid) {
  $result = db_query("SELECT DISTINCT(level) level, programme_id FROM {program_level_semester} WHERE programme_id=%d ORDER BY level", $programme_nid);
  if (db_affected_rows($result) > 0){
    while ($row = db_fetch_object($result))
      $return[$row->level] = $row->level;

  }
  else
   $return[] = strip_tags(Error_Types(106));

  return $return;
}


function get_semester_from_programme_level_semester($programme_nid) {
  $result = db_query("SELECT DISTINCT(semester) semester, programme_id FROM {program_level_semester} WHERE programme_id=%d ORDER BY semester", $programme_nid);
  if (db_affected_rows($result) > 0){
    while ($row = db_fetch_object($result)) {
      $return[$row->semester] = $row->semester;
    }
  }
  else
   $return[] = strip_tags(Error_Types(106));

  return $return;
}


function staff_specify_course_proceed_form() {
  $form['#title'] = 'Start Specifying Courses';

  $form['sprogramme_nid'] = array(
      '#type' => 'select',
      '#options' => programme(),
      '#title' => 'Programme Name');
  $form['showCourseAssignment'] = array(
       '#type' => 'hidden',
       '#default_value' => 1
   );
  $form['submit'] = array(
    '#value' => 'Start Specifying Course(s)',
    '#type' => 'submit'
  );

  return $form;

}


function staff_specify_course_proceed_form_submit($form, &$form_state) {
  drupal_goto("staff/specifycourse/" . $form_state['values']['sprogramme_nid']);
}


function staff_verify_course_proceed_form() {
  $form['#title'] = 'Start Verifying Courses';

  $form['session'] = array(
      '#type' => 'select',
      '#options' => get_all_sessions(),
      '#title' => 'Session');


  $form['vprogramme_nid'] = array(
      '#type' => 'select',
      '#options' => programme(),
      '#title' => 'Programme Name');

  $form['semester'] = array(
      '#type' => 'select',
      '#options' => array(1 => '1', 2 => '2'),
      '#title' => 'Semester');

  $form['showCourseAssignment'] = array(
       '#type' => 'hidden',
       '#default_value' => 1
   );
  $form['submit'] = array(
    '#value' => 'Start Verifying Course(s)',
    '#type' => 'submit'
  );

  return $form;

}


function staff_verify_course_proceed_form_submit($form, &$form_state) {
  $_SESSION['eduerp_verify']['semester'] = $form_state['values']['semester'];
  $_SESSION['eduerp_verify']['session'] = $form_state['values']['session'];
  drupal_goto("staff/verifycourse/" . $form_state['values']['vprogramme_nid']);

}


function course_specify_list(&$r) {
  global $canCreateModify;

  if (db_affected_rows($r) <= 0) {
    echo  strip_tags(Error_Types(106));
    return;
  }
  $html = "
  <table border ='1'>
    <tr>
      <th>#</th>
    <th>Level</th>
    <th>Semester</th>
    <th>Course</th>
    <th>Course Type</th>
    <th>Credit Load</th>
    <th>Lecturer</th>
    <th>Prerequisites Codes</th>
    <th>Prerequisites Description</th>";
    if ($canCreateModify)
      $html .= "
    <th colspan=2 align='center'>Actions</th>";
    $html .= "
    </tr>";$i=1; $found = false;
  while ($f = db_fetch_object($r)) {
    if ($i%2) $rcolor = "#E5E5E5"; else $rcolor = "#FFFFFF";
    $course_type = array('1' => 'Core', 2 => 'Elective');
    if ($f->clean_nid == "") { //found a course without a lectrer
      $found = true;
      $fcolor = "color='#FF0000'";
    }
    else
      $fcolor = '#000000';
    $html .="
    <tr bgcolor = \"$rcolor\" onMouseOver = \"this.bgColor = '#FDD381';\" onMouseOut = \"this.bgColor = '$rcolor';\">
      <td><font $fcolor>". $i++ ."</font></td>
      <td><font $fcolor>". $f->level ."</font></td>
      <td><font $fcolor>". $f->semester ."</font></td>
      <td><font $fcolor>". $f->course_title ."</font></td>
      <td><font $fcolor>". $course_type[$f->course_type] ."</font></td>
      <td><font $fcolor>". $f->credit_load ."</font></td>
      <td><font $fcolor>". $f->staff_name ."</font></td>
      <td><font $fcolor>". $f->prerequisites_codes ."</font></td>
      <td><font $fcolor>". $f->prerequisites_description ."</font></td>";
    if ($canCreateModify)
      $html .= "
      <td><input type='button' class='delete_btn' value='Delete' onClick=\"delete_assignment($f->program_course_id);\" /></td>
      <td><input type='button' class='delete_btn' value='Edit' onClick=\"edit_assignment($f->program_course_id);\" /></td>
   </tr>";

  }
  $html .= "
  </table><br /></br>";
  if ($found)
    $html .= "<b><font color='#ff0000'>Note: The HODs for the course(s) highlighted in Red above will have to assign a lecturer for the course(s) for this semester<br />
       If you are the HOD for those courses, you will be able to fix the problem yourself.<br />In any case, when the problem is resolved, you MUST come back to this screen to complete verification!</font></b>";

  echo $html;

}


function historical_course_list($programme_nid) {
  global $user_profile, $canCreateModify;

  $query = "
    SELECT courses.*, CONCAT(pro.field_profile_last_name_value, ', ', pro.field_profile_first_name_value, ' ', IFNULL(pro.field_profile_middle_name_value, '')) AS staff_name
    FROM
      (SELECT
        pc.program_course_id,
        pc.course_type,
        pc.level AS level_name,
        pc.semester AS semester,
        pc.lecturer_id AS uid,
        p.field_programme_name_value AS programme_name,
        CONCAT( c.field_coursetitle_value, ' (', field_code_value  ,')') AS course_title,
        pc.credit_load AS credit_load,
        field_creditload_value old_credit_load,
        field_course_description_value course_description,
        field_prerequisite_codes_value prerequisites_codes,
        field_prerequisite_value prerequisites_description
      FROM {program_course} pc, {content_type_program} p, {content_type_course} c
      WHERE pc.programme_id=p.nid AND pc.course_id=c.nid AND p.nid=%d AND pc.historical=1
      ) AS courses
    LEFT JOIN {node} npro ON courses.uid=npro.uid AND npro.type='profile'
    LEFT JOIN {content_type_profile} pro ON npro.vid=pro.vid
    ORDER BY level_name, semester";
  $r = db_query($query, $programme_nid);
  if (db_affected_rows($r) <= 0) {
    echo  strip_tags(Error_Types(106));
    return;
  }
  $html = "
  <table border ='1'>
    <tr>
      <th>#</th>";
    if ($canCreateModify)
      $html .= "
    <th>Actions</th>";
    $html .= "
    <th>Level</th><th>Semester</th>
    <th>Course</th>
    <th>Course Type</th>
    <th>Credit Load</th>
    <th>Lecturer</th>
    <th>Prerequisites Codes</th>
    <th>Prerequisites Description</th>
    </tr>";$i=1;
  while ($f = db_fetch_object($r)) {
    if ($i%2) $rcolor = "#E5E5E5"; else $rcolor = "#FFFFFF";
    $course_type = array('1' => 'Core', 2 => 'Elective');
    $html .="
    <tr bgcolor = \"$rcolor\" onMouseOver = \"this.bgColor = '#FDD381';\" onMouseOut = \"this.bgColor = '$rcolor';\">
      <td>". $i++ ."</td>";
    if ($canCreateModify)
      $html .= "
      <td><input type='button' class='delete_btn' value='Make Available' onClick=\"make_available($f->program_course_id);\" /></td>";
      $html .= "
      <td>". $f->level_name ."</td>
      <td>". $f->semester ."</td>
      <td>". $f->course_title ."</td>
      <td>". $course_type[$f->course_type] ."</td>
      <td>". $f->credit_load ."</td>
      <td>". $f->staff_name ."</td>
      <td>". $f->prerequisites_codes ."</td>
      <td>". $f->prerequisites_description ."</td>
   </tr>";

  }
  $html .= "
  </table>";
  echo  $html;

}


function staff_student_progress_qualification() {
  global $eduerp_levels, $eduerp_sessions, $eduerp_programmes, $eduerp_programmeName, $user;
  ob_start();
  if($_SESSION['eduerp_return_msg']) drupal_set_message($_SESSION['eduerp_return_msg']);

  $eduerp_levels = course_levels();
  $eduerp_sessions = get_all_sessions();
  $eduerp_programmes = get_programmes(0, true);
  $str = "
  <br /><hr /><br />

  <font size = '1px'><a href = '../staff/semester'>Semester Administration</a>&nbsp; &raquo; &nbsp;Student Progress towards Qualification</b></font><br /><br />
  <br /><hr /><br />";
  //get faculty and department info of the programme
   $progInfo = db_fetch_object(get_programmes($_SESSION['eduerp_qualification']['programme_nid']));

  if (staff_has_eduerp_role($user->uid, 0, 0, array('University Examination Viewer', 'University Examination Officer', 'Registrar', 'Vice-Chancellor')) ||
     staff_has_eduerp_role($user->uid, $progInfo->department_nid, 0, array('Department Examination Viewer', 'Department Examination Officer', 'Head of Department')) ||
     staff_has_eduerp_role($user->uid, 0, $progInfo->faculty_nid, array('Faculty Examination Viewer', 'Faculty Examination Officer', 'Dean of Faculty'))) {

    $str .= "<b>Student Progress Towards Qualification</b> - Please fill the form as appropriate<br /><br />";
    $str .= drupal_get_form('show_progress_qualification_form');
    $eduerp_programmeName = $eduerp_programmes[$_SESSION['eduerp_qualification']['programme_nid']];
    if (isset($_SESSION['eduerp_qualification'])) {
      $str .= "<br /><hr /><br />
      Students' Progress Towards Qualification for <b>Session: ". $eduerp_sessions[$_SESSION['eduerp_qualification']['session']] ."</b> |  <b>Programme: ". $eduerp_programmeName ."</b>  |  <b>Student current level: ". $eduerp_levels[$_SESSION['eduerp_qualification']['level']] ."</b>
      <br /><br />
      <div id='assigned_courses'>";
      $str .= get_progress_qualification_details();

      $str .= "
      </div>";
    }
  }
   else {
     $str .=   Error_Types(127);

    }
  echo $str;
  unset($_SESSION['eduerp_return_msg']);
  return ob_get_clean();
}


function show_progress_qualification_form() {
  global $eduerp_levels, $eduerp_sessions, $eduerp_programmes;
  $form['#title'] = 'Create New Programme';

  $form['session'] = array(
    '#type' => 'select',
    '#options' => $eduerp_sessions,
    '#required' => TRUE,
    '#title' => 'Session');
  if ($_SESSION['eduerp_qualification']) $form['session']['#default_value'] = $_SESSION['eduerp_qualification']['session'];

  $form['programme_nid'] = array(
    '#type' => 'select',
    '#options' => $eduerp_programmes,
    '#required' => TRUE,
    '#title' => 'Programme Name');
  if ($_SESSION['eduerp_qualification']) $form['programme_nid']['#default_value'] = $_SESSION['eduerp_qualification']['programme_nid'];

  $form['level'] = array(
    '#type' => 'select',
    '#options' => $eduerp_levels,
    '#required' => TRUE,
    '#title' => 'Level');
  if ($_SESSION['eduerp_qualification']) $form['level']['#default_value'] = $_SESSION['eduerp_qualification']['level'];

  $form['submit'] = array(
      '#value' => 'Check Now',
      '#type' => 'submit'
    );
  return $form;
}


function show_progress_qualification_form_validate($form, &$form_state) {
  ;
}


function show_progress_qualification_form_submit($form, &$form_state) {
  $values = $form_state['values'];
  $_SESSION['eduerp_qualification']['session'] = $values['session'];
  $_SESSION['eduerp_qualification']['programme_nid'] = $values['programme_nid'];
  $_SESSION['eduerp_qualification']['level'] = $values['level'];
}


function display_progress_towards_qualification(&$result) {
  $html = "
  <table border ='1'>
    <tr>
      <th>#</th>
    <th>Student Name</th>

    <th>Credit Load Completed</th>
    <th>Session</th>
    <th>Semester</th>
    <th>Level</th>
    <th>GPA</th>

    <th>C. Credit Load Completed</th>
    <th>Elapsed Year</th>
    <th>Duration</th>

    <th>Programme Min. Credit</th>
    <th>Programme Max. Duration</th>
    <th>Mode of Entry</th>

    <th>CGPA</th>
    </tr>";$i=1;
  //while ($f = db_fetch_object($result)) {
  foreach ($result as $v) {
    if ($i%2) $rcolor = "#E5E5E5"; else $rcolor = "#FFFFFF";

    $html .="
    <tr bgcolor = \"$rcolor\" onMouseOver = \"this.bgColor = '#FDD381';\" onMouseOut = \"this.bgColor = '$rcolor';\">
      <td>". $i++ ."</td>
      <td>". $v['student_name'] ."</td>

      <td>". $v['field_credit_load_completed_value'] ."</td>
      <td>". $v['field_sess_name_gpa_value'] ."</td>
      <td>". $v['field_semester_name_gpa_value'] ."</td>
      <td>". $v['field_level_name_gpa_value'] ."</td>
      <td>". $v['field_gpa_value'] ."</td>

      <td>". $v['field_credit_load_completed_sp_value'] ."</td>
      <td>". $v['elapsed_years'] ."</td>
      <td>". $v['field_duration_value'] ."</td>

      <td>". $v['field_min_credit_load_program_value'] ."</td>
      <td>". $v['field_max_duration_value'] ."</td>
      <td>". $v['field_profile_mode_of_entry_value'] ."</td>

      <td>". $v['field_cgpa_sp_value'] ."</td>
   </tr>";

  }
  $html .= "
  </table>";
  return  $html;

}


function  get_progress_qualification_details() {
  global $eduerp_uid, $eduerp_programmeName, $eduerp_programme_nid, $eduerp_studentName;

  $eduerp_programme_nid = $_SESSION['eduerp_qualification']['programme_nid'];
  $session = $_SESSION['eduerp_qualification']['session'];
  $level = $_SESSION['eduerp_qualification']['level'];

  //arrange the CGPA

  $cgpa = get_students_CGPA($session, $eduerp_programme_nid, $level);
  if (db_affected_rows($cgpa) > 0) {
    $cgpa_arr = array("field_cgpa_sp_value", "field_credit_load_completed_sp_value", "field_min_credit_load_program_value", "elapsed_years",
        "field_duration_value","field_max_duration_value", "field_profile_mode_of_entry_value", "student_name", "uid", "mat");
    while ($f = db_fetch_object($cgpa)) {
      foreach ($cgpa_arr as $v)
        $cGPA[$f->uid][$v] = $f->{$v};
    }
  }

  /*
  //test data
  $cGPA[1] = array('student_name'=>'Olu Jacobs','field_cgpa_sp_value'=>'40','field_credit_load_completed_sp_value'=>'39',
      'field_min_credit_load_program_value'=>'30','elapsed_years'=>'1',
      'field_duration_value'=>'4','field_max_duration_value'=>'12','field_profile_mode_of_entry_value'=>'UME', 'uid'=>'1');

  $cGPA[2] = array('student_name'=>'Obi Johnson','field_cgpa_sp_value'=>'60','field_credit_load_completed_sp_value'=>'55',
      'field_min_credit_load_program_value'=>'48','elapsed_years'=>'2',
      'field_duration_value'=>'4','field_max_duration_value'=>'12','field_profile_mode_of_entry_value'=>'UME', 'uid'=>'2');
  */
  //arrange the GPA

  $gpa = get_students_GPA($session, $eduerp_programme_nid, $level);
  if (db_affected_rows($gpa) > 0) {
    $gpa_arr = array("field_gpa_value", "field_credit_load_completed_value", "field_sess_name_gpa_value", "field_semester_name_gpa_value", "field_level_name_gpa_value", "uid");
    while ($f = db_fetch_object($gpa)) {
      foreach ($gpa_arr as $v)
        $GPA[$f->uid][$f->field_sess_name_gpa_value][$f->field_semester_name_gpa_value][$v] = $f->{$v};
    }
  }

  /*
    //test data
  $GPA[1]['2008/2009'][1] = array("field_gpa_value"=>'34.3', "field_credit_load_completed_value"=>'50', "field_sess_name_gpa_value"=>'2008/2009',
      "field_semester_name_gpa_value"=>'1', "field_level_name_gpa_value"=>'100');
  $GPA[1]['2008/2009'][2] = array("field_gpa_value"=>'20.3', "field_credit_load_completed_value"=>'5', "field_sess_name_gpa_value"=>'2008/2009',
      "field_semester_name_gpa_value"=>'2', "field_level_name_gpa_value"=>'100');

  $GPA[1]['2009/2010'][1] = array("field_gpa_value"=>'11.3', "field_credit_load_completed_value"=>'45', "field_sess_name_gpa_value"=>'2009/2010',
      "field_semester_name_gpa_value"=>'1', "field_level_name_gpa_value"=>'200');
  $GPA[1]['2009/2010'][2] = array("field_gpa_value"=>'67.3', "field_credit_load_completed_value"=>'75', "field_sess_name_gpa_value"=>'2009/2010',
      "field_semester_name_gpa_value"=>'2', "field_level_name_gpa_value"=>'200');

  $GPA[2]['2008/2009'][1] = array("field_gpa_value"=>'90.3', "field_credit_load_completed_value"=>'70', "field_sess_name_gpa_value"=>'2008/2009',
      "field_semester_name_gpa_value"=>'1', "field_level_name_gpa_value"=>'200');
  $GPA[2]['2008/2009'][2] = array("field_gpa_value"=>'70.3', "field_credit_load_completed_value"=>'5', "field_sess_name_gpa_value"=>'2008/2009',
      "field_semester_name_gpa_value"=>'2', "field_level_name_gpa_value"=>'200');
  */
  //arrange the faled courses

  $failed_courses = get_cumulative_list_of_failed_courses($session, $eduerp_programme_nid, $level);
  if (db_affected_rows($failed_courses) > 0) {
    $failed_arr = array("failedlist");
    while ($f = db_fetch_object($failed_courses)) {
      foreach ($failed_arr as $v)
        $failed[$f->uid] = $f->{$v};

    }
  }

  //test data for failed course
  //$failed[2] = "code1, code2";

  //build the table
  //note i am using cGPA as the root iterator because cGPA must exist for all students
  //print_r($cGPA);
  if(isset($cGPA) && is_array($cGPA)) {
  $html = "
  <table border=1>";$i=1;
  foreach($cGPA as $k=> $v){

  //    drupal_set_message($v['field_cgpa_sp_value']);
    //build cGPA
    $html .= "
    <tr>
      <th>#</th>
      <th>Name</th>
      <th>cGPA</th>
      <th>Total Credit Units Taken</th>
      <th>Total Units Required</th>
      <th>Years since Student Start</th>
      <th>Programme Duration</th>
      <th>Maximum Semesters allowed</th>
      <th>Mode of Entry</th>
   </tr>
   <tr>
            <td>". $i++ ."</td>
            <td>". $v['student_name'] . "<br />(" . $v['mat'] . ")</td>
            <td>". $v['field_cgpa_sp_value'] ."</td>
            <td>". $v['field_credit_load_completed_sp_value'] ."</td>
            <td>". $v['field_min_credit_load_program_value'] ."</td>
            <td>". $v['elapsed_years'] ."</td>
            <td>". $v['field_duration_value'] ."</td>
            <td>". $v['field_max_duration_value'] ."</td>
            <td>". $v['field_profile_mode_of_entry_value'] ."</td>
     </tr>";
    if (isset($failed[$k])) {
      //now build failed courses
      //$flist = "";
      //foreach($failed[$k] as $p) {
      //  $flist .= $p['failedlist'] .', ';
      //}
      ///$flist = substr($flist, 0, -2); //remove the trailing ', '
      $html .= "
      <tr>
        <td colspan=2>&nbsp;</td>
        <td colspan=7>
          <table border=1>
            <tr>
              <th>Failed Course(s)</th>
            </tr>
            <tr>
              <td>". $failed[$k] ."</td>
            </tr>
          </table>
        </td>
      </tr>";
    }
    //now build GPA
    if(isset($GPA[$k])) {
    $html .= "
      <tr>
        <td colspan=2>&nbsp;</td>
        <td colspan=7>
          <table border=1>
            <tr>
              <th>GPA</th>
            <th>Credit Units Taken</th>
            <th>Session</th>
            <th>Semester</th>
            <th>Level</th>
          </tr>";
          $GPA_details = array_slice($GPA, 2);

          foreach($GPA[$k] as $p) {
                $b = array_keys($p);
                //echo sizeof($b) .'<br />';
               // if(sizeof($b)){
               //       foreach($b as $h=>$a) echo $k . '=>'. $a .'<br />';
               // }
                foreach($b as $t){
          $html .= "
            <tr>
              <td>". $p[$t]['field_gpa_value'] ."</td>
              <td>". $p[$t]['field_credit_load_completed_value'] ."</td>
              <td>". $p[$t]['field_sess_name_gpa_value'] ."</td>
              <td>". $p[$t]['field_semester_name_gpa_value'] ."</td>
              <td>". $p[$t]['field_level_name_gpa_value'] ."</td>
            </tr>";
                  }
            }
            $html .="
          </table>
        </td>
      </tr>";
    }
    //link to student grade view
    $html .= "
      <tr>
        <td colspan=2>&nbsp;</td>
        <td colspan=7>
          <table border=1>
            <tr>
              <th>Student Grade View</th>
            </tr>
            <tr>
              <td><a href=" . '"' . $base_url . '/studentgradedetails?uid=' . rawurlencode($v['mat']) . '"' . ">View Student Grade Details</a></td>
          </table>
        </td>
      </tr>";
      //now append the form here
      $html .="
      <tr>
        <td colspan=2>&nbsp;</td>
        <td colspan=7>";
          $eduerp_uid = $v['uid'];
          $eduerp_studentName = $v['student_name'];
          //$stud = new student_action_class($v['uid'], $programmeName, $programme_nid, $v['student_name']);
          $html .= drupal_get_form('staff_student_action_form');
          //$html .= $stud;
          //unset($_SESSION['eduerp_stud']);
        /*
          <table border=1>
            <tr>
              <td nowrap>Comment:<input type='text' name='comment'></td>
              <td nowrap>Event:<select name='studentevent' >
                <option value='Graduated'>Graduated</option>
                <option value='Left Voluntarily'>Left Voluntarily</option>
                <option value='Repeat Session'>Repeat Session</option>
                <option value='Defer Session'>Defer Session</option>
                <option value='Left Forced'>Left Forced</option>

                </select>
              </td>
              <td nowrap>Degree:<select name='studentdegree' >
                <option value='None'>None</option>
                <option value='First Class'>First Class</option>
                <option value='Second Class Upper'>Second Class Upper</option>
                <option value='Second Class Lower'>Second Class Lower</option>
                <option value='Third Class'>Third Class</option>
                <option value='Pass'>Pass</option>

                </select>
              </td>";
              $all_sessions = get_all_sessions();
              $html .="
              <td nowrap>Session:<select name='studentsession' >";
              foreach($all_sessions as $v){
                      $html .="
                <option value='". $v ."'>". $v ."</option>";
              }
              $html .="
                </select>
              <td><input type='button' class='delete_btn' value='Perform Action' onClick=\"student_action(". $v['uid'] .");\" /></td>
            </tr>
          </table>
          */
          $str .="
        </td>
      </tr>
      ";

  }
  $html .= "
  </table>";
  }
  else
   $html = strip_tags(Error_Types(106));
  return $html;
  //unset($_SESSION['eduerp_qualification']);
}


function get_students_CGPA($session, $programme_nid, $level) {
  $sql = "SELECT
        sp.field_student_ref_sp_uid AS uid,
        u.name AS mat,
        sp.field_cgpa_sp_value,
        sp.field_credit_load_completed_sp_value,
        p.field_min_credit_load_program_value,
        SUBSTRING(spro.field_profile_reg_session_value, 1, 4) - spro.field_profile_yearofentry_value + 1 AS elapsed_years,
        p.field_duration_value,
        p.field_max_duration_value,
        CONCAT(pro.field_profile_last_name_value, ', ', pro.field_profile_first_name_value, ' ', IFNULL(pro.field_profile_middle_name_value, '')) AS student_name, pro.nid student_key,
        spro.field_profile_mode_of_entry_value
      FROM {content_type_student_program} sp
      INNER JOIN {node} npro ON sp.field_student_ref_sp_uid=npro.uid AND npro.type='profile'
      INNER JOIN {content_type_profile} pro ON npro.vid=pro.vid
      INNER JOIN {node} nspro ON npro.uid=nspro.uid AND nspro.type='student_profile'
      INNER JOIN {content_type_student_profile} spro ON nspro.vid=spro.vid
      INNER JOIN {content_type_program} p
      INNER JOIN {users} u ON sp.field_student_ref_sp_uid=u.uid
      WHERE
        sp.field_student_ref_sp_uid IN (
          SELECT nspro0.uid
          FROM {node} nspro0
          INNER JOIN {content_type_student_profile} spro0 ON nspro0.vid=spro0.vid
          WHERE nspro0.type='student_profile' AND spro0.field_profile_first_choice_nid='%s' AND spro0.field_profile_reg_session_value='%s' AND spro0.field_profile_level_name_value='%s'
        ) AND
        sp.field_program_ref_sp_nid=spro.field_profile_first_choice_nid AND
        sp.field_program_ref_sp_nid=p.nid
      ORDER BY student_name";
  $result = db_query($sql, $programme_nid, $session, $level);
  return $result;
}


function get_students_GPA($session, $programme_nid, $level) {
  $sql = "SELECT
        gpa.field_student_ref_gpa_uid AS uid,
        gpa.field_gpa_value,
        gpa.field_credit_load_completed_value,
        gpa.field_sess_name_gpa_value,
        gpa.field_semester_name_gpa_value,
        gpa.field_level_name_gpa_value,
        CONCAT(pro.field_profile_last_name_value, ', ', pro.field_profile_first_name_value, ' ', IFNULL(pro.field_profile_middle_name_value, '')) AS student_name, pro.nid student_key
      FROM {content_type_student_gpa} gpa
      INNER JOIN {node} npro ON gpa.field_student_ref_gpa_uid=npro.uid AND npro.type='profile'
      INNER JOIN {content_type_profile} pro ON npro.vid=pro.vid
      INNER JOIN {node} nspro ON npro.uid=nspro.uid AND nspro.type='student_profile'
      INNER JOIN {content_type_student_profile} spro ON nspro.vid=spro.vid
      WHERE
        gpa.field_student_ref_gpa_uid IN (
          SELECT nspro0.uid
          FROM {node} nspro0
          INNER JOIN {content_type_student_profile} spro0 ON nspro0.vid=spro0.vid
          WHERE nspro0.type='student_profile' AND spro0.field_profile_first_choice_nid='%s' AND spro0.field_profile_reg_session_value='%s' AND spro0.field_profile_level_name_value='%s'
        ) AND
        gpa.field_program_ref_gpa_nid=spro.field_profile_first_choice_nid
      ORDER BY student_name, gpa.field_level_name_gpa_value, gpa.field_sess_name_gpa_value, gpa.field_semester_name_gpa_value";
    $result = db_query($sql, $programme_nid, $session, $level);
  return $result;
}


function get_cumulative_list_of_failed_courses($session, $programme_nid, $level) {
  // Find any failed (and not since passed) courses for each student in this program/session/level
    // failedcourses sub-query below borrows from similar query in student.module & course_grades_footer.inc
    $sql = "SELECT
        failedcourses.uid,
        failedcourses.failedlist,
        CONCAT(pro.field_profile_last_name_value, ', ', pro.field_profile_first_name_value, ' ', IFNULL(pro.field_profile_middle_name_value, '')) AS student_name, pro.nid student_key
      FROM
        (
          SELECT
            exams.field_mat_no_uid AS uid,
            GROUP_CONCAT(exams.field_code_value SEPARATOR ', ') AS failedlist
          FROM (
            SELECT DISTINCT
              IF(sg.field_gradepoint_value='-', 0, sg.field_gradepoint_value) AS gradepoint,
              sg.field_mat_no_uid,
              CONCAT(ci.field_sess_name_value, ci.field_semester_name_value, sg.nid) AS sess_sem,
              c.field_code_value
            FROM
              {content_type_student_grades} sg,
              {content_type_course_instance} ci,
              {content_type_course} c,
              {program_course} pc,
              {node} nspro,
              {content_type_student_profile} spro
            WHERE
              sg.field_mat_no_uid IN (
                SELECT nspro8.uid
                FROM {node} nspro8
                INNER JOIN {content_type_student_profile} spro8 ON nspro8.vid=spro8.vid
                WHERE nspro8.type='student_profile' AND spro8.field_profile_first_choice_nid='%s' AND spro8.field_profile_reg_session_value='%s' AND spro8.field_profile_level_name_value='%s'
              ) AND
              sg.field_course_instance_nid=ci.nid AND
              sg.field_examscorelocked_value>0 AND
              sg.field_dropped_value=0 AND
              ci.field_course_id_nid=c.nid AND
              ci.field_course_id_nid=pc.course_id AND
              pc.programme_id=spro.field_profile_first_choice_nid AND
              nspro.uid=sg.field_mat_no_uid AND
              nspro.type='student_profile' AND
              nspro.vid=spro.vid
            ) AS exams
          JOIN (
            SELECT
              sg0.field_mat_no_uid,
              MAX(CONCAT(ci0.field_sess_name_value, ci0.field_semester_name_value, sg0.nid)) AS sess_sem0,
              c0.field_code_value
            FROM
              {content_type_student_grades} sg0,
              {content_type_course_instance} ci0,
              {content_type_course} c0,
              {program_course} pc0,
              {node} nspro0,
              {content_type_student_profile} spro0
            WHERE
              sg0.field_mat_no_uid IN (
                SELECT nspro9.uid
                FROM {node} nspro9
                INNER JOIN {content_type_student_profile} spro9 ON nspro9.vid=spro9.vid
                WHERE nspro9.type='student_profile' AND spro9.field_profile_first_choice_nid='%s' AND spro9.field_profile_reg_session_value='%s' AND spro9.field_profile_level_name_value='%s'
              ) AND
              sg0.field_course_instance_nid=ci0.nid AND
              sg0.field_examscorelocked_value>0 AND
              sg0.field_dropped_value=0 AND
              ci0.field_course_id_nid=c0.nid AND
              ci0.field_course_id_nid=pc0.course_id AND
              pc0.programme_id=spro0.field_profile_first_choice_nid AND
              nspro0.uid=sg0.field_mat_no_uid AND
              nspro0.type='student_profile' AND
              nspro0.vid=spro0.vid
            GROUP BY c0.field_code_value, sg0.field_mat_no_uid
            ) AS most_recent_exam
          ON
            exams.field_code_value=most_recent_exam.field_code_value AND
            exams.sess_sem=most_recent_exam.sess_sem0 AND
            exams.field_mat_no_uid=most_recent_exam.field_mat_no_uid AND
            exams.gradepoint=0
          GROUP BY exams.field_mat_no_uid
          ORDER BY exams.field_code_value
        ) AS failedcourses
      INNER JOIN {node} npro ON failedcourses.uid=npro.uid AND npro.type='profile'
      INNER JOIN {content_type_profile} pro ON npro.vid=pro.vid
      ORDER BY student_name";
    $result = db_query($sql, $programme_nid, $session, $level, $programme_nid, $session, $level);
  return $result;
}


function get_all_sessions() {
  $result = db_query($sql = "SELECT session_id, sess_name FROM {session} ORDER BY sess_name DESC ");
  if (db_affected_rows($result) > 0) {
    while ($row = db_fetch_object($result))
      $session[$row->sess_name] = $row->sess_name;
  }
  else
    $session[] = strip_tags(Error_Types(106));

  return $session;
}


function get_unassigned_for_programme($programme, $session, $semester) {
  $sql ="
  SELECT DISTINCT
        pc.level,
        c.field_code_value course_code,
        d.field_department_name_value department_name,
        program_course_id
      FROM {program_course} pc
      INNER JOIN {content_type_course} c ON pc.course_id=c.nid AND pc.historical=0
      LEFT JOIN {content_type_course_instance} ci
      ON
        c.nid=ci.field_course_id_nid AND
        pc.semester=ci.field_semester_name_value AND
        ci.field_sess_name_value='%s'
      INNER JOIN {content_type_program} p ON pc.programme_id=p.nid
      INNER JOIN {content_type_department} d ON c.field_department_nid_nid=d.nid
      WHERE pc.semester='%s' AND p.nid=%d AND ci.nid IS NULL
      ORDER BY d.field_department_name_value, c.field_code_value, p.field_programme_name_value, pc.level";
    $result = db_query($sql, $session, $semester, $programme);
    return $result;
}


function staff_unregistered_students() {
 global $sessions;
  ob_start();
  $sessions = get_all_sessions();
  $str = "
  <br /><hr /><br />

  <font size = '1px'><a href = '/staff/semester/'>Semester Administration</a>&nbsp; &raquo; &nbsp;List of Students who have Not Registered for a Semester</b></font><br /><br />
  <br /><hr /><br />

  <b>List of Students who have Not Registered for a Semester</b> - Please fill the form as appropriate<br /><br />";

  $str .= drupal_get_form('show_unregistered_course_form');


  if ($_SESSION['eduerp_unreg']) {


    $unregStudents = get_unregistered_students($sessions[$_SESSION['eduerp_unreg']['session']], $_SESSION['eduerp_unreg']['semester']);

    $str .="
    <br /><hr /><br />
    <b>List of Students who have Not Registered for ". $sessions[$_SESSION['eduerp_unreg']['session']] ." Session | Semester ". $_SESSION['eduerp_unreg']['semester'] ."</b><br /><br />";
    if (db_affected_rows($unregStudents) > 0) {
      $str  .= display_list_of_unregistered_students($unregStudents);
    }
    else
      $str .= Error_Types(106);
  }

  echo $str;
  return ob_get_clean();
}


function display_list_of_unregistered_students(&$result) {
  $html = "
  <table border ='1'>
    <tr>
      <th>#</th>
      <th>Student Name</th>
      <th>Matriculation Number</th>
      <th>Programme</th>
      <th>Level</th>
    </tr>";$i=1;
  while ($f = db_fetch_object($result)) {
    if ($i%2) $rcolor = "#E5E5E5"; else $rcolor = "#FFFFFF";

    $html .="
    <tr bgcolor = \"$rcolor\" onMouseOver = \"this.bgColor = '#FDD381';\" onMouseOut = \"this.bgColor = '$rcolor';\">
      <td>". $i++ ."</td>
      <td>". $f->student_name ."</td>
      <td>". $f->mat ."</td>
      <td>". $f->programme_name ."</td>
      <td>". $f->level ."</td>
    </tr>";
  }
  $html .= "
  </table>";
  return  $html;
}


function show_unregistered_course_form() {
  global $sessions;
  $form['#title'] = 'Unregistered Course form';

  $form['session'] = array(
    '#type' => 'select',
    '#options' => $sessions,
    '#required' => TRUE,
    '#title' => 'Session');
  if ($_SESSION['eduerp_unreg']) $form['session']['#default_value'] = $_SESSION['eduerp_unreg']['session'];


  $form['semester'] = array(
    '#type' => 'select',
    '#options' => array(1=>'1', 2=>'2'),
    '#required' => TRUE,
    '#title' => 'Semester');
  if ($_SESSION['eduerp_unreg']) $form['semester']['#default_value'] = $_SESSION['eduerp_unreg']['semester'];

  $form['submit'] = array(
      '#value' => 'Check Now',
      '#type' => 'submit'
    );
  return $form;
}


function show_unregistered_course_form_submit($form, &$form_state) {
  $values = $form_state['values'];
  $_SESSION['eduerp_unreg']['session'] = $values['session'];
  $_SESSION['eduerp_unreg']['semester'] = $values['semester'];
}


function get_unregistered_students($session, $semester) {
  $sql = "
  SELECT DISTINCT
    ur.uid,
    u.name AS mat,
    p.field_programme_name_value AS programme_name,
    spro.field_profile_level_name_value AS level,
    CONCAT(pro.field_profile_last_name_value, ', ', pro.field_profile_first_name_value, ' ', IFNULL(pro.field_profile_middle_name_value, '')) AS student_name
  FROM {role} r
  INNER JOIN {users_roles} ur ON r.rid=ur.rid
  INNER JOIN {node} npro ON ur.uid=npro.uid AND npro.type='profile'
  INNER JOIN {content_type_profile} pro ON npro.vid=pro.vid
  INNER JOIN {node} nspro ON npro.uid=nspro.uid AND nspro.type='student_profile'
  INNER JOIN {content_type_student_profile} spro ON nspro.vid=spro.vid
  INNER JOIN {content_type_student_program} sp ON ur.uid=sp.field_student_ref_sp_uid AND spro.field_profile_first_choice_nid=sp.field_program_ref_sp_nid
  INNER JOIN {content_type_program} p ON spro.field_profile_first_choice_nid=p.nid
  INNER JOIN {users} u ON ur.uid=u.uid
  LEFT JOIN {content_type_student_record} sr
  ON ur.uid=sr.field_student_ref_sr_uid AND
    sp.field_program_ref_sp_nid=sr.field_student_program_sr_nid AND
    sr.field_event_sr_value IN ('Graduated', 'Left Voluntarily', 'Left Forced')
  WHERE
    r.name='Student' AND
    (spro.field_profile_reg_session_value!='%s' OR spro.field_profile_reg_semester_value!='%s') AND
    sr.field_student_ref_sr_uid IS NULL
  ORDER BY programme_name, level, student_name
  ";
  $result = db_query($sql, $session, $semester);
  return $result;
}


function staff_student_action_form() {
  global $eduerp_uid, $eduerp_programmeName, $eduerp_programme_nid, $eduerp_studentName;
  $form = array(
    '#theme' => 'form_panel_table',
    '#form_panel_table_attributes' => array('border' => 0));
  $form['#title'] = 'Student Action';


  $form['comment'] = array(
    '#title' => 'Comment',
    '#type' => 'textfield',
    '#size' => 25,
    '#form_panel_col' => 1,
    '#form_panel_row' => 1
  );

  $form['uid'] = array(
    '#title' => 'uid',
    '#type' => 'hidden',
    '#default_value' => $eduerp_uid

  );

  $form['programmeName'] = array(
    '#title' => 'programmeName',
    '#type' => 'hidden',
    '#default_value' => $eduerp_programmeName

  );
  $form['programmeUID'] = array(
    '#title' => 'programmeUID',
    '#type' => 'hidden',
    '#default_value' => $eduerp_programme_nid

  );
  $form['studentName'] = array(
    '#title' => 'studentName',
    '#type' => 'hidden',
    '#default_value' => $eduerp_studentName

  );
  $form['event'] = array(
    '#type' => 'select',
    '#options' => array('Graduated'=>'Graduated','Left Voluntarily'=>'Left Voluntarily','Repeat Session'=>'Repeat Session','Defer Session'=>'Defer Session','Left Forced'=>'Left Forced'),
    '#title' => 'Event',
    '#form_panel_col' => 2,
    '#form_panel_row' => 1
    );

    $form['degree'] = array(
    '#type' => 'select',
    '#options' => array('None'=>'None','First Class'=>'First Class', 'Second Class Upper'=>'Second Class Upper', 'Second Class Lower'=>'Second Class Lower','Third Class'=>'Third Class', 'Pass'=>'Pass'),
    '#title' => 'Degree',
    '#form_panel_col' => 3,
    '#form_panel_row' => 1
    );

  $form['session'] = array(
    '#type' => 'select',
    '#options' => get_all_sessions(),
    '#title' => 'Session',
    '#form_panel_col' => 4,
    '#form_panel_row' => 1
    );

  $form['submit'] = array(
    '#value' => 'Perform Action',
    '#type' => 'submit',
    '#form_panel_col' => 5,
    '#form_panel_row' => 1
  );


  return $form;

}


function staff_student_action_form_validate($form, &$state) {
  $values = $state['values'];

  $degrees = array("First Class", "Second Class Upper", "Second Class Lower", "Third Class", "Pass");

  if(($values['event'] == 'Graduated' && $values['degree'] == 'None') || ($values['event'] != 'Graduated' && in_array($values['degree'], $degrees))) {
    form_set_error('degree1', "Wrong 'Degree' specified for 'Event'.");
  }
}


function staff_student_action_form_submit($form, &$state) {

  $values = $state['values'];
  //$programmes = get_programmes(0, true);
  // student_record CCK

  $studentRecord = array('title' =>  $values['studentName'] .' - '. $values['programmeName'],
  	                 'uid' => $values['uid'], 'event' => $values['event'], 'degree' => $values['degree'],
  	                 'session' => $values['session'], 'programmeUID' => $values['programmeUID'], 'comment' => $values['comment']

  	  );

  create_student_record_cck($studentRecord);
  drupal_set_message('<b>' . $values['event'] .'</b> with <b>'. $values['degree'] .'</b> for <b>'. $values['session'] .'</b> session was applied to <b>'. $values['studentName'] .'</b>');
}


function create_student_record_cck(&$studentRecord) {
  global $user;
  $node = new stdClass();
  $node->type                               = 'student_record';
  $node->uid                                = 1;  // Admin
  $node->status                             = 1;  // Published
  $node->promote                            = 0;
  $node->sticky                             = 0;
  $node->comment                            = 0;
  $node->title                              = $studentRecord['title']; //[Student Name] . ' - ' . [Programme Name];
  $node->field_student_ref_sr[0]['uid']     = $studentRecord['uid']; //uid of Student;
  $node->field_event_sr[0]['value']         = $studentRecord['event']; //select from Graduated, Left Voluntarily, Left Forced, Repeat Session
  $node->field_degree_sr[0]['value']        = $studentRecord['degree']; //select from degree class (None, First Class, Second Class Upper, Second Class Lower, Third Class, Pass
  $node->field_session_sr[0]['value']       = $studentRecord['session']; //session user graduated from or has been forced to repeat e.g. 2009/2010
  $node->field_student_program_sr[0]['nid'] = $studentRecord['programmeUID']; //node ID of program CCK that this record refers to
  $node->field_approver_sr[0]['uid']        = $user->uid; //uid of user who created this record;
  $node->field_comment_sr[0]['value'] = ! empty($studentRecord['comment']) ? $studentRecord['comment'] : null;
  node_save($node);

}


function staff_drop_registered_course() {
  global $user;
  ob_start();
  echo '<br /><hr /><br />';
      $navi = "<font size = '1px'><a href = '/staff/semester/'>Semester Administration</a>&nbsp; &raquo; &nbsp;Mark a Course Registration as Dropped</font><br /><br />";
      $navi .= '<br /><hr /><br />';
  if (staff_has_eduerp_role($user->uid, 0, 0, array('Registry', 'Registrar'))) {

    if (! isset($_SESSION['eduerp_drop_on']) && ! isset($_POST['eduerp_drop_on'])) {

      echo $navi;
      echo "<b>Get Student Registered Courses</b> - Please fill the form as appropriate<br /><br />";
      echo drupal_get_form('get_student_course_instance_form');

    }
    else {//show form to allow him drop courses
      $navi = "<font size = '1px'><a href = '/staff/semester/'>Semester Administration</a>&nbsp; &raquo; &nbsp;<a href='/staff/dropcoursereg'>Mark a Course Registration as Dropped</a>&nbsp; &raquo; &nbsp; Student: <b>". $_SESSION['eduerp_drop_course_info']['studentInfo']['mat_no'] ."</b></font><br /><br />";
      $navi .= '<br /><hr /><br />';
      echo $navi;
      //echo "<b></b> | <b>". $_SESSION['eduerp_drop_course_info']['studentInfo']['fname'] ."</b> - <b>". $_SESSION['eduerp_drop_course_info']['studentInfo']['mat_no'] ."</b> | <b>". $_SESSION['eduerp_drop_course_info']['session'] ." Session</b>  |  <b>Semester ". $_SESSION['eduerp_drop_course_info']['semester'] ."</b> - Select a Course to Drop it<br /><br />";
      echo "<b>List of Registered Courses by</b> | <b>". $_SESSION['eduerp_drop_course_info']['studentInfo']['fname'] ."</b> - <b>". $_SESSION['eduerp_drop_course_info']['studentInfo']['mat_no'] ."</b>
      | <b>". $_SESSION['eduerp_drop_course_info']['session'] ." Session</b>  |  <b>Semester ". $_SESSION['eduerp_drop_course_info']['semester'] ."</b>
      | <b>". $_SESSION['eduerp_drop_course_info']['studentInfo']['current_programme_name'] ."</b>
      | Student current level <b>". $_SESSION['eduerp_drop_course_info']['studentInfo']['level'] ." </b>
      <br /><br />- Select a Course to Drop it<br /><br />";
      echo drupal_get_form('get_student_drop_course_form');

    }

  }
  else {
    echo $navi;
    echo Error_Types(127);

  }
  unset($_SESSION['eduerp_drop_on']);
  return ob_get_clean();
}


function get_student_drop_course_form() {
  $form['#title'] = 'Drop Course Form';
  $courses = array();
  if(isset($_SESSION['eduerp_drop_course_info'])) {
    $result = get_student_registered_courses($_SESSION['eduerp_drop_course_info']['studentInfo']['uid'], $_SESSION['eduerp_drop_course_info']['session'], $_SESSION['eduerp_drop_course_info']['semester']);

    if (db_affected_rows($result) > 0) {
      while($r = db_fetch_object($result))
      $courses[$r->nid] = $r->course_code;
    }
  }

 $form['student_grade_nid'] = array(
    '#type' => 'select',
    '#options' => array(''=>'') + $courses,
    '#title' => 'Registered Courses',
    '#required' =>TRUE
  );

  $form['eduerp_drop_on'] = array(
    '#type' => 'hidden',
    '#default_value'=>1,
    '#title' => 'keep showing form'
  );


  $form['submit'] = array(
      '#value' => 'Drop Course',
      '#type' => 'submit'
  );


  return $form;

}


function get_student_drop_course_form_validate($form, &$state) {
  $_SESSION['eduerp_drop_on'] = 1;//keep showing the form

  //check for remainders
  $result = get_student_registered_courses($_SESSION['eduerp_drop_course_info']['studentInfo']['uid'], $_SESSION['eduerp_drop_course_info']['session'], $_SESSION['eduerp_drop_course_info']['semester']);
  if(db_affected_rows($result) <= 0)
    drupal_set_message(Error_Types(126));
}


function get_student_drop_course_form_submit($form, &$state) {
  $values = $state['values'];
  $_SESSION['eduerp_drop_on'] = 1;//keep showing the form
  $sql = "UPDATE {content_type_student_grades} SET field_dropped_value = 1 WHERE nid = %d";
  db_query($sql, $values['student_grade_nid']);
  cache_clear_all('content:', content_cache_tablename(), TRUE);

  update_credit_load_registered($_SESSION['eduerp_drop_course_info']['studentInfo']['uid'], $_SESSION['eduerp_drop_course_info']['session'], $_SESSION['eduerp_drop_course_info']['semester']);

  drupal_set_message('The Course has been dropped!');
  //check for remainders
  $result = get_student_registered_courses($_SESSION['eduerp_drop_course_info']['studentInfo']['uid'], $_SESSION['eduerp_drop_course_info']['session'], $_SESSION['eduerp_drop_course_info']['semester']);
  if(db_affected_rows($result) <= 0)
    drupal_set_message(Error_Types(126));
}


function get_student_course_instance_form() {
  $form['#title'] = 'Get Student Registered Courses By Session and Semester ';

  $form['mat_no'] = array(
    '#type' => 'textfield',
    '#title' => 'Matriculation Number',
    '#required' => TRUE
  );

 $form['session'] = array(
    '#type' => 'select',
    '#options' => get_all_sessions(),
    '#title' => 'Session'
  );
  $form['semester'] = array(
      '#type' => 'select',
      '#options' => array(1 => '1', 2 => '2', 3=>'3'),
      '#title' => 'Semester'
   );
  $form['submit'] = array(
      '#value' => 'Get Registered Courses',
      '#type' => 'submit'
  );


  return $form;

}


function get_student_course_instance_form_validate($form, &$state) {
  $values = $state['values'];
  $studentInfo = user_load(array('name'=>$values['mat_no']));


  if( ! $studentInfo) {
    form_set_error('mat_no', Error_Types(125));
  }
  else {

     //check for registered course
    $registeredCourses = get_student_registered_courses($studentInfo->uid, $values['session'], $values['semester']);
    if (db_affected_rows($registeredCourses) <= 0) {
      drupal_set_message(Error_Types(124));

    }
    else {//course reg info exists

      $student_profile = new UserProfile($studentInfo->uid);

      $rs = get_programmes($student_profile->profile_first_choice);
      $programmeInfo = db_fetch_object($rs);

      //drupal_set_message('ok');
      //build tableField=>formElement array
      $studInfo = array('uid'=>$studentInfo->uid, 'fname'=>$student_profile->profile_first_name, 'mat_no'=>$studentInfo->name,
        'level'=>$student_profile->profile_level_name,
        'current_programme_nid'=>$programmeInfo->programme_nid,
        'current_programme_name'=>$programmeInfo->programme_name
      );
      $_SESSION['eduerp_drop_on'] = 1;//keep showing the form
      unset($_SESSION['eduerp_drop_course_info']);
      //ini_ses($studentInfo->uid, "eduerp_drop_course_info");
      $_SESSION['eduerp_drop_course_info'] = array('studentInfo' => $studInfo, 'session' => $values['session'], 'semester' => $values['semester']);
    }
  }
}


function get_student_registered_courses($studentUID, $session, $semester) {
  $sql = "SELECT g.nid nid, t.nid ctci_nid, c.field_code_value course_code
  FROM {content_type_student_grades} g
    INNER JOIN {content_type_course_instance} t ON g.field_course_instance_nid = t.nid AND t.field_sess_name_value = '%s' AND t.field_semester_name_value = '%s'
    INNER JOIN {content_type_course} c ON t.field_course_id_nid = c.nid
    WHERE g.field_mat_no_uid = %d AND g.field_dropped_value=0 ";
  $result = db_query($sql, $session, $semester, $studentUID);

  return $result;


}


function staff_manual_course_reg() {
  global $user;
  ob_start();
  echo '<br /><hr /><br />';
      $navi = "<font size = '1px'><a href = '/staff/semester/'>Semester Administration</a>&nbsp; &raquo; &nbsp;Manual Course Registration</font><br /><br />";
      $navi .= '<br /><hr /><br />';
  if (staff_has_eduerp_role($user->uid, 0, 0, array('Registry', 'Registrar'))) {

    if (! isset($_SESSION['eduerp_reg_on']) && ! isset($_POST['eduerp_reg_on'])) {

      echo $navi;
      echo "<b>Get Student unRegistered Courses</b> - Please fill the form as appropriate<br /><br />";
      echo drupal_get_form('get_student_unreg_course_form');

    }
    else {//show form to allow him register courses
      $navi = "<font size = '1px'><a href = '/staff/semester/'>Semester Administration</a>&nbsp; &raquo; &nbsp;<a href='/staff/manualcoursereg'>Manual Course Registration</a>&nbsp; &raquo; &nbsp; Student: <b>". $_SESSION['eduerp_reg_course_info']['studentInfo']['mat_no'] ."</b></font><br /><br />";
      $navi .= '<br /><hr /><br />';
      echo $navi;
      //echo "<b>List of unRegistered Courses</b> | <b>". $_SESSION['eduerp_reg_course_info']['studentInfo']['fname'] ."</b> - <b>". $_SESSION['eduerp_reg_course_info']['studentInfo']['mat_no'] ."</b> | <b>". $_SESSION['eduerp_reg_course_info']['session'] ." Session</b>  |  <b>Semester ". $_SESSION['eduerp_reg_course_info']['semester'] ."</b> - Select a Course to Register it<br /><br />";
      echo "<b>List of unRegistered Courses for</b> | <b>". $_SESSION['eduerp_reg_course_info']['studentInfo']['fname'] ."</b> - <b>". $_SESSION['eduerp_reg_course_info']['studentInfo']['mat_no'] ."</b>
      | <b>". $_SESSION['eduerp_reg_course_info']['session'] ." Session</b>  |  <b>Semester ". $_SESSION['eduerp_reg_course_info']['semester'] ."</b>
      | <b>". $_SESSION['eduerp_reg_course_info']['studentInfo']['current_programme_name'] ."</b>
      |  Student current level <b>". $_SESSION['eduerp_reg_course_info']['studentInfo']['level'] ." </b>
      <br /><br />- Select a Course to Register it<br /><br />";
      echo drupal_get_form('get_student_reg_course_form');

    }

  }
  else {
    echo $navi;
    echo Error_Types(127);

  }
  unset($_SESSION['eduerp_reg_on']);
  return ob_get_clean();
}


function get_student_unreg_course_form() {
  $form['#title'] = 'Get Student unRegistered Courses By Session and Semester ';

  $form['mat_no'] = array(
    '#type' => 'textfield',
    '#title' => 'Matriculation Number',
    '#required' => TRUE
  );

 $form['session'] = array(
    '#type' => 'select',
    '#options' => get_all_sessions(),
    '#title' => 'Session'
  );
  $form['semester'] = array(
      '#type' => 'select',
      '#options' => array(1 => '1', 2 => '2', 3=>'3'),
      '#title' => 'Semester'
   );
  $form['submit'] = array(
      '#value' => 'Get unRegistered Courses',
      '#type' => 'submit'
  );


  return $form;

}


function get_student_unreg_course_form_validate($form, &$state) {
  $values = $state['values'];

  $studentInfo = user_load(array('name'=>$values['mat_no']));


  if( ! $studentInfo) {
    form_set_error('mat_no', Error_Types(125));
  }
  else {

    //check for unregistered course
    $unRegisteredCourses = get_student_unregistered_courses($studentInfo->uid, $values['session'], $values['semester']);
    if (db_affected_rows($unRegisteredCourses) <= 0) {
      drupal_set_message(Error_Types(128));

    }
    else {//course reg info exists
      $student_profile = new UserProfile($studentInfo->uid);

      $rs = get_programmes($student_profile->profile_first_choice);
      $programmeInfo = db_fetch_object($rs);


      //build tableField=>formElement array
      $studInfo = array('uid'=>$studentInfo->uid, 'fname'=>$student_profile->profile_first_name, 'mat_no'=>$studentInfo->name,
        'level'=>$student_profile->profile_level_name,
        'current_programme_nid'=>$programmeInfo->programme_nid,
        'current_programme_name'=>$programmeInfo->programme_name
      );
      $_SESSION['eduerp_reg_on'] = 1;//keep showing the form

      unset($_SESSION['eduerp_reg_course_info']);
      $_SESSION['eduerp_reg_course_info'] = array('studentInfo' => $studInfo, 'session'=>$values['session'] , 'semester'=>$values['semester'] );
    }
  }
}


function get_student_reg_course_form() {
  $form['#title'] = 'Register Course Form';
  $courses = array();
  if(isset($_SESSION['eduerp_reg_course_info'])) {
    $result = get_student_unregistered_courses($_SESSION['eduerp_reg_course_info']['studentInfo']['uid'], $_SESSION['eduerp_reg_course_info']['session'], $_SESSION['eduerp_reg_course_info']['semester']);

    if (db_affected_rows($result) > 0) {
      while($r = db_fetch_object($result))
      $courses[$r->course_instance] = $r->course_code;
    }
  }

 $form['course_instance_id'] = array(
    '#type' => 'select',
    '#options' => array(''=>'') + $courses,
    '#title' => 'unRegistered Courses',
    '#required' =>TRUE
  );

  $form['eduerp_reg_on'] = array(
    '#type' => 'hidden',
    '#default_value'=>1,
    '#title' => 'keep showing form'
  );


  $form['submit'] = array(
      '#value' => 'Register Course',
      '#type' => 'submit'
  );


  return $form;

}


function get_student_reg_course_form_validate($form, &$state) {
  $_SESSION['eduerp_reg_on'] = 1;//keep showing the form

  $values = $state['values'];

  // Insure that there is no already existing 'student_grades' CCK for the same student, session and semester for the same course
  $sql = "SELECT sg.nid, ci.nid, c.nid
    FROM {content_type_student_grades} sg
    INNER JOIN {content_type_course_instance} ci ON sg.field_course_instance_nid = ci.nid AND ci.field_sess_name_value = '%s' AND ci.field_semester_name_value = '%s'
    INNER JOIN {content_type_course} c ON ci.field_course_id_nid = c.nid
    WHERE sg.field_mat_no_uid = %d AND sg.field_dropped_value = 0 AND c.nid IN
      (
        SELECT c0.nid
        FROM {content_type_course} c0
        INNER JOIN {content_type_course_instance} ci0 ON c0.nid = ci0.field_course_id_nid
        WHERE ci0.nid = %d
      )";
  $result = db_query($sql, $_SESSION['eduerp_reg_course_info']['session'], $_SESSION['eduerp_reg_course_info']['semester'], $_SESSION['eduerp_reg_course_info']['studentInfo']['uid'], $values['course_instance_id']);

  if (db_affected_rows($result) > 0)
    form_set_error('course_instance_id', 'That course is already registered for this session and semester');

  //check for remainders
  $result = get_student_unregistered_courses($_SESSION['eduerp_reg_course_info']['studentInfo']['uid'], $_SESSION['eduerp_reg_course_info']['session'], $_SESSION['eduerp_reg_course_info']['semester']);
  if(db_affected_rows($result) <= 0)
    drupal_set_message(Error_Types(126));
}


function get_student_reg_course_form_submit($form, &$state) {
  $_SESSION['eduerp_reg_on'] = 1;//keep showing the form
  $values = $state['values'];

  $studentUID = $_SESSION['eduerp_reg_course_info']['studentInfo']['uid'];
  $student_profile = new UserProfile($studentUID);
  $session = $_SESSION['eduerp_reg_course_info']['session'];
  $semester = $_SESSION['eduerp_reg_course_info']['semester'];
  $studentname = '';
  if (!empty($student_profile->profile_first_name) && !empty($student_profile->profile_last_name)) {
    $middle = '';
    if (!empty($student_profile->profile_middle_name)) $middle = ' ' . $student_profile->profile_middle_name;
    $studentname = "{$student_profile->profile_last_name}, {$student_profile->profile_first_name}{$middle}";
  }

  // Find the program type
  $sql = "SELECT field_program_type_value FROM {content_type_program} WHERE nid=%d";
  $result = db_query($sql, $student_profile->profile_first_choice);
  $row = db_fetch_object($result);
  $program_type = abs($row->field_program_type_value);
  if ($program_type == 3 && $student_profile->profile_level_name == '100') $program_type = 0; // First year medicine does not use medicine type scales

  // Find the existing student_program
  $sql = "SELECT nid FROM {content_type_student_program} WHERE field_student_ref_sp_uid=%d AND field_program_ref_sp_nid=%d";
  $result = db_query($sql, $studentUID, $student_profile->profile_first_choice);
  $row = db_fetch_object($result);
  $student_program = $row->nid;

  $student->uid = $studentUID;
  $student_gpa = create_student_gpa($student, $student_profile, $studentname, $student_program, $session, $semester, 0);

  create_student_grades($student, $values['course_instance_id'], $student_gpa, $studentname, $program_type);

  update_credit_load_registered($studentUID, $session, $semester);

  drupal_set_message('Course was Registered Successfully!');

  //check for remainders
  $result = get_student_unregistered_courses($_SESSION['eduerp_reg_course_info']['studentInfo']['uid'], $session, $semester);
  if(db_affected_rows($result) <= 0)
    drupal_set_message(Error_Types(126));
}


function get_student_unregistered_courses($studentUID, $session, $semester) {
  //get the student's profile info
  $student_profile = new UserProfile($studentUID);
  $studInfo['fname'] = $student_profile->profile_first_name;

  //we need to get the courses he may have registered for reason being we will not be including those
  $registeredCourses = get_student_registered_courses($studentUID, $session, $semester);
  $strRegisteredCourses = "";
  if(db_affected_rows($registeredCourses) > 0) {
    //these are the courses he already registered for the session/semester
    //build content_type_instance_id array
    while ($r = db_fetch_object($registeredCourses)) {
      $exclude[] = $r->ctci_nid;
    }
    if (is_array($exclude) && sizeof($exclude)) {
      $registered_nids = implode (", ", $exclude);
      $strRegisteredCourses = " AND ci.nid NOT IN (". $registered_nids .") ";
    }
  }

  $sql = "SELECT DISTINCT
        ci.nid AS course_instance,
        CONCAT(c.field_code_value, IF(ci.field_location_value > 1, CONCAT(' (', CAST(ci.field_location_value AS CHAR), ': ', LEFT(ci.field_timetable_value, 100), ')'), '')) AS course_code
      FROM
        {content_type_course_instance} ci,
        {content_type_course} c,
        {program_course} pc
      WHERE
        ci.field_sess_name_value='%s' AND
        ci.field_semester_name_value='%s' AND
        ci.field_course_id_nid=c.nid AND
        c.nid=pc.course_id AND
        pc.programme_id=%d
        ". $strRegisteredCourses ."
      ORDER BY course_code";
  $result = db_query($sql, $session, $semester, $student_profile->profile_first_choice);
  return $result;
}


function update_credit_load_registered($uid, $session, $semester) {
  $sql = "
    SELECT SUM(sg.field_credit_load_sg_value) AS total_registered
    FROM {content_type_student_gpa} gpa
    INNER JOIN {content_type_student_grades} sg ON gpa.nid = sg.field_student_gpa_nid
    WHERE
      gpa.field_student_ref_gpa_uid = %d AND gpa.field_sess_name_gpa_value = '%s' AND gpa.field_semester_name_gpa_value = '%s' AND
      sg.field_dropped_value = 0";
  $sql = "
    SELECT SUM(sg.field_credit_load_sg_value) AS total_registered
    FROM {content_type_student_gpa} gpa
    INNER JOIN {content_type_student_grades} sg ON gpa.nid = sg.field_student_gpa_nid
    INNER JOIN {content_type_course_instance} ci ON sg.field_course_instance_nid = ci.nid
    INNER JOIN {content_type_course} c ON ci.field_course_id_nid = c.nid
    WHERE
      gpa.field_student_ref_gpa_uid = %d AND gpa.field_sess_name_gpa_value = '%s' AND gpa.field_semester_name_gpa_value = '%s' AND
      sg.field_dropped_value = 0";
  if ($semester != '3') {
      // Suppress courses failed in previous semesters which should not be counted towards registered credit (see same SQL in student_course_form_validate())
      // (except that in semester 3 they should be included)
      $sql .= " AND
      c.field_code_value NOT IN(
        SELECT DISTINCT
          cx.field_code_value
        FROM
          {content_type_student_grades} sgx,
          {content_type_course_instance} cix,
          {content_type_course} cx,
          {program_course} pcx,
          {node} nsprox,
          {content_type_student_profile} sprox
        WHERE
          IF(sgx.field_gradepoint_value='-', 0, sgx.field_gradepoint_value)=0 AND
          sgx.field_mat_no_uid=%d AND
          sgx.field_course_instance_nid=cix.nid AND
          sgx.field_examscorelocked_value>0 AND
          sgx.field_dropped_value=0 AND
          cix.field_course_id_nid=cx.nid AND
          cix.field_course_id_nid=pcx.course_id AND
          CONCAT(cix.field_sess_name_value, cix.field_semester_name_value)<'%s%s' AND
          pcx.programme_id=sprox.field_profile_first_choice_nid AND
          nsprox.uid=sgx.field_mat_no_uid AND
          nsprox.type='student_profile' AND
          nsprox.vid=sprox.vid
        )";
    $result = db_query($sql, $uid, $session, $semester, $uid, $session, $semester);
  }
  else {
    $result = db_query($sql, $uid, $session, $semester);
  }
  $r = db_fetch_object($result);

  $sql = "UPDATE {content_type_student_gpa} gpa1 SET field_credit_load_registered_value = %d
    WHERE gpa1.field_student_ref_gpa_uid = %d AND gpa1.field_sess_name_gpa_value = '%s' AND gpa1.field_semester_name_gpa_value = '%s'";
  db_query($sql, $r->total_registered, $uid, $session, $semester);
  cache_clear_all('content:', content_cache_tablename(), TRUE);
}


/*
function create_student_grades($studentUID, $course_instance, $student_gpa, $studentname, $program_type) {
  //borrowd function from student module
  // student_grades CCK
  $node = new stdClass();
  $node->type                                    = 'student_grades';
  $node->uid                                     = 1;  // Admin
  $node->status                                  = 1;  // Published
  $node->promote                                 = 0;
  $node->sticky                                  = 0;
  $node->comment                                 = 0;
  $node->title                                   = $studentname;
  $node->field_mat_no[0]['uid']                  = $studentUID;
  $node->field_course_instance[0]['nid']         = $course_instance;
  $node->field_student_gpa[0]['nid']             = $student_gpa;
  $node->field_ca1[0]['value']                   = 0;
  $node->field_ca1forstudent[0]['value']         = 0;
  $node->field_ca1locked[0]['value']             = 0;
  $node->field_ca2[0]['value']                   = 0;
  $node->field_ca2forstudent[0]['value']         = 0;
  $node->field_ca2locked[0]['value']             = 0;
  $node->field_ca3[0]['value']                   = 0;
  $node->field_ca3forstudent[0]['value']         = 0;
  $node->field_ca3locked[0]['value']             = 0;
  $node->field_ca4[0]['value']                   = 0;
  $node->field_ca4forstudent[0]['value']         = 0;
  $node->field_ca4locked[0]['value']             = 0;
  $node->field_exam_score[0]['value']            = 0;
  $node->field_examscoreforstudent[0]['value']   = 0;
  $node->field_examscorelocked[0]['value']       = 0;
  $node->field_total_score[0]['value']           = '-'; // Computed, probably should not be set here, will be computed on save
  $node->field_totalscoreforstudent[0]['value']  = '-';
  $node->field_grade[0]['value']                 = '-'; // Computed, probably should not be set here, will be computed on save
  $node->field_gradeforstudent[0]['value']       = '-';
  $node->field_gradepoint[0]['value']            = '-'; // Computed, probably should not be set here, will be computed on save
  $node->field_gradepointforstudent[0]['value']  = '-';
  $node->field_dropped[0]['value']               = 0;
  $node->field_calc_type[0]['value']             = $program_type;
  node_save($node);
}


/*
function create_student_gpa($studentUID, $user_profile, $studentname, $student_program, $session, $semester, $creditload) {
  // Check if there is an existing student_gpa, must avoid a duplicate
  //borrowed function from student module
  $sql = "SELECT gpa.nid AS student_gpa FROM {content_type_student_gpa} gpa
    WHERE
      gpa.field_student_ref_gpa_uid=%d AND
      gpa.field_sess_name_gpa_value='%s' AND
      gpa.field_semester_name_gpa_value=%d
    LIMIT 1";
  $rows = db_query($sql, $studentUID, $session, $semester);
  if ($row = db_fetch_object($rows)) {
    $node = node_load($row->student_gpa);
  }
  else {
    $node = new stdClass();
    $node->type                                  = 'student_gpa';
    $node->uid                                   = 1;  // Admin
    $node->status                                = 1;  // Published
    $node->promote                               = 0;
    $node->sticky                                = 0;
    $node->comment                               = 0;
    $node->title                                 = "$studentname - $session - $semester";
    $node->field_student_ref_gpa[0]['uid']       = $studentUID;
    $node->field_sess_name_gpa[0]['value']       = $session;
    $node->field_semester_name_gpa[0]['value']   = $semester;
  }
  $node->field_program_ref_gpa[0]['nid']         = $user_profile->profile_first_choice;
  $node->field_student_program_ref_gpa[0]['nid'] = $student_program;
  $node->field_gptotal[0]['value']               = '-';
  $node->field_gpa[0]['value']                   = '-';
  $node->field_gpaforstudent[0]['value']         = '-';
  $node->field_credit_load_registered[0]['value']= $creditload;
  $node->field_credit_load_completed[0]['value'] = 0;
  $node->field_level_name_gpa[0]['value']        = $user_profile->profile_level_name;
  node_save($node);
  return $node->nid;
}
*/


function staff_change_student_programme() {
  global $user;
  ob_start();
  echo '<br /><hr /><br />';
      $navi = "<font size = '1px'><a href = '/staff/semester/'>Semester Administration</a>&nbsp; &raquo; &nbsp;Change a Student's Programme</font><br /><br />";
      $navi .= '<br /><hr /><br />';
  if(isset($_SESSION['eduerp_change_prog_on'])) $_POST['eduerp_change_prog_on'] = $_SESSION['eduerp_change_prog_on'];

  if (staff_has_eduerp_role($user->uid, 0, 0, array('Registry', 'Registrar'))) {

    if (! isset($_SESSION['eduerp_change_prog_on']) && ! isset($_POST['eduerp_change_prog_on'])) {

      echo $navi;
      echo "<b>Get Student Info</b> - Please fill the form as appropriate<br /><br />";
      echo drupal_get_form('get_student_info_form');

    }
    elseif ($_POST['eduerp_change_prog_on'] == 1) {//page1


        $navi = "<font size = '1px'><a href = '/staff/semester/'>Semester Administration</a>&nbsp; &raquo; &nbsp;<a href='/staff/changeprogmme'>Change a Student's Programme</a>&nbsp; &raquo; &nbsp; Student: <b>". $_SESSION['eduerp_change_prog_info']['mat_no'] ."</b>&nbsp; &raquo; &nbsp; Select New Programme</font><br /><br />";
        $navi .= '<br /><hr /><br />';
        echo $navi;
        echo "<b>Student Current Info</b> | <b>". $_SESSION['eduerp_change_prog_info']['fname'] ."</b> - <b>". $_SESSION['eduerp_change_prog_info']['mat_no'] ."</b>
        | <b>". $_SESSION['eduerp_change_prog_info']['current_programme_name'] ."</b>
        | Student current level <b>". $_SESSION['eduerp_change_prog_info']['level'] ."</b>
        <br /><br />- Select a New Programme for the Student<br /><br />";
        echo drupal_get_form('staff_student_change_programme_form');
        echo "<font color=#FF0000><b>Do NOT do this until the session in which the student will be taking courses for the new program has started (otherwise the student's level will get increased for the new session)</b></font>";

      }
      elseif($_POST['eduerp_change_prog_on'] == 2) { //page 2
        $navi = "<font size = '1px'><a href = '/staff/semester/'>Semester Administration</a>&nbsp; &raquo; &nbsp;<a href='/staff/changeprogmme'>Change a Student's Programme</a>&nbsp; &raquo; &nbsp; Student: <b>". $_SESSION['eduerp_change_prog_info']['mat_no'] ."</b>&nbsp; &raquo; &nbsp; Effect New Programme</font><br /><br />";
        $navi .= '<br /><hr /><br />';
        echo $navi;
        //echo "<b>Student Current Info</b> | <b>". $_SESSION['eduerp_change_prog_info']['fname'] ."</b> - <b>". $_SESSION['eduerp_change_prog_info']['mat_no'] ."</b>
        //| <b>". $_SESSION['eduerp_change_prog_info']['current_programme_name'] ."</b>
        //| Student current level <b>". $_SESSION['eduerp_change_prog_info']['level'] ." </b> ";


        //echo '<br /><br />';
        echo "<b>Student New Info</b> | <b>". $_SESSION['eduerp_change_prog_info']['fname'] ."</b> - ".
        $_SESSION['eduerp_change_prog_info']['new_mat_no'] ."
        | <b>". $_SESSION['eduerp_change_prog_info']['new_programme_name'] ."</b>
        | Student new level <b>". $_SESSION['eduerp_change_prog_info']['new_programme_level'] ." </b> ";

        echo '<br /><hr /><br />';
        echo '<b>List of Passed Courses</b>';
        echo '<br /><br />';
        echo "<p>Below is the list of all Courses previously entered for and passed by this student.<br />
        The student most probably is expected to move with some of their earned credits to the new programme.<br />
        The Courses ticked below will automatically be credited to the new Programme.<br />
        Those unticked will not be.<br />
        If you wish the student to carry the credits of the unticked Courses over to the new Programme,<br />
        then the HOD for the Programme (or you if you have rights) should go to the<br />
        'Specify Courses for a Programme' part of <a href='createmodifyprog' target='_new'>Create/Modify a Programme</a>.<br />
        Add the courses to the Programme and immediately \"Delete\" them from the Programme so that they are<br />
        marked as 'Historical' so they cannot be registered by students selecting courses for a semester.<br />
        You can also click on the links below to get there faster.</p>";

        //echo show_student_previous_programme_results($_SESSION['eduerp_change_prog_info']['uid'], $_SESSION['eduerp_change_prog_info']['current_programme_nid']);
        echo get_courses_passed_by_student($_SESSION['eduerp_change_prog_info']['new_programme_nid'], $_SESSION['eduerp_change_prog_info']['uid']);
        //echo "<br /><hr /><br />- Map the new Programme<br /><br />";
        //echo drupal_get_form('get_student_change_prog_form');
      }

  }
  else {
    echo $navi;
    echo Error_Types(127);

  }
  unset($_SESSION['eduerp_change_prog_on']);
  return ob_get_clean();
}


function get_student_info_form() {
  $form['#title'] = 'Get Student Information ';

  $form['mat_no'] = array(
    '#type' => 'textfield',
    '#title' => 'Matriculation Number',
    '#required' => TRUE
  );

  $form['submit'] = array(
      '#value' => 'Get Student Info',
      '#type' => 'submit'
  );


  return $form;

}


function get_student_info_form_validate($form, &$state) {
  $values = $state['values'];
  $studentInfo = user_load(array('name'=>$values['mat_no']));


  if( ! $studentInfo) {
    form_set_error('mat_no', Error_Types(125));
  }
  else {

    //build tableField=>formElement array
    //drupal_set_message($studentInfo->uid);


    /*
    //make sure that GPA is not below 0.75
    $rs = get_student_current_GPA($studentUID, $level);

    if(db_affected_rows($rs) <= 0) {
      //either he is a new student or he has not sat for exams yet
      drupal_set_message(Error_Types(130));
      return;
    }
      elseif (db_affected_rows($rs) > 1) {
      //we have 1st and 2nd semester GPAs now use the 1 without zero starting from second semester
      while($row = db_fetch_object($rs)) {
        $gpa[$row->semester] = $row->gpa_value;

        //check the second semester
        if($gpa[2] > 0 && $gpa[2] < 0.75) {
          drupal_set_message(Error_Types(131));
          return;
        }
        //check the first semester
        if($gpa[1] > 0 && $gpa[1] < 0.75) {
          drupal_set_message(Error_Types(131));
          return;
        }
      }
    }
      else {
        $gpa = db_fetch_object($rs);
        if ($gpa->gpa_value < 0.75) {
          drupal_set_message(Error_Types(131));
          return;
        }
    }
    */
    $student_profile = new UserProfile($studentInfo->uid);
    //get the current programme name
    $rs = get_programmes($student_profile->profile_first_choice);
    $programmeInfo = db_fetch_object($rs);
    //  foreach($info as $k => $v)

    $studInfo = array('uid'=>$studentInfo->uid, 'fname'=>$student_profile->profile_first_name, 'mat_no'=>$studentInfo->name,
          'level'=>$student_profile->profile_level_name,
          'current_programme_nid'=>$programmeInfo->programme_nid,
          'current_programme_name'=>$programmeInfo->programme_name
          );

    unset($_SESSION['eduerp_change_prog_info']);
    $_SESSION['eduerp_change_prog_on'] = 1;//keep showing the form
    //ini_ses($studentInfo->uid, "eduerp_change_prog_info");
    $_SESSION['eduerp_change_prog_info'] = $studInfo;

  }
}


function staff_student_change_programme_form_submit($form, &$state) {
  $values = $state['values'];
  $rs = get_programmes($values['programme_nid']);
  $programmeInfo = db_fetch_object($rs);
  $student_profile = new UserProfile($_SESSION['eduerp_change_prog_info']['uid']);
  $_SESSION['eduerp_change_prog_info']['new_programme_nid'] = $values['programme_nid'];
  $_SESSION['eduerp_change_prog_info']['new_programme_name'] = $programmeInfo->programme_name;
  $_SESSION['eduerp_change_prog_info']['new_programme_level'] = $values['level_name'];

  $first_choice = $_SESSION['eduerp_change_prog_info']['new_programme_nid'];
  $level = $_SESSION['eduerp_change_prog_info']['new_programme_level'];
  //so go ahead with the change
  change_student_program($student_profile, $first_choice, $level);


  //create the content_type_student_record here
  $studentname = '';
  if (!empty($student_profile->profile_first_name) && !empty($student_profile->profile_last_name)) {
    $middle = '';
    if (!empty($student_profile->profile_middle_name)) $middle = ' ' . $student_profile->profile_middle_name;
    $studentname = "{$student_profile->profile_last_name}, {$student_profile->profile_first_name}{$middle}";
  }
  if ($student_profile->profile_reg_session !== variable_get('eduerp_current_session', '')) {

    $studentRecord = array('title' =>  $studentname .' - '. $_SESSION['eduerp_change_prog_info']['new_programme_name'],
  	                 'uid' => $_SESSION['eduerp_change_prog_info']['uid'], 'event' => 'Changed from Old Programme', 'degree' => 'None',
  	                 'session' => $student_profile->profile_reg_session, 'programmeUID' => $_SESSION['eduerp_change_prog_info']['new_programme_nid'],
  	                 'comment' => 'Changed from Old Programme'
  	  );

    create_student_record_cck($studentRecord);
  }

  $studentRecord = array('title' =>  $studentname .' - '. $_SESSION['eduerp_change_prog_info']['new_programme_name'],
  	                 'uid' => $_SESSION['eduerp_change_prog_info']['uid'], 'event' => 'Changed to New Programme', 'degree' => 'None',
  	                 'session' => variable_get('eduerp_current_session', ''), 'programmeUID' => $_SESSION['eduerp_change_prog_info']['new_programme_nid'],
  	                 'comment' => 'Changed to New Programme'
  	  );
   create_student_record_cck($studentRecord);

  drupal_set_message('The Student\'s Programme was changed successfully!');


  //get students new mat no
  $student_profile = new UserProfile($_SESSION['eduerp_change_prog_info']['uid']);
  $_SESSION['eduerp_change_prog_info']['new_mat_no'] = $student_profile->profile_matno;
  $_SESSION['eduerp_change_prog_on'] = 2;
  drupal_goto('staff/changeprogmme');//force a refresh

}


function staff_student_change_programme_form_validate($form, &$state) {
  ;

 /*
  //if(! empty($values['programme_nid'])) {
    //make sure that the new selected is not within the faculty
    $currentFaculty = get_programme_faculty($_SESSION['eduerp_change_prog_info']['current_programme_nid']);

    $newFaculty = get_programme_faculty($values['programme_nid']);
    //drupal_set_message('new is ' . $newFaculty);
    if ($currentFaculty == $newFaculty) {

      form_set_error('programme_nid', Error_Types(132));
      return;

    }
    else {
      $rs = get_programmes($values['programme_nid']);
      $programmeInfo = db_fetch_object($rs);

      $_SESSION['eduerp_change_prog_info']['new_programme_nid'] = $values['programme_nid'];
      $_SESSION['eduerp_change_prog_info']['new_programme_name'] = $programmeInfo->programme_name;
      $_SESSION['eduerp_change_prog_info']['new_programme_level'] = $values['level_name'];
      $_SESSION['eduerp_change_prog_on'] = 2;
      //$_POST['eduerp_change_prog_on'] = 2;
      drupal_goto('staff/changeprogmme');
      //drupal_set_message('done');
   // }

  //}
  */
}


function staff_student_change_programme_form() {
  $form['#title'] = "Change a Student's Programme";

 $form['programme_nid'] = array(
    '#type' => 'select',
    '#options' => array(' '=>' ') + get_programmes(0, true),
    '#title' => 'New Programme for Student',
    '#ahah' => array('path' => 'staff/ajax/programmelevel', 'event' => 'change', 'method' => 'replace', 'wrapper' => 'programmelevels'),
    '#required' => TRUE

  );
  //
 $form['level_name'] = array(
    '#type' => 'select',
    '#options' => staff_level(),
    '#title' => 'New Start Level',
    '#attributes' => array(
      'style' => 'width:100px'),
    '#prefix' => "<div id='programmelevels'>",
    '#suffix' => "</div>",
    '#disabled' => TRUE,
    '#required' => TRUE
  );

 $form['eduerp_change_prog_on'] = array(
    '#type' => 'hidden',
    '#default_value'=>1,
    '#title' => 'keep showing form'
  );

  $form['submit'] = array(
      '#value' => 'Change Student Programme Now',
      '#type' => 'submit'
  );
  return $form;


}

/*
function get_student_prog_form() {
  $form['#title'] = 'Continue to Change Student Programme';

 $form['programme_nid'] = array(
    '#type' => 'select',
    '#required' => TRUE,
    '#options' => array(' '=>' ') + get_programmes(0, true),
    '#title' => 'New Programme for Student',
    '#ahah' => array('path' => 'staff/ajax/programmelevel', 'event' => 'change', 'method' => 'replace', 'wrapper' => 'programmelevels')

  );
 $form['level_name'] = array(
    '#type' => 'select',
    '#options' => staff_level(),
    '#title' => 'New Start Level',
    '#attributes' => array(
      'style' => 'width:100px'),
    '#prefix' => "<div id='programmelevels'>",
    '#suffix' => "</div>",
    '#disabled' => TRUE,
    '#required' => TRUE
  );

 $form['eduerp_change_prog_on'] = array(
    '#type' => 'hidden',
    '#default_value'=>2,
    '#title' => 'keep showing form'
  );

  $form['submit'] = array(
      '#value' => 'Continue',
      '#type' => 'submit'
  );
  return $form;
}
*/
/*
function get_student_prog_validate($form, &$state) {
  form_set_error('programme_nid', Error_Types(132));
 $values = $state['values'];
 drupal_set_message('ok');
  //if(! empty($values['programme_nid'])) {
    //make sure that the new selected is not within the faculty
    $currentFaculty = get_programme_faculty($_SESSION['eduerp_change_prog_info']['current_programme_nid']);

    $newFaculty = get_programme_faculty($values['programme_nid']);
    //drupal_set_message('new is ' . $newFaculty);
    if ($currentFaculty == $newFaculty) {

      form_set_error('programme_nid', Error_Types(132));
      return;

    }
    else {
      $rs = get_programmes($values['programme_nid']);
      $programmeInfo = db_fetch_object($rs);

      $state['storage']['new_programme_nid'] = $values['programme_nid'];
      $state['storage']['new_programme_name'] = $programmeInfo->programme_name;
      $state['storage']['new_programme_level'] = $values['level_name'];
      $_SESSION['eduerp_change_prog_on'] = 2;
      //drupal_set_message('done');
    }

  //}

}
*/


function show_student_previous_programme_results($studentUID, $programmeNID) {

  ;

}


function get_student_current_GPA($studentUID, $level) {
  //note we do not need to apply session here because the student may have come after say 2 years to continue. We only need to use his last ever level

  $sql = "SELECT field_gpaforstudent_value gpa_value, field_semester_name_gpa_value semester FROM {content_type_student_gpa} WHERE field_student_ref_gpa_uid = %d AND field_level_name_gpa_value = '%s'";
  $rs = db_query($sql, $studentUID, $level);
  return $rs;

}


function get_programme_faculty($programm_nid) {
  $sql = "SELECT f.nid FROM {content_type_program} p
    INNER JOIN {content_type_department} d ON p.field_department_id_nid = d.nid
    INNER JOIN {content_type_college} f ON f.nid = d.field_college_id_nid
    WHERE p.nid = %d ";

  $rs = db_query($sql, $programm_nid);
  $r = db_fetch_object($rs);
  return $r->nid;
}


function get_courses_passed_by_student($first_choice, $uid) {
  $sql = "SELECT DISTINCT c.field_code_value, pc.course_id
       FROM {content_type_student_grades} sg,
 {content_type_course_instance}
  ci, {content_type_course} c
       LEFT JOIN {program_course} pc ON c.nid=pc.course_id AND
 pc.programme_id=%d
       WHERE
         sg.field_mat_no_uid=%d AND
         sg.field_course_instance_nid=ci.nid AND
         sg.field_examscorelocked_value>0 AND
         sg.field_dropped_value=0 AND
         ci.field_course_id_nid=c.nid AND
         IF(sg.field_gradepoint_value='-', 0, sg.field_gradepoint_value)>0";
     $result = db_query($sql, $first_choice, $uid);
     if (db_affected_rows($result) > 0) {
       $html = "
         <table border=1>
           <tr>
             <th>#</th>
             <th>&nbsp;</th>
             <th>Course Code</th>
           </tr>";$i=1;
       while ($row = db_fetch_object($result)) {
         if ($i%2) $rcolor = "#E5E5E5"; else $rcolor = "#FFFFFF";
         $html .="
           <tr bgcolor = \"$rcolor\" onMouseOver = \"this.bgColor = '#FDD381';\" onMouseOut = \"this.bgColor = '$rcolor';\">
             <td>". $i++ ."</td>";
         if (empty($row->course_id) || is_null($row->course_id))
           $html .="
             <td><input type='checkbox' disabled></td>
             <td><a href='specifycourse/$first_choice' target='_new'>". $row->field_code_value ."</a></td>";
         else
           $html .="
             <td><input type='checkbox' disabled checked></td>
             <td>". $row->field_code_value ."</td>";
         $html .= "
           </tr>";
       }
       $html .= "
         </table>";
     }
     else
       $html = strip_tags(Error_Types(106));


     return $html;
}


function staff_check_verify_programme_courses() {
  global $user;
  ob_start();
  echo '<br /><hr /><br />';
      $navi = "<font size = '1px'><a href = '/staff/semester/'>Semester Administration</a>&nbsp; &raquo; &nbsp;Check have all existing Courses required for all Programmes been Verified</font><br /><br />";
      $navi .= '<br /><hr /><br />';


  //if (staff_has_eduerp_role($user->uid, 0, 0, array('Registry', 'Registrar'))) {
    if (isset($_SESSION['eduerp_required']) ) {
      $str = display_verify_required_courses_for_programme() ."<br />";

    }
    echo $navi;
    echo "<b>Verify Courses for all Programmes</b> - Please fill the form as appropriate<br /><br />";
    echo drupal_get_form('get_verify_required_courses_for_programme_form');
    echo $str;


 // }
 // else {
 //   echo $navi;
 //   echo Error_Types(127);

 // }
  if(isset($_SESSION['eduerp_required'])) unset($_SESSION['eduerp_required']);
  return ob_get_clean();

}


function get_verify_required_courses_for_programme_form() {
  $form['#title'] = 'Verify Required Courses for A Programme';


  $form['session'] = array(
    '#type' => 'select',
    '#options' => get_all_sessions(),
    '#title' => 'Session',
    '#default_value'=>variable_get('eduerp_current_session', ''),
    '#required' => TRUE,
    );

  $form['semester'] = array(
    '#type' => 'select',
    '#options' => array(1=>'1', 2=>'2', 3=>'3'),
    '#title' => 'Semester',
    '#default_value'=>variable_get('eduerp_current_semester', ''),
    '#required' => TRUE,

    );

  $form['showDetails'] = array(
    '#type' => 'hidden',
    '#default_value' => 1,
    '#title' => 'trigger display',
    );
  $form['submit'] = array(
    '#value' => 'Verify Now',
    '#type' => 'submit'
  );

  return $form;

}


function get_verify_required_courses_for_programme_form_submit($form, &$state) {
  $values = $state['values'];

  $_SESSION['eduerp_required'] = $values;
  drupal_goto("staff/checkverifyprogmme");
}


function display_verify_required_courses_for_programme() {
  $values = $_SESSION['eduerp_required'];

  $sql = "SELECT DISTINCT
        pc.level,
        c.field_code_value course_code,
        p.field_programme_name_value programme_name,
        d.field_department_name_value department_name,
        co.field_college_name_value faculty_name
      FROM {program_course} pc
      INNER JOIN {content_type_course} c ON pc.course_id=c.nid AND pc.historical=0
      INNER JOIN {content_type_course_instance} ci
      ON
        c.nid=ci.field_course_id_nid AND
        pc.semester=ci.field_semester_name_value AND
        ci.field_sess_name_value='%s' AND
        ci.field_semester_name_value='%s'
      INNER JOIN {content_type_program} p ON pc.programme_id=p.nid
      INNER JOIN {content_type_department} d ON p.field_department_id_nid=d.nid
      INNER JOIN {content_type_college} co ON d.field_college_id_nid=co.nid
      LEFT JOIN {program_course_instance} pci
      ON
        ci.nid=pci.course_instance_id AND
        pc.programme_id=pci.programme_id AND
        pc.semester=pci.semester AND
        ci.field_sess_name_value=pci.session
      WHERE pci.programme_id is NULL
      ORDER BY co.field_college_name_value, d.field_department_name_value, p.field_programme_name_value, pc.level, c.field_code_value";
    $result = db_query($sql, $values['session'], $values['semester']); $i = 1;
    if(db_affected_rows($result) > 0 ) {
      $html = "
      <br /><hr /><br />
      List of any Course(s) that are running for <b>". $values['session'] ." Session</b> and <b>Semester ". $values['semester'] ."</b> but have not been Verified/Assigned to a Programme that needs them...<br />
      <table border ='1'>
        <tr>
          <th>#</th>
          <th>Faculty Name</th>
          <th>Department Name</th>
          <th>Programme Name</th>
          <th>Level</th>
          <th>Course</th>
        </tr>";
    	while ($f = db_fetch_object($result)) {
    	  if ($i%2) $rcolor = "#E5E5E5"; else $rcolor = "#FFFFFF";
    	  $html .= "
    	  <tr bgcolor = \"$rcolor\" onMouseOver = \"this.bgColor = '#FDD381';\" onMouseOut = \"this.bgColor = '$rcolor';\">
    	    <td>". $i++ ."</td>
    	    <td>". $f->faculty_name ."</td>
    	    <td>". $f->department_name ."</td>
    	    <td>". $f->programme_name ."</td>
    	    <td>". $f->level ."</td>
    	    <td>". $f->course_code ."</td>
    	  </tr>";


    	}
     $html .="
      </table>
      <br />
      Address the above issues here: <a href='createmodifyprog'>Create or Modify a University Programme</a><br />
      (Address the issue in the section \"Verify all Courses needed for a Programme are being run for a Semester\".)
      <br />";
    return $html;
    }
    else
      drupal_set_message("All existing Course are Verified for all Programmes for ". $values['session'] ." Session and Semester ". $values['semester'] ." ");

}


function get_course_grade_weighting($course_nid = 0) {

  $sql = "SELECT number_of_ca, ca_approved_onebyone, max_mark_ca1, max_mark_ca2, max_mark_ca3, max_mark_ca4, max_mark_exam FROM course_grade_weightings WHERE course_id = $course_nid LIMIT 1 ";
  $result = db_query($sql);
  if (db_affected_rows($result) <= 0) {
    $sql = "SELECT number_of_ca, ca_approved_onebyone, max_mark_ca1, max_mark_ca2, max_mark_ca3, max_mark_ca4, max_mark_exam FROM course_grade_weightings WHERE course_id = 0 LIMIT 1 ";
    $result = db_query($sql);
  }

  $dbFields = array('number_of_ca', 'ca_approved_onebyone', 'max_mark_ca1', 'max_mark_ca2', 'max_mark_ca3', 'max_mark_ca4', 'max_mark_exam');
  while ($r = db_fetch_object($result)) {
    foreach($dbFields as $v)
      $ca[$v] = $r->$v;
  }

  return $ca;
}


function create_course_weighting_entries(&$values) {

  if ($values['course_nid'] != 0) {
    //delete previous enteries
    $sql = "DELETE FROM course_grade_weightings WHERE course_id = %d ";
    db_query($sql, $values['course_nid']);

    $sql = "INSERT INTO course_grade_weightings (course_id, number_of_ca, ca_approved_onebyone, max_mark_ca1, max_mark_ca2, max_mark_ca3, max_mark_ca4, max_mark_exam  ) VALUES
    	(%d, %d, %d, %d, %d, %d, %d, %d) ";

    db_query($sql, $values['course_nid'], $values['caNum'], $values['caApproval'], $values['ca1'], $values['ca2'], $values['ca3'], $values['ca4'], $values['exam_mark']);

  }

}


function staff_views_api() {

  return array(

    'api' => 2,

    'path' => drupal_get_path('module', 'staff'),
  );

}

function staff_check_for_missing_courses(){
  global $user;
  ob_start();

  //if (! staff_has_eduerp_role($user->uid, 0, 0, array('Role Assigner'))) $isAuthorized = false; else $isAuthorized = true;

  echo '<br /><hr /><br />';

  //if (! $isAuthorized) {
  //  echo Error_Types(104);

  //}
  //else {
      
      	echo "<font size = '1px'><a href = '/staff/semester/'>Semester Administration</a>&nbsp; &raquo; &nbsp;Check for Missing Courses for a Semester</font><br /><br />";
        echo '<hr /><br />';
        echo "<b>Check for Missing Courses for a Semester</b> - Please fill the form as appropriate<br />";
      
      echo drupal_get_form('staff_show_check_missing_courses_form');
  //}
  echo '<br /><hr /><br />';
  
  if(! isset($_SESSION['eduerp_check_missing_courses'])) {
    $_SESSION['eduerp_check_missing_courses']['session'] = variable_get('eduerp_current_session', '');
    $_SESSION['eduerp_check_missing_courses']['semester'] = variable_get('eduerp_current_semester', 1);
  }
    //echo '<br /><hr /><br />';
    echo staff_display_missing_courses_for_a_semester($_SESSION['eduerp_check_missing_courses']['session'], $_SESSION['eduerp_check_missing_courses']['semester']);
  
  //}
  return ob_get_clean();	
	
}

function staff_show_check_missing_courses_form() {

  

  $form['#title'] = 'Check For Missing Courses';
  $form['session'] = array(
    '#type' => 'select',
    '#options' => get_all_sessions(),
    '#required' => TRUE,
    '#title' => 'Session');
  
  if ($_SESSION['eduerp_check_missing_courses']) $form['session']['#default_value'] = $_SESSION['eduerp_check_missing_courses']['session'];
  
   $form['semester'] = array(
      '#type' => 'select',
      '#options' => array(1 => '1', 2 => '2'),
      '#title' => 'Semester',
      '#required' => TRUE);
   if ($_SESSION['eduerp_check_missing_courses']) $form['semester']['#default_value'] = $_SESSION['eduerp_check_missing_courses']['semester'];
   
  $form['submit'] = array(
    '#value' => 'Show Now',
    '#type' => 'submit'
  );
  
  return $form;
}

function staff_show_check_missing_courses_form_submit($form, &$state) {
  $values = $state['values'];
  
  $_SESSION['eduerp_check_missing_courses']['session']  = $values['session'];
  $_SESSION['eduerp_check_missing_courses']['semester'] = $values['semester'];
  
}


function staff_display_missing_courses_for_a_semester($session, $semester) {
	
  $sql = "SELECT DISTINCT
        pc.level,
        c.field_code_value,
        p.field_programme_name_value,
        d.field_department_name_value,
        co.field_college_name_value
      FROM {program_course} pc
      INNER JOIN {content_type_course} c ON pc.course_id=c.nid AND pc.historical=0
      LEFT JOIN {content_type_course_instance} ci
      ON
        c.nid=ci.field_course_id_nid AND
        pc.semester=ci.field_semester_name_value AND
        ci.field_sess_name_value='%s'
      INNER JOIN {content_type_program} p ON pc.programme_id=p.nid
      INNER JOIN {content_type_department} d ON c.field_department_nid_nid=d.nid
      INNER JOIN {content_type_college} co ON d.field_college_id_nid=co.nid
      WHERE pc.semester='%s' AND ci.nid IS NULL
      ORDER BY co.field_college_name_value, d.field_department_name_value, c.field_code_value, p.field_programme_name_value, pc.level";
    $result = db_query($sql, $session, $semester);
    
  if(db_affected_rows($result) <=0) return "<b>List of Missing Courses for ". $semester ." Semester in ". $session ." Session</b><br /><br /><div><font color=green><b>All courses have been setup and assigned a lecturer.</b></font></div>";
	
  $str = "
  <div id='assigned_courses'>
  <b>List of Missing Courses for ". $semester ." Semester in ". $session ." Session</b><br />
  <table border=1>
    <tr>
      <th><b>#</b></th>
      <th><b>Faculty Name</b></th>
      <th><b>Department Name</b></th>
      <th><b>Programme Name</b></th>
      <th><b>Course Code</b></th>
       <th><b>Level</b></th>
    </tr>";$i = 1;
    //$faculties = get_departments();
    //foreach ($result as $v){
    while($v = db_fetch_object($result)){
      if ($i%2) $rcolor = "#E5E5E5"; else $rcolor = "#FFFFFF";
        $str .= "
         <tr bgcolor = \"$rcolor\" onMouseOver = \"this.bgColor = '#FDD381';\" onMouseOut = \"this.bgColor = '$rcolor';\">
           <td>". $i++ ."</td>
           <td>". $v->field_college_name_value ."</td>
           <td>". $v->field_department_name_value ."</td>
           <td>". $v->field_programme_name_value ."</td>
           <td>". $v->field_code_value ."</td>
           <td>". $v->level ."</td>
         </tr>";
      }

  //}
  $str .= "
  <tr>
    <td colspan=6>&nbsp;</td>
  </tr>
  <tr>
    <td colspan=6><font color=#FF0000><b>The HOD should go to <a href='" . url('staff/createeditcourse') . "'>Create or Modify Courses for a Department</a>, Select a Department and Start Assigning Lecturers to Courses</b></font></td>
  </tr>
  </table>
  </div>";
  return $str;

}

?>
