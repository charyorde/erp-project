<?php
include('fixtures.inc');
include_once('permissions_api.module');

/**
 * initialize the permissions for roles in this module
 */
function eduerp_perms_initialize() {
  $permissions = array(
    'Administrator' => array(
      'create profile content',
      'delete any profile content',
      'edit any profile content',

      'edit field_profile_country_name',
      'edit field_profile_dob',
      'edit field_profile_first_name',
      'edit field_profile_maiden_name',
      'edit field_profile_gender',
      'edit field_profile_last_name',
      'edit field_profile_lga_name',
      'edit field_profile_marital_status',
      'edit field_profile_middle_name',
      'edit field_profile_mobile_number',
      'edit field_profile_permanent_address',
      'edit field_profile_permanent_city',
      'edit field_profile_permanent_state',
      'edit field_profile_photograph',
      'edit field_profile_religion',
      'edit field_profile_signature',
      'edit field_profile_state_name_origin',
      'edit field_profile_title_name',

      'view field_profile_country_name',
      'view field_profile_department_id',
      'view field_profile_dob',
      'view field_profile_first_name',
      'view field_profile_maiden_name',
      'view field_profile_gender',
      'view field_profile_last_name',
      'view field_profile_lga_name',
      'view field_profile_marital_status',
      'view field_profile_middle_name',
      'view field_profile_mobile_number',
      'view field_profile_permanent_address',
      'view field_profile_permanent_city',
      'view field_profile_permanent_state',
      'view field_profile_photograph',
      'view field_profile_religion',
      'view field_profile_signature',
      'view field_profile_state_name_origin',
      'view field_profile_title_name',
    ),

    'authenticated user' => array(
      'create profile content',
      'edit own profile content',

      'edit field_profile_country_name',
      'edit field_profile_dob',
      'edit field_profile_first_name',
      'edit field_profile_maiden_name',
      'edit field_profile_gender',
      'edit field_profile_last_name',
      'edit field_profile_lga_name',
      'edit field_profile_marital_status',
      'edit field_profile_middle_name',
      'edit field_profile_mobile_number',
      'edit field_profile_permanent_address',
      'edit field_profile_permanent_city',
      'edit field_profile_permanent_state',
      'edit field_profile_photograph',
      'edit field_profile_religion',
      'edit field_profile_signature',
      'edit field_profile_state_name_origin',
      'edit field_profile_title_name',

      'view field_profile_country_name',
      'view field_profile_department_id',
      'view field_profile_dob',
      'view field_profile_first_name',
      'view field_profile_maiden_name',
      'view field_profile_gender',
      'view field_profile_last_name',
      'view field_profile_lga_name',
      'view field_profile_marital_status',
      'view field_profile_middle_name',
      'view field_profile_mobile_number',
      'view field_profile_permanent_address',
      'view field_profile_permanent_city',
      'view field_profile_permanent_state',
      'view field_profile_photograph',
      'view field_profile_religion',
      'view field_profile_signature',
      'view field_profile_state_name_origin',
      'view field_profile_title_name',
    ),

    'anonymous user' => array(
      'create profile content',

      'edit field_profile_country_name',
      'edit field_profile_dob',
      'edit field_profile_first_name',
      'edit field_profile_maiden_name',
      'edit field_profile_gender',
      'edit field_profile_last_name',
      'edit field_profile_lga_name',
      'edit field_profile_marital_status',
      'edit field_profile_middle_name',
      'edit field_profile_mobile_number',
      'edit field_profile_permanent_address',
      'edit field_profile_permanent_city',
      'edit field_profile_permanent_state',
      'edit field_profile_photograph',
      'edit field_profile_religion',
      'edit field_profile_signature',
      'edit field_profile_state_name_origin',
      'edit field_profile_title_name',
    ),
  );

  return $permissions;
}

function eduerp_install(){
  // Install the schemas
  drupal_install_schema('eduerp');

  // Load fixtures
  $fixtures_path = dirname(__FILE__) . "/fixtures/";
  load_fixtures('eduerp_states', $fixtures_path . "states.csv", true);
  load_fixtures('eduerp_lgas', $fixtures_path . "lgas.csv", true);
  load_fixtures('eduerp_countries', $fixtures_path . "countries.csv", true);

  // Run raw queries
  db_query('INSERT INTO {course_grade_weightings} VALUES (0, 4, 0, 10, 10, 10, 10, 60, 0, 0, 0, 0, 0)');

  // Install the content types
  $profile_content_type = file_get_contents(dirname(__FILE__) . '/cck/cck_profile.txt');

  $profile_info = content_types('profile');

  $form_state = array(
    'values' => array(
      // Updates the content type if it's existent, if not, creates it.
      'type_name' => (is_array($profile_info) && array_key_exists('type', $profile_info)) ? 'profile' : '<create>',
      'macro' => $profile_content_type,
    ),
  );
  drupal_execute('content_copy_import_form', $form_state);
  content_clear_type_cache();

  drupal_set_message('eduerp module installed');
}

function eduerp_enable() {
  // set content type permissions
  $perms = eduerp_perms_initialize();

  foreach ($perms as $role => $permissions) {
    permissions_grant_permissions($role, $permissions);
  }
}

function eduerp_disable() {
  // remove content type permissions
  $perms = eduerp_perms_initialize();

  foreach ($perms as $role => $permissions) {
    permissions_revoke_permissions($role, $permissions);
  }
}

function eduerp_uninstall(){
  // uninstall the schemas
  drupal_uninstall_schema('eduerp');

  drupal_set_message('eduerp module uninstalled');
}

function eduerp_schema() {
  $schema['session'] = array(
    'description' => t('Table for storing school session data'),
    'fields' => array(
      'session_id' => array(
        'description' => t('Session ID'),
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'sess_name' => array(
        'description' => t('Session Name e.g. 2009/2010'),
        'type' => 'varchar',
        'length' => '30',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('session_id'),
  );

  $schema['eduerp_lgas'] = array(
    'description' => t('This table stores Local Government Areas of a state'),
    'fields' => array(
      'lga_id' => array(
        'description' => t('Primary Key ID'),
        'type' => 'int',
        'not null' => TRUE,
      ),
      'lga_rel' => array(
        'description' => t('Foreign Key to the States table'),
        'type' => 'int',
        'not null' => TRUE,
      ),
      'lga_name' => array(
        'description' => t('The name of the LGA'),
        'type' => 'varchar',
        'length' => '100',
        'not null' => TRUE,
      ),
    ),
  );

  $schema['eduerp_countries'] = array(
    'description' => t('Stores a list of countries'),
    'fields' => array(
      'country_id' => array(
        'description' => t('Primary Key ID'),
        'type' => 'int',
        'not null' => TRUE,
      ),
      'country_name' => array(
        'description' => t('The name of the country'),
        'type' => 'varchar',
        'length' => '100',
        'not null' => TRUE,
      ),
    ),
  );

  $schema['eduerp_states'] = array(
    'description' => t('Table for storing the states in a country'),
    'fields' => array(
      'state_id' => array(
        'description' => t('State ID'),
        'type' => 'int',
        'not null' => TRUE,
      ),
      'state_name' => array(
        'description' => t('State Name'),
        'type' => 'varchar',
        'length' => '100',
        'not null' => TRUE,
      ),
    ),
  );

  $schema['program_level_semester'] = array(
    'description' => t('Program Level Semester'),
    'fields' => array(
      'programme_id' => array(
        'description' => t('Programme ID'),
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
      'level' => array(
        'description' => t('Level'),
        'type' => 'varchar',
        'length' => '50',
        'not null' => TRUE,
      ),
      'semester' => array(
        'description' => t('Semester'),
        'type' => 'varchar',
        'length' => '50',
        'not null' => TRUE,
      ),
      'min_credit_load' => array(
        'description' => t('Minimum Credit Load'),
        'type' => 'int',
        'not null' => TRUE,
      ),
      'max_credit_load' => array(
        'description' => t('Maximum Credit Load'),
        'type' => 'int',
        'not null' => TRUE,
      ),
      'open_for_registrations' => array(
        'description' => t('Open for registration'),
        'type' => 'int',
        'not null' => TRUE,
      ),
    ),
    'indexes' => array(
      'programme_id' => array('programme_id'),
    ),
  );

  $schema['program_course'] = array(
    'description' => t('Program Course'),
    'fields' => array(
      'program_course_id' => array(
        'description' => t('Program Course ID'),
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'course_id' => array(
        'description' => t('Course ID'),
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
      'programme_id' => array(
        'description' => t('Programme'),
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
      'level' => array(
        'description' => t('Level'),
        'type' => 'varchar',
        'length' => '50',
        'not null' => TRUE,
      ),
      'semester' => array(
        'description' => t('Semester'),
        'type' => 'varchar',
        'length' => '50',
        'not null' => TRUE,
      ),
      'course_type' => array(
        'description' => t('Course Type - 1 is core and 2 is elective'),
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
      ),
      'lecturer_id' => array(
        'description' => t('Lecturer'),
        'type' => 'int',
        'unsigned' => TRUE,
      ),
      'historical' => array(
        'description' => t('Historical - 0 is active and 1 is not to be used for new selections'),
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
      ),
      'credit_load' => array(
        'description' => t('Credit Load for this Course in this Program'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('program_course_id'),
    'indexes' => array(
      'programme_id' => array('programme_id'),
      'course_id' => array('course_id'),
    ),
  );

  $schema['program_course_instance'] = array(
    'description' => t('Program Course Instance'),
    'fields' => array(
      'course_instance_id' => array(
        'description' => t('Course Instance ID'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'programme_id' => array(
        'description' => t('Programme ID'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'session' => array(
        'description' => t('Session'),
        'type' => 'varchar',
        'length' => '50',
        'not null' => TRUE,
      ),
      'semester' => array(
        'description' => t('Semester'),
        'type' => 'varchar',
        'length' => '50',
        'not null' => TRUE,
      ),
    ),
    'indexes' => array(
      'programme_id' => array('programme_id')
    )
  );

  $schema['course_grade_weightings'] = array(
    'description' => t('Course Grade Weightings'),
    'fields' => array(
      'course_id' => array(
        'description' => t('Course ID'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'number_of_ca' => array(
        'description' => t('Number of CAs'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'ca_approved_onebyone' => array(
        'description' => t('CA approved One by One'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'max_mark_ca1' => array(
        'description' => t('Maximum mark for CA1'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'max_mark_ca2' => array(
        'description' => t('Maximum mark for CA2'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'max_mark_ca3' => array(
        'description' => t('Maxmimum mark for CA3'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'max_mark_ca4' => array(
        'description' => t('Maximum mark for CA4'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'max_mark_exam' => array(
        'description' => t('Maximum mark for exam'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'weight_ca1' => array(
        'description' => t('Weighting for CA1'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'weight_ca2' => array(
        'description' => t('Weighting for CA2'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'weight_ca3' => array(
        'description' => t('Weighting for CA3'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'weight_ca4' => array(
        'description' => t('Weighting for CA4'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'weight_exam' => array(
        'description' => t('Weighting for exam'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
    ),
    'indexes' => array(
      'course_id' => array('course_id')
    )
  );

  $schema['eduerp_roles'] = array(
    'description' => t('EduERP roles'),
    'fields' => array(
      'eduerp_role_id' => array(
        'description' => t('EduERP Role ID'),
        'type' => 'serial',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => t('User ID'),
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
      'department_id' => array(
        'description' => t('Department ID'),
        'type' => 'int',
        'default' => 0,
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
      'college_id' => array(
        'description' => t('College ID'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'unsigned' => TRUE,
      ),
      'role' => array(
        'description' => t('Role'),
        'type' => 'varchar',
        'length' => '100',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('eduerp_role_id'),
    'indexes' => array(
      'uid' => array('uid'),
      'department_id' => array('department_id'),
      'college_id' => array('college_id'),
      'role' => array('role')
    )
  );

  $schema['cron_notification'] = array(
    'description' => t('CRON notifications'),
    'fields' => array(
      'approver_uid' => array(
        'description' => t('Approver UID'),
        'type' => 'int',
        'default' => 0,
      ),
      'student_uid' => array(
        'description' => t('Student UID'),
        'type' => 'int',
        'not null' => TRUE,
      ),
      'gradestext' => array(
        'description' => t('Grades text'),
        'type' => 'varchar',
        'length' => '255',
        'default' => '',
      ),
      'programme' => array(
        'description' => t('Programme'),
        'type' => 'varchar',
        'length' => '255',
        'default' => '',
      ),
      'instruction' => array(
        'description' => t('Instruction'),
        'type' => 'int',
        'not null' => TRUE,
      ),
    ),
  );

  return $schema;
}
?>
